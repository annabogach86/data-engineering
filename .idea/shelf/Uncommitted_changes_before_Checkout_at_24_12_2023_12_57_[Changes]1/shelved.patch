Index: Задача 4.ipynb
===================================================================
diff --git a/Задача 4.ipynb b/Задача 4.ipynb
deleted file mode 100644
--- a/Задача 4.ipynb	
+++ /dev/null	
@@ -1,1613 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "31220e4e",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import numpy as np\n",
-    "import os\n",
-    "import seaborn as sns"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "1b58322b",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "pd.set_option(\"display.max_rows\", 20, \"display.max_columns\", 60)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "4f4fe95d",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def read_file(file_name):\n",
-    "    #return pd.read_csv(file_name)\n",
-    "    # для заархивированных файлов\n",
-    "    return pd.read_csv(file_name, compression='gzip')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "c2721115",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>id</th>\n",
-       "      <th>description</th>\n",
-       "      <th>key_skills</th>\n",
-       "      <th>schedule_id</th>\n",
-       "      <th>schedule_name</th>\n",
-       "      <th>accept_handicapped</th>\n",
-       "      <th>accept_kids</th>\n",
-       "      <th>experience_id</th>\n",
-       "      <th>experience_name</th>\n",
-       "      <th>specializations</th>\n",
-       "      <th>contacts</th>\n",
-       "      <th>billing_type_id</th>\n",
-       "      <th>billing_type_name</th>\n",
-       "      <th>allow_messages</th>\n",
-       "      <th>premium</th>\n",
-       "      <th>driver_license_types</th>\n",
-       "      <th>accept_incomplete_resumes</th>\n",
-       "      <th>employer_id</th>\n",
-       "      <th>employer_name</th>\n",
-       "      <th>employer_vacancies_url</th>\n",
-       "      <th>employer_trusted</th>\n",
-       "      <th>employer_alternate_url</th>\n",
-       "      <th>employer_industries</th>\n",
-       "      <th>response_letter_required</th>\n",
-       "      <th>type_id</th>\n",
-       "      <th>type_name</th>\n",
-       "      <th>has_test</th>\n",
-       "      <th>response_url</th>\n",
-       "      <th>test_required</th>\n",
-       "      <th>salary_from</th>\n",
-       "      <th>salary_to</th>\n",
-       "      <th>salary_gross</th>\n",
-       "      <th>salary_currency</th>\n",
-       "      <th>archived</th>\n",
-       "      <th>name</th>\n",
-       "      <th>insider_interview</th>\n",
-       "      <th>area_id</th>\n",
-       "      <th>area_name</th>\n",
-       "      <th>area_url</th>\n",
-       "      <th>created_at</th>\n",
-       "      <th>published_at</th>\n",
-       "      <th>address_city</th>\n",
-       "      <th>address_street</th>\n",
-       "      <th>address_building</th>\n",
-       "      <th>address_description</th>\n",
-       "      <th>address_lat</th>\n",
-       "      <th>address_lng</th>\n",
-       "      <th>alternate_url</th>\n",
-       "      <th>apply_alternate_url</th>\n",
-       "      <th>code</th>\n",
-       "      <th>department_id</th>\n",
-       "      <th>department_name</th>\n",
-       "      <th>employment_id</th>\n",
-       "      <th>employment_name</th>\n",
-       "      <th>prof_classes_found</th>\n",
-       "      <th>terms_found</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>30711158</td>\n",
-       "      <td>&lt;p&gt;&lt;strong&gt;О Компании&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Мы помог...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>between1And3</td>\n",
-       "      <td>От 1 года до 3 лет</td>\n",
-       "      <td>1.117 Тестирование 1 Информационные технологии...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>3034828.0</td>\n",
-       "      <td>Смарт консалтинг</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=3034828</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/3034828</td>\n",
-       "      <td>Разработка программного обеспечения</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>Тестировщик QA</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>4</td>\n",
-       "      <td>Новосибирск</td>\n",
-       "      <td>https://api.hh.ru/areas/4</td>\n",
-       "      <td>2020-10-12T05:18:46+0300</td>\n",
-       "      <td>2020-10-12T05:18:46+0300</td>\n",
-       "      <td>Новосибирск</td>\n",
-       "      <td>Октябрьская магистраль</td>\n",
-       "      <td>4</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>55.022567</td>\n",
-       "      <td>82.930086</td>\n",
-       "      <td>https://hh.ru/vacancy/30711158</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>tester</td>\n",
-       "      <td>jmeter спринт тестировщик continuous_integrati...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>30711538</td>\n",
-       "      <td>&lt;p&gt;&lt;strong&gt;Vigrom&lt;/strong&gt; сегодня – междунаро...</td>\n",
-       "      <td>PHP\\nSQL\\nООП\\nPostgreSQL\\nMemcached\\nSymfony\\...</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>between1And3</td>\n",
-       "      <td>От 1 года до 3 лет</td>\n",
-       "      <td>1.221 Программирование, Разработка 1 Информаци...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>1110684.0</td>\n",
-       "      <td>Vigrom Corp.</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=1110684</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/1110684</td>\n",
-       "      <td>Интернет-компания (поисковики, платежные систе...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>PHP-разработчик</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>71</td>\n",
-       "      <td>Пенза</td>\n",
-       "      <td>https://api.hh.ru/areas/71</td>\n",
-       "      <td>2020-01-28T10:52:44+0300</td>\n",
-       "      <td>2020-01-28T10:52:44+0300</td>\n",
-       "      <td>Пенза</td>\n",
-       "      <td>Тамбовская улица</td>\n",
-       "      <td>35Б</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>53.173614</td>\n",
-       "      <td>45.005847</td>\n",
-       "      <td>https://hh.ru/vacancy/30711538</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>programmer</td>\n",
-       "      <td>современный_офис memcache team phpunit php арх...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>30713109</td>\n",
-       "      <td>&lt;p&gt;Каждый день миллионы пользователей находят ...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>remote</td>\n",
-       "      <td>Удаленная работа</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>noExperience</td>\n",
-       "      <td>Нет опыта</td>\n",
-       "      <td>4.278 Сотрудник call-центра 4 Административный...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>1740.0</td>\n",
-       "      <td>Яндекс</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=1740</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/1740</td>\n",
-       "      <td>Интернет-компания (поисковики, платежные систе...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Оператор саll-центра</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>2</td>\n",
-       "      <td>Санкт-Петербург</td>\n",
-       "      <td>https://api.hh.ru/areas/2</td>\n",
-       "      <td>2020-03-21T10:07:10+0300</td>\n",
-       "      <td>2020-03-21T10:07:10+0300</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>https://hh.ru/vacancy/30713109</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>part</td>\n",
-       "      <td>Частичная занятость</td>\n",
-       "      <td>operator</td>\n",
-       "      <td>яндекс windows_7 гибкий_график</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>30714567</td>\n",
-       "      <td>&lt;p&gt;&lt;strong&gt;В твоих руках - отличная возможност...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>noExperience</td>\n",
-       "      <td>Нет опыта</td>\n",
-       "      <td>17.269 Телекоммуникации, Сетевые решения 17 Пр...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>1217313.0</td>\n",
-       "      <td>МегаФон Ритейл</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=1217313</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/1217313</td>\n",
-       "      <td>Розничная сеть (мобильный ретейл)</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>23000.0</td>\n",
-       "      <td>29000.0</td>\n",
-       "      <td>False</td>\n",
-       "      <td>RUR</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Продавец - Консультант офиса продаж и обслужив...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>1395</td>\n",
-       "      <td>Копейск</td>\n",
-       "      <td>https://api.hh.ru/areas/1395</td>\n",
-       "      <td>2020-01-13T12:38:10+0300</td>\n",
-       "      <td>2020-01-13T12:38:10+0300</td>\n",
-       "      <td>Челябинск</td>\n",
-       "      <td>улица Кирова</td>\n",
-       "      <td>159</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>55.164515</td>\n",
-       "      <td>61.401188</td>\n",
-       "      <td>https://hh.ru/vacancy/30714567</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>prodajnik</td>\n",
-       "      <td>медицинская_страховка официальное_трудоустройс...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>30716168</td>\n",
-       "      <td>&lt;p&gt;&lt;strong&gt;Компания «Северсталь-Инфоком» - цен...</td>\n",
-       "      <td>Bash\\nPowerShell\\nC++\\nC#\\nJava\\nPerl\\nPython\\...</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>between1And3</td>\n",
-       "      <td>От 1 года до 3 лет</td>\n",
-       "      <td>1.221 Программирование, Разработка 1 Информаци...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>6041.0</td>\n",
-       "      <td>Северсталь, Москва</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=6041</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/6041</td>\n",
-       "      <td>Добыча и обогащение угля\\nПродукция черной мет...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Технический консультант</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>1753</td>\n",
-       "      <td>Череповец</td>\n",
-       "      <td>https://api.hh.ru/areas/1753</td>\n",
-       "      <td>2020-01-23T17:59:56+0300</td>\n",
-       "      <td>2020-01-23T17:59:56+0300</td>\n",
-       "      <td>Череповец</td>\n",
-       "      <td>улица Мира</td>\n",
-       "      <td>30</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>59.136091</td>\n",
-       "      <td>37.877356</td>\n",
-       "      <td>https://hh.ru/vacancy/30716168</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>severstal-6041-it</td>\n",
-       "      <td>Северсталь. ИТ Компания</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>consultant</td>\n",
-       "      <td>bash team c# perl английский_язык тестирование...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>587632</th>\n",
-       "      <td>29701878</td>\n",
-       "      <td>&lt;p&gt;&lt;strong&gt;LС Group &lt;/strong&gt;– продуктовая IT-...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>between3And6</td>\n",
-       "      <td>От 3 до 6 лет</td>\n",
-       "      <td>1.395 Банковское ПО 1 Информационные технологи...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>2994882.0</td>\n",
-       "      <td>ЭЛСИ ГРУПП</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=2994882</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/2994882</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Senior Data Scientist (Академгородок)</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>4</td>\n",
-       "      <td>Новосибирск</td>\n",
-       "      <td>https://api.hh.ru/areas/4</td>\n",
-       "      <td>2020-03-12T07:44:15+0300</td>\n",
-       "      <td>2020-03-12T07:44:15+0300</td>\n",
-       "      <td>Новосибирск</td>\n",
-       "      <td>Советский район, микрорайон Академгородок, про...</td>\n",
-       "      <td>2/2</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>54.853138</td>\n",
-       "      <td>83.098521</td>\n",
-       "      <td>https://hh.ru/vacancy/29701878</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>data_scientist</td>\n",
-       "      <td>машинное_обучение team английский_язык intel с...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>587633</th>\n",
-       "      <td>29703872</td>\n",
-       "      <td>&lt;p&gt;&lt;em&gt;Мы помогаем владельцам малого и среднег...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>noExperience</td>\n",
-       "      <td>Нет опыта</td>\n",
-       "      <td>1.225 Продажи 1 Информационные технологии, инт...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>59436.0</td>\n",
-       "      <td>ТаксНет</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=59436</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/59436</td>\n",
-       "      <td>Интернет-компания (поисковики, платежные систе...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>40000.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>RUR</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Менеджер по продажам</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>88</td>\n",
-       "      <td>Казань</td>\n",
-       "      <td>https://api.hh.ru/areas/88</td>\n",
-       "      <td>2020-03-27T13:24:22+0300</td>\n",
-       "      <td>2020-03-27T13:24:22+0300</td>\n",
-       "      <td>Казань</td>\n",
-       "      <td>улица Мазита Гафури</td>\n",
-       "      <td>50</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>55.767230</td>\n",
-       "      <td>49.104222</td>\n",
-       "      <td>https://hh.ru/vacancy/29703872</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>prodajnik</td>\n",
-       "      <td>менеджер_по_продажам kpi skype ms_excel ms_off...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>587634</th>\n",
-       "      <td>29704859</td>\n",
-       "      <td>&lt;p&gt;Компания PricewaterhouseCoopers (PwC) реали...</td>\n",
-       "      <td>1C: Бухгалтерия\\n1С: Предприятие 8\\n1С: Управл...</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>moreThan6</td>\n",
-       "      <td>Более 6 лет</td>\n",
-       "      <td>1.221 Программирование, Разработка 1 Информаци...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>1201.0</td>\n",
-       "      <td>PwC</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=1201</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/1201</td>\n",
-       "      <td>Консалтинговые услуги</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Ведущий программист 1С</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>88</td>\n",
-       "      <td>Казань</td>\n",
-       "      <td>https://api.hh.ru/areas/88</td>\n",
-       "      <td>2020-01-13T11:48:07+0300</td>\n",
-       "      <td>2020-01-13T11:48:07+0300</td>\n",
-       "      <td>Казань</td>\n",
-       "      <td>Право-Булачная улица</td>\n",
-       "      <td>35/2</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>55.790084</td>\n",
-       "      <td>49.110879</td>\n",
-       "      <td>https://hh.ru/vacancy/29704859</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>programmer</td>\n",
-       "      <td>1c высшее_образование http team разработчик мо...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>587635</th>\n",
-       "      <td>29707339</td>\n",
-       "      <td>&lt;p&gt;&lt;strong&gt;Grow Food готовит и доставляет здор...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>between3And6</td>\n",
-       "      <td>От 3 до 6 лет</td>\n",
-       "      <td>1.327 Управление проектами 1 Информационные те...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard</td>\n",
-       "      <td>Стандарт</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>2104558.0</td>\n",
-       "      <td>GrowFood</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=2104558</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/2104558</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Marketing Product Owner</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>2</td>\n",
-       "      <td>Санкт-Петербург</td>\n",
-       "      <td>https://api.hh.ru/areas/2</td>\n",
-       "      <td>2020-01-06T11:14:00+0300</td>\n",
-       "      <td>2020-01-06T11:14:00+0300</td>\n",
-       "      <td>Санкт-Петербург</td>\n",
-       "      <td>улица Седова</td>\n",
-       "      <td>12</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>59.903002</td>\n",
-       "      <td>30.398181</td>\n",
-       "      <td>https://hh.ru/vacancy/29707339</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>owner</td>\n",
-       "      <td>site crm разработчик business_intelligence ux ...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>587636</th>\n",
-       "      <td>29707473</td>\n",
-       "      <td>&lt;p&gt;&lt;strong&gt;Ключевые функции и обязанности:&lt;/st...</td>\n",
-       "      <td>ABAP</td>\n",
-       "      <td>fullDay</td>\n",
-       "      <td>Полный день</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>between3And6</td>\n",
-       "      <td>От 3 до 6 лет</td>\n",
-       "      <td>1.221 Программирование, Разработка 1 Информаци...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>standard_plus</td>\n",
-       "      <td>Стандарт плюс</td>\n",
-       "      <td>True</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>False</td>\n",
-       "      <td>759873.0</td>\n",
-       "      <td>LeverX International</td>\n",
-       "      <td>https://api.hh.ru/vacancies?employer_id=759873</td>\n",
-       "      <td>True</td>\n",
-       "      <td>https://hh.ru/employer/759873</td>\n",
-       "      <td>Системная интеграция,  автоматизации технологи...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>open</td>\n",
-       "      <td>Открытая</td>\n",
-       "      <td>False</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>True</td>\n",
-       "      <td>Middle ABAP Developer</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>1002</td>\n",
-       "      <td>Минск</td>\n",
-       "      <td>https://api.hh.ru/areas/1002</td>\n",
-       "      <td>2020-10-02T12:27:34+0300</td>\n",
-       "      <td>2020-10-02T12:27:34+0300</td>\n",
-       "      <td>Минск</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>53.902257</td>\n",
-       "      <td>27.561831</td>\n",
-       "      <td>https://hh.ru/vacancy/29707473</td>\n",
-       "      <td>https://hh.ru/applicant/vacancy_response?vacan...</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>full</td>\n",
-       "      <td>Полная занятость</td>\n",
-       "      <td>programmer</td>\n",
-       "      <td>1c кофе team abap middle тренинг баскетбол jav...</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>587637 rows × 56 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "              id                                        description  \\\n",
-       "0       30711158  <p><strong>О Компании</strong></p> <p>Мы помог...   \n",
-       "1       30711538  <p><strong>Vigrom</strong> сегодня – междунаро...   \n",
-       "2       30713109  <p>Каждый день миллионы пользователей находят ...   \n",
-       "3       30714567  <p><strong>В твоих руках - отличная возможност...   \n",
-       "4       30716168  <p><strong>Компания «Северсталь-Инфоком» - цен...   \n",
-       "...          ...                                                ...   \n",
-       "587632  29701878  <p><strong>LС Group </strong>– продуктовая IT-...   \n",
-       "587633  29703872  <p><em>Мы помогаем владельцам малого и среднег...   \n",
-       "587634  29704859  <p>Компания PricewaterhouseCoopers (PwC) реали...   \n",
-       "587635  29707339  <p><strong>Grow Food готовит и доставляет здор...   \n",
-       "587636  29707473  <p><strong>Ключевые функции и обязанности:</st...   \n",
-       "\n",
-       "                                               key_skills schedule_id  \\\n",
-       "0                                                     NaN     fullDay   \n",
-       "1       PHP\\nSQL\\nООП\\nPostgreSQL\\nMemcached\\nSymfony\\...     fullDay   \n",
-       "2                                                     NaN      remote   \n",
-       "3                                                     NaN     fullDay   \n",
-       "4       Bash\\nPowerShell\\nC++\\nC#\\nJava\\nPerl\\nPython\\...     fullDay   \n",
-       "...                                                   ...         ...   \n",
-       "587632                                                NaN     fullDay   \n",
-       "587633                                                NaN     fullDay   \n",
-       "587634  1C: Бухгалтерия\\n1С: Предприятие 8\\n1С: Управл...     fullDay   \n",
-       "587635                                                NaN     fullDay   \n",
-       "587636                                               ABAP     fullDay   \n",
-       "\n",
-       "           schedule_name  accept_handicapped  accept_kids experience_id  \\\n",
-       "0            Полный день               False        False  between1And3   \n",
-       "1            Полный день               False        False  between1And3   \n",
-       "2       Удаленная работа                True        False  noExperience   \n",
-       "3            Полный день               False        False  noExperience   \n",
-       "4            Полный день               False        False  between1And3   \n",
-       "...                  ...                 ...          ...           ...   \n",
-       "587632       Полный день               False        False  between3And6   \n",
-       "587633       Полный день               False        False  noExperience   \n",
-       "587634       Полный день                True        False     moreThan6   \n",
-       "587635       Полный день               False        False  between3And6   \n",
-       "587636       Полный день               False        False  between3And6   \n",
-       "\n",
-       "           experience_name                                    specializations  \\\n",
-       "0       От 1 года до 3 лет  1.117 Тестирование 1 Информационные технологии...   \n",
-       "1       От 1 года до 3 лет  1.221 Программирование, Разработка 1 Информаци...   \n",
-       "2                Нет опыта  4.278 Сотрудник call-центра 4 Административный...   \n",
-       "3                Нет опыта  17.269 Телекоммуникации, Сетевые решения 17 Пр...   \n",
-       "4       От 1 года до 3 лет  1.221 Программирование, Разработка 1 Информаци...   \n",
-       "...                    ...                                                ...   \n",
-       "587632       От 3 до 6 лет  1.395 Банковское ПО 1 Информационные технологи...   \n",
-       "587633           Нет опыта  1.225 Продажи 1 Информационные технологии, инт...   \n",
-       "587634         Более 6 лет  1.221 Программирование, Разработка 1 Информаци...   \n",
-       "587635       От 3 до 6 лет  1.327 Управление проектами 1 Информационные те...   \n",
-       "587636       От 3 до 6 лет  1.221 Программирование, Разработка 1 Информаци...   \n",
-       "\n",
-       "       contacts billing_type_id billing_type_name  allow_messages  premium  \\\n",
-       "0           NaN        standard          Стандарт            True    False   \n",
-       "1           NaN        standard          Стандарт            True    False   \n",
-       "2           NaN        standard          Стандарт           False    False   \n",
-       "3           NaN        standard          Стандарт            True    False   \n",
-       "4           NaN        standard          Стандарт            True    False   \n",
-       "...         ...             ...               ...             ...      ...   \n",
-       "587632      NaN        standard          Стандарт            True    False   \n",
-       "587633      NaN        standard          Стандарт            True    False   \n",
-       "587634      NaN        standard          Стандарт            True    False   \n",
-       "587635      NaN        standard          Стандарт            True    False   \n",
-       "587636      NaN   standard_plus     Стандарт плюс            True    False   \n",
-       "\n",
-       "       driver_license_types  accept_incomplete_resumes  employer_id  \\\n",
-       "0                       NaN                      False    3034828.0   \n",
-       "1                       NaN                      False    1110684.0   \n",
-       "2                       NaN                       True       1740.0   \n",
-       "3                       NaN                      False    1217313.0   \n",
-       "4                       NaN                      False       6041.0   \n",
-       "...                     ...                        ...          ...   \n",
-       "587632                  NaN                      False    2994882.0   \n",
-       "587633                  NaN                       True      59436.0   \n",
-       "587634                  NaN                       True       1201.0   \n",
-       "587635                  NaN                      False    2104558.0   \n",
-       "587636                  NaN                      False     759873.0   \n",
-       "\n",
-       "               employer_name                           employer_vacancies_url  \\\n",
-       "0           Смарт консалтинг  https://api.hh.ru/vacancies?employer_id=3034828   \n",
-       "1               Vigrom Corp.  https://api.hh.ru/vacancies?employer_id=1110684   \n",
-       "2                     Яндекс     https://api.hh.ru/vacancies?employer_id=1740   \n",
-       "3             МегаФон Ритейл  https://api.hh.ru/vacancies?employer_id=1217313   \n",
-       "4         Северсталь, Москва     https://api.hh.ru/vacancies?employer_id=6041   \n",
-       "...                      ...                                              ...   \n",
-       "587632            ЭЛСИ ГРУПП  https://api.hh.ru/vacancies?employer_id=2994882   \n",
-       "587633               ТаксНет    https://api.hh.ru/vacancies?employer_id=59436   \n",
-       "587634                   PwC     https://api.hh.ru/vacancies?employer_id=1201   \n",
-       "587635              GrowFood  https://api.hh.ru/vacancies?employer_id=2104558   \n",
-       "587636  LeverX International   https://api.hh.ru/vacancies?employer_id=759873   \n",
-       "\n",
-       "       employer_trusted          employer_alternate_url  \\\n",
-       "0                  True  https://hh.ru/employer/3034828   \n",
-       "1                  True  https://hh.ru/employer/1110684   \n",
-       "2                  True     https://hh.ru/employer/1740   \n",
-       "3                  True  https://hh.ru/employer/1217313   \n",
-       "4                  True     https://hh.ru/employer/6041   \n",
-       "...                 ...                             ...   \n",
-       "587632             True  https://hh.ru/employer/2994882   \n",
-       "587633             True    https://hh.ru/employer/59436   \n",
-       "587634             True     https://hh.ru/employer/1201   \n",
-       "587635             True  https://hh.ru/employer/2104558   \n",
-       "587636             True   https://hh.ru/employer/759873   \n",
-       "\n",
-       "                                      employer_industries  \\\n",
-       "0                     Разработка программного обеспечения   \n",
-       "1       Интернет-компания (поисковики, платежные систе...   \n",
-       "2       Интернет-компания (поисковики, платежные систе...   \n",
-       "3                       Розничная сеть (мобильный ретейл)   \n",
-       "4       Добыча и обогащение угля\\nПродукция черной мет...   \n",
-       "...                                                   ...   \n",
-       "587632                                                NaN   \n",
-       "587633  Интернет-компания (поисковики, платежные систе...   \n",
-       "587634                              Консалтинговые услуги   \n",
-       "587635                                                NaN   \n",
-       "587636  Системная интеграция,  автоматизации технологи...   \n",
-       "\n",
-       "        response_letter_required type_id type_name  has_test response_url  \\\n",
-       "0                          False    open  Открытая     False          NaN   \n",
-       "1                          False    open  Открытая     False          NaN   \n",
-       "2                          False    open  Открытая     False          NaN   \n",
-       "3                          False    open  Открытая     False          NaN   \n",
-       "4                          False    open  Открытая     False          NaN   \n",
-       "...                          ...     ...       ...       ...          ...   \n",
-       "587632                     False    open  Открытая     False          NaN   \n",
-       "587633                     False    open  Открытая     False          NaN   \n",
-       "587634                     False    open  Открытая     False          NaN   \n",
-       "587635                     False    open  Открытая     False          NaN   \n",
-       "587636                     False    open  Открытая     False          NaN   \n",
-       "\n",
-       "       test_required  salary_from  salary_to salary_gross salary_currency  \\\n",
-       "0                NaN          NaN        NaN          NaN             NaN   \n",
-       "1                NaN          NaN        NaN          NaN             NaN   \n",
-       "2                NaN          NaN        NaN          NaN             NaN   \n",
-       "3                NaN      23000.0    29000.0        False             RUR   \n",
-       "4                NaN          NaN        NaN          NaN             NaN   \n",
-       "...              ...          ...        ...          ...             ...   \n",
-       "587632           NaN          NaN        NaN          NaN             NaN   \n",
-       "587633           NaN      40000.0        NaN        False             RUR   \n",
-       "587634           NaN          NaN        NaN          NaN             NaN   \n",
-       "587635           NaN          NaN        NaN          NaN             NaN   \n",
-       "587636           NaN          NaN        NaN          NaN             NaN   \n",
-       "\n",
-       "        archived                                               name  \\\n",
-       "0          False                                     Тестировщик QA   \n",
-       "1           True                                    PHP-разработчик   \n",
-       "2           True                               Оператор саll-центра   \n",
-       "3           True  Продавец - Консультант офиса продаж и обслужив...   \n",
-       "4           True                            Технический консультант   \n",
-       "...          ...                                                ...   \n",
-       "587632      True              Senior Data Scientist (Академгородок)   \n",
-       "587633      True                               Менеджер по продажам   \n",
-       "587634      True                             Ведущий программист 1С   \n",
-       "587635      True                            Marketing Product Owner   \n",
-       "587636      True                              Middle ABAP Developer   \n",
-       "\n",
-       "       insider_interview  area_id        area_name  \\\n",
-       "0                    NaN        4      Новосибирск   \n",
-       "1                    NaN       71            Пенза   \n",
-       "2                    NaN        2  Санкт-Петербург   \n",
-       "3                    NaN     1395          Копейск   \n",
-       "4                    NaN     1753        Череповец   \n",
-       "...                  ...      ...              ...   \n",
-       "587632               NaN        4      Новосибирск   \n",
-       "587633               NaN       88           Казань   \n",
-       "587634               NaN       88           Казань   \n",
-       "587635               NaN        2  Санкт-Петербург   \n",
-       "587636               NaN     1002            Минск   \n",
-       "\n",
-       "                            area_url                created_at  \\\n",
-       "0          https://api.hh.ru/areas/4  2020-10-12T05:18:46+0300   \n",
-       "1         https://api.hh.ru/areas/71  2020-01-28T10:52:44+0300   \n",
-       "2          https://api.hh.ru/areas/2  2020-03-21T10:07:10+0300   \n",
-       "3       https://api.hh.ru/areas/1395  2020-01-13T12:38:10+0300   \n",
-       "4       https://api.hh.ru/areas/1753  2020-01-23T17:59:56+0300   \n",
-       "...                              ...                       ...   \n",
-       "587632     https://api.hh.ru/areas/4  2020-03-12T07:44:15+0300   \n",
-       "587633    https://api.hh.ru/areas/88  2020-03-27T13:24:22+0300   \n",
-       "587634    https://api.hh.ru/areas/88  2020-01-13T11:48:07+0300   \n",
-       "587635     https://api.hh.ru/areas/2  2020-01-06T11:14:00+0300   \n",
-       "587636  https://api.hh.ru/areas/1002  2020-10-02T12:27:34+0300   \n",
-       "\n",
-       "                    published_at     address_city  \\\n",
-       "0       2020-10-12T05:18:46+0300      Новосибирск   \n",
-       "1       2020-01-28T10:52:44+0300            Пенза   \n",
-       "2       2020-03-21T10:07:10+0300              NaN   \n",
-       "3       2020-01-13T12:38:10+0300        Челябинск   \n",
-       "4       2020-01-23T17:59:56+0300        Череповец   \n",
-       "...                          ...              ...   \n",
-       "587632  2020-03-12T07:44:15+0300      Новосибирск   \n",
-       "587633  2020-03-27T13:24:22+0300           Казань   \n",
-       "587634  2020-01-13T11:48:07+0300           Казань   \n",
-       "587635  2020-01-06T11:14:00+0300  Санкт-Петербург   \n",
-       "587636  2020-10-02T12:27:34+0300            Минск   \n",
-       "\n",
-       "                                           address_street address_building  \\\n",
-       "0                                  Октябрьская магистраль                4   \n",
-       "1                                        Тамбовская улица              35Б   \n",
-       "2                                                     NaN              NaN   \n",
-       "3                                            улица Кирова              159   \n",
-       "4                                              улица Мира               30   \n",
-       "...                                                   ...              ...   \n",
-       "587632  Советский район, микрорайон Академгородок, про...              2/2   \n",
-       "587633                                улица Мазита Гафури               50   \n",
-       "587634                               Право-Булачная улица             35/2   \n",
-       "587635                                       улица Седова               12   \n",
-       "587636                                                NaN              NaN   \n",
-       "\n",
-       "        address_description  address_lat  address_lng  \\\n",
-       "0                       NaN    55.022567    82.930086   \n",
-       "1                       NaN    53.173614    45.005847   \n",
-       "2                       NaN          NaN          NaN   \n",
-       "3                       NaN    55.164515    61.401188   \n",
-       "4                       NaN    59.136091    37.877356   \n",
-       "...                     ...          ...          ...   \n",
-       "587632                  NaN    54.853138    83.098521   \n",
-       "587633                  NaN    55.767230    49.104222   \n",
-       "587634                  NaN    55.790084    49.110879   \n",
-       "587635                  NaN    59.903002    30.398181   \n",
-       "587636                  NaN    53.902257    27.561831   \n",
-       "\n",
-       "                         alternate_url  \\\n",
-       "0       https://hh.ru/vacancy/30711158   \n",
-       "1       https://hh.ru/vacancy/30711538   \n",
-       "2       https://hh.ru/vacancy/30713109   \n",
-       "3       https://hh.ru/vacancy/30714567   \n",
-       "4       https://hh.ru/vacancy/30716168   \n",
-       "...                                ...   \n",
-       "587632  https://hh.ru/vacancy/29701878   \n",
-       "587633  https://hh.ru/vacancy/29703872   \n",
-       "587634  https://hh.ru/vacancy/29704859   \n",
-       "587635  https://hh.ru/vacancy/29707339   \n",
-       "587636  https://hh.ru/vacancy/29707473   \n",
-       "\n",
-       "                                      apply_alternate_url code  \\\n",
-       "0       https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "1       https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "2       https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "3       https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "4       https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "...                                                   ...  ...   \n",
-       "587632  https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "587633  https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "587634  https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "587635  https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "587636  https://hh.ru/applicant/vacancy_response?vacan...  NaN   \n",
-       "\n",
-       "            department_id          department_name employment_id  \\\n",
-       "0                     NaN                      NaN          full   \n",
-       "1                     NaN                      NaN          full   \n",
-       "2                     NaN                      NaN          part   \n",
-       "3                     NaN                      NaN          full   \n",
-       "4       severstal-6041-it  Северсталь. ИТ Компания          full   \n",
-       "...                   ...                      ...           ...   \n",
-       "587632                NaN                      NaN          full   \n",
-       "587633                NaN                      NaN          full   \n",
-       "587634                NaN                      NaN          full   \n",
-       "587635                NaN                      NaN          full   \n",
-       "587636                NaN                      NaN          full   \n",
-       "\n",
-       "            employment_name prof_classes_found  \\\n",
-       "0          Полная занятость             tester   \n",
-       "1          Полная занятость         programmer   \n",
-       "2       Частичная занятость           operator   \n",
-       "3          Полная занятость          prodajnik   \n",
-       "4          Полная занятость         consultant   \n",
-       "...                     ...                ...   \n",
-       "587632     Полная занятость     data_scientist   \n",
-       "587633     Полная занятость          prodajnik   \n",
-       "587634     Полная занятость         programmer   \n",
-       "587635     Полная занятость              owner   \n",
-       "587636     Полная занятость         programmer   \n",
-       "\n",
-       "                                              terms_found  \n",
-       "0       jmeter спринт тестировщик continuous_integrati...  \n",
-       "1       современный_офис memcache team phpunit php арх...  \n",
-       "2                          яндекс windows_7 гибкий_график  \n",
-       "3       медицинская_страховка официальное_трудоустройс...  \n",
-       "4       bash team c# perl английский_язык тестирование...  \n",
-       "...                                                   ...  \n",
-       "587632  машинное_обучение team английский_язык intel с...  \n",
-       "587633  менеджер_по_продажам kpi skype ms_excel ms_off...  \n",
-       "587634  1c высшее_образование http team разработчик мо...  \n",
-       "587635  site crm разработчик business_intelligence ux ...  \n",
-       "587636  1c кофе team abap middle тренинг баскетбол jav...  \n",
-       "\n",
-       "[587637 rows x 56 columns]"
-      ]
-     },
-     "execution_count": 4,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[4]vacancies.csv.gz\"\n",
-    "read_file(file_name)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "05ed2a2a",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_memory_stat_by_column(df, output_file):\n",
-    "    # вывод пар: колонка - тип данных\n",
-    "    memory_usage_stat = df.memory_usage(deep=True)\n",
-    "    # суммарный размер\n",
-    "    total_memory_usage = memory_usage_stat.sum()\n",
-    "    result = {\n",
-    "        \"file_in_memory_size\": f\"{int(total_memory_usage // 1024):10} KB\",\n",
-    "        \"columns\": []\n",
-    "    }\n",
-    "    # проходимся по колонкам, записываем в список\n",
-    "    for key in df.dtypes.keys():\n",
-    "        result[\"columns\"].append({\n",
-    "            \"column_name\": key,\n",
-    "            \"memory_abs\": int(memory_usage_stat[key] // 1024),\n",
-    "            \"memory_per\": round(memory_usage_stat[key] / total_memory_usage * 100, 4),\n",
-    "            \"dtype\": str(df.dtypes[key])\n",
-    "        })\n",
-    "    # отсортируем колонки\n",
-    "    result[\"columns\"].sort(key=lambda x: x['memory_abs'], reverse=True)\n",
-    "    # Запись в файл JSON\n",
-    "    with open(output_file, 'w') as file:\n",
-    "        json.dump(result, file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "id": "3726d0d6",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "file_name = \"Data/[4]vacancies.csv.gz\"\n",
-    "dataset = read_file(file_name)\n",
-    "output_file = \"результаты_4.json\"\n",
-    "get_memory_stat_by_column(dataset, output_file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "id": "a05d84c2",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Считает объем памяти до и после преобразований\n",
-    "def mem_usage(pandas_obj):\n",
-    "    if isinstance(pandas_obj, pd.DataFrame):\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True).sum()\n",
-    "    else: # предположим, что если это не дадафрейм, то серия\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True)\n",
-    "    usage_mb = usage_b / 1024 ** 2 # преобразуем быйты в мегабайты\n",
-    "    return \"{:03.2f} MB\".format(usage_mb)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "id": "442190c7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 4. Преобразовать все колонки с типом данных «object» в категориальные, \n",
-    "#    если количество уникальных значений колонки составляет менее 50%."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "id": "a4524798",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def opt_obj(df):\n",
-    "    converted_obj = pd.DataFrame()\n",
-    "    dataset_obj = df.select_dtypes(include=['object']).copy()\n",
-    "    for col in dataset_obj.columns:\n",
-    "        num_unique_values = len(dataset_obj[col].unique())\n",
-    "        num_total_values = len(dataset_obj[col])\n",
-    "        if num_unique_values / num_total_values < 0.5:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col].astype('category')\n",
-    "        else:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col]\n",
-    "    print(mem_usage(dataset_obj))\n",
-    "    print(mem_usage(converted_obj))\n",
-    "    return converted_obj "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "id": "c6f7f416",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "6358.02 MB\n",
-      "4579.47 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_obj = opt_obj(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "id": "5092c2eb",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 5.Провести понижающее преобразование для столбцов типов «int» колонок\n",
-    "def opt_int(df):\n",
-    "    dataset_int = df.select_dtypes(include=['int']) # выбираем колонки типа int\n",
-    "    \"\"\"\n",
-    "    downcast:\n",
-    "            - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n",
-    "            - 'unsigned': smallest unsigned int dtype (min.: np.int8)\n",
-    "            - 'float': smallest float dtype (min.: np.float32)\n",
-    "    \"\"\"\n",
-    "    converted_int = dataset_int.apply(pd.to_numeric, downcast='unsigned')\n",
-    "    print(mem_usage(dataset_int))\n",
-    "    print(mem_usage(converted_int))\n",
-    "    compare_ints = pd.concat([dataset_int.dtypes, converted_int.dtypes], axis=1)\n",
-    "    compare_ints.columns = ['before', 'after']\n",
-    "    compare_ints.apply(pd.Series.value_counts)\n",
-    "    print(compare_ints)\n",
-    "    return converted_int"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "id": "42a511ca",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "8.97 MB\n",
-      "3.36 MB\n",
-      "        before   after\n",
-      "id       int64  uint32\n",
-      "area_id  int64  uint16\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_int = opt_int(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "id": "fd5190ad",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 6. Провести понижающее преобразование для столбцов типов «float» колонок\n",
-    "def opt_float(df):\n",
-    "    dataset_float = df.select_dtypes(include=['float'])\n",
-    "    converted_float = dataset_float.apply(pd.to_numeric, downcast='float')\n",
-    "    print(mem_usage(dataset_float))\n",
-    "    print(mem_usage(converted_float))\n",
-    "    compare_float = pd.concat([dataset_float.dtypes, converted_float.dtypes], axis=1)\n",
-    "    compare_float.columns = ['before', 'after']\n",
-    "    compare_float.apply(pd.Series.value_counts)\n",
-    "    print(compare_float)\n",
-    "    return converted_float"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "id": "0ddd3859",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "26.90 MB\n",
-      "13.45 MB\n",
-      "                      before    after\n",
-      "employer_id          float64  float32\n",
-      "salary_from          float64  float32\n",
-      "salary_to            float64  float32\n",
-      "address_description  float64  float32\n",
-      "address_lat          float64  float32\n",
-      "address_lng          float64  float32\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_float = opt_float(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "id": "3e5c1ee5",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "6398.37 MB\n",
-      "4600.76 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# 7. Повторно провести анализ набора данных, как в п. 2, сравнив показатели занимаемой памяти\n",
-    "# Создаем копию исходного датафрейма\n",
-    "optimized_dataset = dataset.copy()\n",
-    "\n",
-    "# заменяем исходные числовые столбцы оптмизированными\n",
-    "optimized_dataset[converted_obj.columns] = converted_obj\n",
-    "optimized_dataset[converted_int.columns] = converted_int\n",
-    "optimized_dataset[converted_float.columns] = converted_float\n",
-    "\n",
-    "print(mem_usage(dataset))\n",
-    "print(mem_usage(optimized_dataset))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "id": "c02dc82e",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 8. Выбрать произвольно 10 колонок для дальнейшем работы, \n",
-    "#    прописав преобразование типов и загрузку только нужных данных на этапе чтения файла. \n",
-    "#    При этом стоит использовать чанки. Сохраните полученный поднабор в отдельном файле."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "id": "428e18a8",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "id:uint32\n",
-      "salary_from:float32\n",
-      "salary_to:float32\n",
-      "address_description:float32\n",
-      "address_lat:float32\n",
-      "address_lng:float32\n",
-      "description:object\n",
-      "schedule_name:category\n",
-      "experience_name:category\n",
-      "billing_type_name:category\n",
-      "375.38 MB\n",
-      "374.23 MB\n",
-      "374.44 MB\n",
-      "372.92 MB\n",
-      "373.29 MB\n",
-      "327.90 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "need_column = dict()\n",
-    "column_names = [\"id\", \"salary_from\", \"salary_to\", \"address_description\",\n",
-    "                \"address_lat\", \"address_lng\", \"description\", \"schedule_name\", \"experience_name\", \"billing_type_name\"]\n",
-    "\n",
-    "opt_dtypes = optimized_dataset.dtypes\n",
-    "\n",
-    "for key in column_names:\n",
-    "    need_column[key] = opt_dtypes[key]\n",
-    "    print(f\"{key}:{opt_dtypes[key]}\")\n",
-    "\n",
-    "with open(\"dtypes_4.json\", mode=\"w\") as file:\n",
-    "    dtype_json = need_column.copy()\n",
-    "    for key in dtype_json.keys():\n",
-    "        dtype_json[key] = str(dtype_json[key])\n",
-    "    json.dump(dtype_json, file)\n",
-    "    \n",
-    "# Работа с чанкам\n",
-    "has_header = True\n",
-    "for chunk in pd.read_csv(file_name,\n",
-    "                         usecols=lambda x: x in column_names,\n",
-    "                         dtype=need_column,\n",
-    "                         #parse_dates=['date'],\n",
-    "                         #infer_datetime_format=True,\n",
-    "                         chunksize=100_000):\n",
-    "    # любые преобразования\n",
-    "    print(mem_usage(chunk))\n",
-    "    chunk.to_csv('df_4.csv', mode='a', header=has_header)\n",
-    "    has_header = False"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 18,
-   "id": "05e03b0d",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "<class 'pandas.core.frame.DataFrame'>\n",
-      "RangeIndex: 587637 entries, 0 to 587636\n",
-      "Data columns (total 10 columns):\n",
-      " #   Column               Non-Null Count   Dtype   \n",
-      "---  ------               --------------   -----   \n",
-      " 0   id                   587637 non-null  uint32  \n",
-      " 1   description          587637 non-null  object  \n",
-      " 2   schedule_name        587637 non-null  category\n",
-      " 3   experience_name      587637 non-null  category\n",
-      " 4   billing_type_name    587637 non-null  category\n",
-      " 5   salary_from          258741 non-null  float32 \n",
-      " 6   salary_to            164509 non-null  float32 \n",
-      " 7   address_description  0 non-null       float32 \n",
-      " 8   address_lat          278728 non-null  float32 \n",
-      " 9   address_lng          278728 non-null  float32 \n",
-      "dtypes: category(3), float32(5), object(1), uint32(1)\n",
-      "memory usage: 2.1 GB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# сохраняем информацию о типах, коорые нам нужны. Необходимо для графиков.\n",
-    "def read_types(file_name):\n",
-    "    dtypes = {}\n",
-    "    with open(file_name, mode='r') as file:\n",
-    "        dtypes = json.load(file)\n",
-    "    for key in dtypes.keys():\n",
-    "        if dtypes[key] == 'category':\n",
-    "            dtypes[key] = pd.CategoricalDtype\n",
-    "        else:\n",
-    "            dtypes[key] = np.dtype(dtypes[key])\n",
-    "    return dtypes\n",
-    "\n",
-    "need_dtypes = read_types(\"dtypes_4.json\")\n",
-    "\n",
-    "dataset = pd.read_csv(\"df_4.csv\",\n",
-    "                  usecols=lambda x: x in need_dtypes.keys(),\n",
-    "                  dtype=need_column)\n",
-    "                  #parse_dates=['date'])\n",
-    "dataset.info(memory_usage='deep')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 21,
-   "id": "b9594ce9",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График столбчатой диаграммы\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.countplot(x='schedule_name', data=dataset)\n",
-    "plt.xlabel('График занятости')\n",
-    "plt.ylabel('Количество людей')\n",
-    "plt.title('Количество людей по грфику занятости')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 22,
-   "id": "adfac75e",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График круговой диаграммы\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "dataset['billing_type_name'].value_counts().plot(kind='pie', autopct='%1.1f%%')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 24,
-   "id": "92da221a",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Линейный график\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.lineplot(x='salary_from', y='salary_to', data=dataset)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 26,
-   "id": "bc5c185b",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Гистограмма для распределения продолжительности запланированного времени\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.histplot(dataset['address_lat'], bins=20)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 27,
-   "id": "29b5e759",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 2 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Корреляционная матрица для связи различных числовых переменных\n",
-    "numerical_vars = ['id', 'salary_from', 'salary_to']\n",
-    "correlation_matrix = dataset[numerical_vars].corr()\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
-    "plt.title('Корреляционная матрица')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "1e7b586a",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.9.7"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
Index: Задача 5.ipynb
===================================================================
diff --git a/Задача 5.ipynb b/Задача 5.ipynb
deleted file mode 100644
--- a/Задача 5.ipynb	
+++ /dev/null	
@@ -1,1327 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "0ce40138",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import numpy as np\n",
-    "import os\n",
-    "import seaborn as sns"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "2f13d169",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "pd.set_option(\"display.max_rows\", 20, \"display.max_columns\", 60)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "db6c1bd8",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def read_file(file_name):\n",
-    "    return pd.read_csv(file_name)\n",
-    "    # для заархивированных файлов\n",
-    "    # df = pd.read_csv(dataset[year], chunksize=chanksize, compression='gzip')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "d24871de",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_12708/2624838877.py:2: DtypeWarning: Columns (3,4,5) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  read_file(file_name)\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>id</th>\n",
-       "      <th>spkid</th>\n",
-       "      <th>full_name</th>\n",
-       "      <th>pdes</th>\n",
-       "      <th>name</th>\n",
-       "      <th>prefix</th>\n",
-       "      <th>neo</th>\n",
-       "      <th>pha</th>\n",
-       "      <th>H</th>\n",
-       "      <th>diameter</th>\n",
-       "      <th>albedo</th>\n",
-       "      <th>diameter_sigma</th>\n",
-       "      <th>orbit_id</th>\n",
-       "      <th>epoch</th>\n",
-       "      <th>epoch_mjd</th>\n",
-       "      <th>epoch_cal</th>\n",
-       "      <th>equinox</th>\n",
-       "      <th>e</th>\n",
-       "      <th>a</th>\n",
-       "      <th>q</th>\n",
-       "      <th>i</th>\n",
-       "      <th>om</th>\n",
-       "      <th>w</th>\n",
-       "      <th>ma</th>\n",
-       "      <th>ad</th>\n",
-       "      <th>n</th>\n",
-       "      <th>tp</th>\n",
-       "      <th>tp_cal</th>\n",
-       "      <th>per</th>\n",
-       "      <th>per_y</th>\n",
-       "      <th>moid</th>\n",
-       "      <th>moid_ld</th>\n",
-       "      <th>sigma_e</th>\n",
-       "      <th>sigma_a</th>\n",
-       "      <th>sigma_q</th>\n",
-       "      <th>sigma_i</th>\n",
-       "      <th>sigma_om</th>\n",
-       "      <th>sigma_w</th>\n",
-       "      <th>sigma_ma</th>\n",
-       "      <th>sigma_ad</th>\n",
-       "      <th>sigma_n</th>\n",
-       "      <th>sigma_tp</th>\n",
-       "      <th>sigma_per</th>\n",
-       "      <th>class</th>\n",
-       "      <th>rms</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>a0000001</td>\n",
-       "      <td>2000001</td>\n",
-       "      <td>1 Ceres</td>\n",
-       "      <td>1</td>\n",
-       "      <td>Ceres</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>3.400</td>\n",
-       "      <td>939.400</td>\n",
-       "      <td>0.0900</td>\n",
-       "      <td>0.200</td>\n",
-       "      <td>JPL 47</td>\n",
-       "      <td>2458600.5</td>\n",
-       "      <td>58600</td>\n",
-       "      <td>20190427.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.076009</td>\n",
-       "      <td>2.769165</td>\n",
-       "      <td>2.558684</td>\n",
-       "      <td>10.594067</td>\n",
-       "      <td>80.305531</td>\n",
-       "      <td>73.597695</td>\n",
-       "      <td>77.372098</td>\n",
-       "      <td>2.979647</td>\n",
-       "      <td>0.213885</td>\n",
-       "      <td>2.458239e+06</td>\n",
-       "      <td>2.018043e+07</td>\n",
-       "      <td>1683.145703</td>\n",
-       "      <td>4.608202</td>\n",
-       "      <td>1.594780</td>\n",
-       "      <td>620.640533</td>\n",
-       "      <td>4.819000e-12</td>\n",
-       "      <td>1.032800e-11</td>\n",
-       "      <td>1.956900e-11</td>\n",
-       "      <td>4.608900e-09</td>\n",
-       "      <td>6.168800e-08</td>\n",
-       "      <td>6.624800e-08</td>\n",
-       "      <td>7.820700e-09</td>\n",
-       "      <td>1.111300e-11</td>\n",
-       "      <td>1.196500e-12</td>\n",
-       "      <td>3.782900e-08</td>\n",
-       "      <td>9.415900e-09</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.43301</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>a0000002</td>\n",
-       "      <td>2000002</td>\n",
-       "      <td>2 Pallas</td>\n",
-       "      <td>2</td>\n",
-       "      <td>Pallas</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>4.200</td>\n",
-       "      <td>545.000</td>\n",
-       "      <td>0.1010</td>\n",
-       "      <td>18.000</td>\n",
-       "      <td>JPL 37</td>\n",
-       "      <td>2459000.5</td>\n",
-       "      <td>59000</td>\n",
-       "      <td>20200531.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.229972</td>\n",
-       "      <td>2.773841</td>\n",
-       "      <td>2.135935</td>\n",
-       "      <td>34.832932</td>\n",
-       "      <td>173.024741</td>\n",
-       "      <td>310.202392</td>\n",
-       "      <td>144.975675</td>\n",
-       "      <td>3.411748</td>\n",
-       "      <td>0.213345</td>\n",
-       "      <td>2.458321e+06</td>\n",
-       "      <td>2.018072e+07</td>\n",
-       "      <td>1687.410992</td>\n",
-       "      <td>4.619880</td>\n",
-       "      <td>1.234290</td>\n",
-       "      <td>480.348639</td>\n",
-       "      <td>3.193400e-08</td>\n",
-       "      <td>4.033700e-09</td>\n",
-       "      <td>8.832200e-08</td>\n",
-       "      <td>3.469400e-06</td>\n",
-       "      <td>6.272400e-06</td>\n",
-       "      <td>9.128200e-06</td>\n",
-       "      <td>8.859100e-06</td>\n",
-       "      <td>4.961300e-09</td>\n",
-       "      <td>4.653600e-10</td>\n",
-       "      <td>4.078700e-05</td>\n",
-       "      <td>3.680700e-06</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.35936</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>a0000003</td>\n",
-       "      <td>2000003</td>\n",
-       "      <td>3 Juno</td>\n",
-       "      <td>3</td>\n",
-       "      <td>Juno</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>5.330</td>\n",
-       "      <td>246.596</td>\n",
-       "      <td>0.2140</td>\n",
-       "      <td>10.594</td>\n",
-       "      <td>JPL 112</td>\n",
-       "      <td>2459000.5</td>\n",
-       "      <td>59000</td>\n",
-       "      <td>20200531.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.256936</td>\n",
-       "      <td>2.668285</td>\n",
-       "      <td>1.982706</td>\n",
-       "      <td>12.991043</td>\n",
-       "      <td>169.851482</td>\n",
-       "      <td>248.066193</td>\n",
-       "      <td>125.435355</td>\n",
-       "      <td>3.353865</td>\n",
-       "      <td>0.226129</td>\n",
-       "      <td>2.458446e+06</td>\n",
-       "      <td>2.018112e+07</td>\n",
-       "      <td>1592.013769</td>\n",
-       "      <td>4.358696</td>\n",
-       "      <td>1.034290</td>\n",
-       "      <td>402.514639</td>\n",
-       "      <td>3.052000e-08</td>\n",
-       "      <td>3.471800e-09</td>\n",
-       "      <td>8.139200e-08</td>\n",
-       "      <td>3.223100e-06</td>\n",
-       "      <td>1.664600e-05</td>\n",
-       "      <td>1.772100e-05</td>\n",
-       "      <td>8.110400e-06</td>\n",
-       "      <td>4.363900e-09</td>\n",
-       "      <td>4.413400e-10</td>\n",
-       "      <td>3.528800e-05</td>\n",
-       "      <td>3.107200e-06</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.33848</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>a0000004</td>\n",
-       "      <td>2000004</td>\n",
-       "      <td>4 Vesta</td>\n",
-       "      <td>4</td>\n",
-       "      <td>Vesta</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>3.000</td>\n",
-       "      <td>525.400</td>\n",
-       "      <td>0.4228</td>\n",
-       "      <td>0.200</td>\n",
-       "      <td>JPL 35</td>\n",
-       "      <td>2458600.5</td>\n",
-       "      <td>58600</td>\n",
-       "      <td>20190427.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.088721</td>\n",
-       "      <td>2.361418</td>\n",
-       "      <td>2.151909</td>\n",
-       "      <td>7.141771</td>\n",
-       "      <td>103.810804</td>\n",
-       "      <td>150.728541</td>\n",
-       "      <td>95.861938</td>\n",
-       "      <td>2.570926</td>\n",
-       "      <td>0.271609</td>\n",
-       "      <td>2.458248e+06</td>\n",
-       "      <td>2.018051e+07</td>\n",
-       "      <td>1325.432763</td>\n",
-       "      <td>3.628837</td>\n",
-       "      <td>1.139480</td>\n",
-       "      <td>443.451432</td>\n",
-       "      <td>2.332100e-10</td>\n",
-       "      <td>1.514300e-09</td>\n",
-       "      <td>1.928600e-09</td>\n",
-       "      <td>2.170600e-07</td>\n",
-       "      <td>3.880800e-07</td>\n",
-       "      <td>1.789300e-07</td>\n",
-       "      <td>1.206800e-06</td>\n",
-       "      <td>1.648600e-09</td>\n",
-       "      <td>2.612500e-10</td>\n",
-       "      <td>4.103700e-06</td>\n",
-       "      <td>1.274900e-06</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.39980</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>a0000005</td>\n",
-       "      <td>2000005</td>\n",
-       "      <td>5 Astraea</td>\n",
-       "      <td>5</td>\n",
-       "      <td>Astraea</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>6.900</td>\n",
-       "      <td>106.699</td>\n",
-       "      <td>0.2740</td>\n",
-       "      <td>3.140</td>\n",
-       "      <td>JPL 114</td>\n",
-       "      <td>2459000.5</td>\n",
-       "      <td>59000</td>\n",
-       "      <td>20200531.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.190913</td>\n",
-       "      <td>2.574037</td>\n",
-       "      <td>2.082619</td>\n",
-       "      <td>5.367427</td>\n",
-       "      <td>141.571026</td>\n",
-       "      <td>358.648418</td>\n",
-       "      <td>17.846343</td>\n",
-       "      <td>3.065455</td>\n",
-       "      <td>0.238661</td>\n",
-       "      <td>2.458926e+06</td>\n",
-       "      <td>2.020032e+07</td>\n",
-       "      <td>1508.414421</td>\n",
-       "      <td>4.129814</td>\n",
-       "      <td>1.095750</td>\n",
-       "      <td>426.433027</td>\n",
-       "      <td>2.373700e-08</td>\n",
-       "      <td>3.970900e-09</td>\n",
-       "      <td>6.092400e-08</td>\n",
-       "      <td>2.740800e-06</td>\n",
-       "      <td>2.894900e-05</td>\n",
-       "      <td>2.984200e-05</td>\n",
-       "      <td>8.303800e-06</td>\n",
-       "      <td>4.729000e-09</td>\n",
-       "      <td>5.522700e-10</td>\n",
-       "      <td>3.474300e-05</td>\n",
-       "      <td>3.490500e-06</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.52191</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>958519</th>\n",
-       "      <td>bPLS6013</td>\n",
-       "      <td>3246801</td>\n",
-       "      <td>(6013 P-L)</td>\n",
-       "      <td>6013 P-L</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>17.135</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>JPL 5</td>\n",
-       "      <td>2437203.5</td>\n",
-       "      <td>37203</td>\n",
-       "      <td>19600926.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.185919</td>\n",
-       "      <td>2.280861</td>\n",
-       "      <td>1.856807</td>\n",
-       "      <td>5.984416</td>\n",
-       "      <td>194.229902</td>\n",
-       "      <td>195.442802</td>\n",
-       "      <td>342.057565</td>\n",
-       "      <td>2.704916</td>\n",
-       "      <td>0.286125</td>\n",
-       "      <td>2.437266e+06</td>\n",
-       "      <td>1.960113e+07</td>\n",
-       "      <td>1258.191614</td>\n",
-       "      <td>3.444741</td>\n",
-       "      <td>0.861979</td>\n",
-       "      <td>335.456367</td>\n",
-       "      <td>2.142200e-02</td>\n",
-       "      <td>8.779900e-01</td>\n",
-       "      <td>7.299800e-01</td>\n",
-       "      <td>6.969000e+00</td>\n",
-       "      <td>7.433000e+00</td>\n",
-       "      <td>4.631100e+01</td>\n",
-       "      <td>2.738300e+01</td>\n",
-       "      <td>1.041200e+00</td>\n",
-       "      <td>1.652100e-01</td>\n",
-       "      <td>1.309700e+02</td>\n",
-       "      <td>7.264900e+02</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.23839</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>958520</th>\n",
-       "      <td>bPLS6331</td>\n",
-       "      <td>3246834</td>\n",
-       "      <td>(6331 P-L)</td>\n",
-       "      <td>6331 P-L</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>18.500</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>8</td>\n",
-       "      <td>2459000.5</td>\n",
-       "      <td>59000</td>\n",
-       "      <td>20200531.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.282920</td>\n",
-       "      <td>2.334910</td>\n",
-       "      <td>1.674319</td>\n",
-       "      <td>8.082280</td>\n",
-       "      <td>355.248239</td>\n",
-       "      <td>5.216223</td>\n",
-       "      <td>260.113042</td>\n",
-       "      <td>2.995502</td>\n",
-       "      <td>0.276248</td>\n",
-       "      <td>2.459362e+06</td>\n",
-       "      <td>2.021053e+07</td>\n",
-       "      <td>1303.177916</td>\n",
-       "      <td>3.567907</td>\n",
-       "      <td>0.671242</td>\n",
-       "      <td>261.227249</td>\n",
-       "      <td>2.642000e-07</td>\n",
-       "      <td>1.885500e-08</td>\n",
-       "      <td>6.256300e-07</td>\n",
-       "      <td>1.563500e-05</td>\n",
-       "      <td>5.598600e-05</td>\n",
-       "      <td>2.380400e-04</td>\n",
-       "      <td>1.298200e-04</td>\n",
-       "      <td>2.418900e-08</td>\n",
-       "      <td>3.346100e-09</td>\n",
-       "      <td>4.690200e-04</td>\n",
-       "      <td>1.578500e-05</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.53633</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>958521</th>\n",
-       "      <td>bPLS6344</td>\n",
-       "      <td>3013075</td>\n",
-       "      <td>(6344 P-L)</td>\n",
-       "      <td>6344 P-L</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "      <td>Y</td>\n",
-       "      <td>20.400</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>17</td>\n",
-       "      <td>2459000.5</td>\n",
-       "      <td>59000</td>\n",
-       "      <td>20200531.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.662446</td>\n",
-       "      <td>2.817152</td>\n",
-       "      <td>0.950941</td>\n",
-       "      <td>4.679278</td>\n",
-       "      <td>182.982832</td>\n",
-       "      <td>234.894852</td>\n",
-       "      <td>240.473601</td>\n",
-       "      <td>4.683363</td>\n",
-       "      <td>0.208444</td>\n",
-       "      <td>2.459574e+06</td>\n",
-       "      <td>2.021123e+07</td>\n",
-       "      <td>1727.085364</td>\n",
-       "      <td>4.728502</td>\n",
-       "      <td>0.035589</td>\n",
-       "      <td>13.850093</td>\n",
-       "      <td>6.636800e-08</td>\n",
-       "      <td>9.925600e-08</td>\n",
-       "      <td>1.687100e-07</td>\n",
-       "      <td>1.853300e-05</td>\n",
-       "      <td>5.691700e-05</td>\n",
-       "      <td>8.969200e-05</td>\n",
-       "      <td>5.272600e-05</td>\n",
-       "      <td>1.650100e-07</td>\n",
-       "      <td>1.101600e-08</td>\n",
-       "      <td>2.830600e-04</td>\n",
-       "      <td>9.127500e-05</td>\n",
-       "      <td>APO</td>\n",
-       "      <td>0.51556</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>958522</th>\n",
-       "      <td>bT2S2060</td>\n",
-       "      <td>3246457</td>\n",
-       "      <td>(2060 T-2)</td>\n",
-       "      <td>2060 T-2</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>18.071</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>JPL 3</td>\n",
-       "      <td>2441956.5</td>\n",
-       "      <td>41956</td>\n",
-       "      <td>19731001.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.202053</td>\n",
-       "      <td>2.373137</td>\n",
-       "      <td>1.893638</td>\n",
-       "      <td>0.732484</td>\n",
-       "      <td>176.499082</td>\n",
-       "      <td>198.026527</td>\n",
-       "      <td>355.351127</td>\n",
-       "      <td>2.852636</td>\n",
-       "      <td>0.269600</td>\n",
-       "      <td>2.441974e+06</td>\n",
-       "      <td>1.973102e+07</td>\n",
-       "      <td>1335.311579</td>\n",
-       "      <td>3.655884</td>\n",
-       "      <td>0.893896</td>\n",
-       "      <td>347.877506</td>\n",
-       "      <td>3.169800e-02</td>\n",
-       "      <td>5.966200e-01</td>\n",
-       "      <td>5.478400e-01</td>\n",
-       "      <td>5.448800e-01</td>\n",
-       "      <td>4.391600e+00</td>\n",
-       "      <td>1.898800e+01</td>\n",
-       "      <td>1.083800e+01</td>\n",
-       "      <td>7.171600e-01</td>\n",
-       "      <td>1.016700e-01</td>\n",
-       "      <td>3.898400e+01</td>\n",
-       "      <td>5.035500e+02</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.25641</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>958523</th>\n",
-       "      <td>bT3S2678</td>\n",
-       "      <td>3246553</td>\n",
-       "      <td>(2678 T-3)</td>\n",
-       "      <td>2678 T-3</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>N</td>\n",
-       "      <td>N</td>\n",
-       "      <td>18.060</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>JPL 3</td>\n",
-       "      <td>2443429.5</td>\n",
-       "      <td>43429</td>\n",
-       "      <td>19771013.0</td>\n",
-       "      <td>J2000</td>\n",
-       "      <td>0.258348</td>\n",
-       "      <td>2.260404</td>\n",
-       "      <td>1.676433</td>\n",
-       "      <td>9.661947</td>\n",
-       "      <td>204.512448</td>\n",
-       "      <td>148.496988</td>\n",
-       "      <td>15.320134</td>\n",
-       "      <td>2.844376</td>\n",
-       "      <td>0.290018</td>\n",
-       "      <td>2.443377e+06</td>\n",
-       "      <td>1.977082e+07</td>\n",
-       "      <td>1241.302609</td>\n",
-       "      <td>3.398501</td>\n",
-       "      <td>0.680220</td>\n",
-       "      <td>264.721217</td>\n",
-       "      <td>1.486800e-02</td>\n",
-       "      <td>1.292700e-01</td>\n",
-       "      <td>6.252600e-02</td>\n",
-       "      <td>1.102300e+00</td>\n",
-       "      <td>3.117000e-01</td>\n",
-       "      <td>1.284300e+00</td>\n",
-       "      <td>4.736100e-01</td>\n",
-       "      <td>1.626700e-01</td>\n",
-       "      <td>2.487900e-02</td>\n",
-       "      <td>5.523600e+00</td>\n",
-       "      <td>1.064800e+02</td>\n",
-       "      <td>MBA</td>\n",
-       "      <td>0.26980</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>958524 rows × 45 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "              id    spkid          full_name      pdes     name prefix neo  \\\n",
-       "0       a0000001  2000001            1 Ceres         1    Ceres    NaN   N   \n",
-       "1       a0000002  2000002           2 Pallas         2   Pallas    NaN   N   \n",
-       "2       a0000003  2000003             3 Juno         3     Juno    NaN   N   \n",
-       "3       a0000004  2000004            4 Vesta         4    Vesta    NaN   N   \n",
-       "4       a0000005  2000005          5 Astraea         5  Astraea    NaN   N   \n",
-       "...          ...      ...                ...       ...      ...    ...  ..   \n",
-       "958519  bPLS6013  3246801         (6013 P-L)  6013 P-L      NaN    NaN   N   \n",
-       "958520  bPLS6331  3246834         (6331 P-L)  6331 P-L      NaN    NaN   N   \n",
-       "958521  bPLS6344  3013075         (6344 P-L)  6344 P-L      NaN    NaN   Y   \n",
-       "958522  bT2S2060  3246457         (2060 T-2)  2060 T-2      NaN    NaN   N   \n",
-       "958523  bT3S2678  3246553         (2678 T-3)  2678 T-3      NaN    NaN   N   \n",
-       "\n",
-       "       pha       H  diameter  albedo  diameter_sigma orbit_id      epoch  \\\n",
-       "0        N   3.400   939.400  0.0900           0.200   JPL 47  2458600.5   \n",
-       "1        N   4.200   545.000  0.1010          18.000   JPL 37  2459000.5   \n",
-       "2        N   5.330   246.596  0.2140          10.594  JPL 112  2459000.5   \n",
-       "3        N   3.000   525.400  0.4228           0.200   JPL 35  2458600.5   \n",
-       "4        N   6.900   106.699  0.2740           3.140  JPL 114  2459000.5   \n",
-       "...     ..     ...       ...     ...             ...      ...        ...   \n",
-       "958519   N  17.135       NaN     NaN             NaN    JPL 5  2437203.5   \n",
-       "958520   N  18.500       NaN     NaN             NaN        8  2459000.5   \n",
-       "958521   Y  20.400       NaN     NaN             NaN       17  2459000.5   \n",
-       "958522   N  18.071       NaN     NaN             NaN    JPL 3  2441956.5   \n",
-       "958523   N  18.060       NaN     NaN             NaN    JPL 3  2443429.5   \n",
-       "\n",
-       "        epoch_mjd   epoch_cal equinox         e         a         q  \\\n",
-       "0           58600  20190427.0   J2000  0.076009  2.769165  2.558684   \n",
-       "1           59000  20200531.0   J2000  0.229972  2.773841  2.135935   \n",
-       "2           59000  20200531.0   J2000  0.256936  2.668285  1.982706   \n",
-       "3           58600  20190427.0   J2000  0.088721  2.361418  2.151909   \n",
-       "4           59000  20200531.0   J2000  0.190913  2.574037  2.082619   \n",
-       "...           ...         ...     ...       ...       ...       ...   \n",
-       "958519      37203  19600926.0   J2000  0.185919  2.280861  1.856807   \n",
-       "958520      59000  20200531.0   J2000  0.282920  2.334910  1.674319   \n",
-       "958521      59000  20200531.0   J2000  0.662446  2.817152  0.950941   \n",
-       "958522      41956  19731001.0   J2000  0.202053  2.373137  1.893638   \n",
-       "958523      43429  19771013.0   J2000  0.258348  2.260404  1.676433   \n",
-       "\n",
-       "                i          om           w          ma        ad         n  \\\n",
-       "0       10.594067   80.305531   73.597695   77.372098  2.979647  0.213885   \n",
-       "1       34.832932  173.024741  310.202392  144.975675  3.411748  0.213345   \n",
-       "2       12.991043  169.851482  248.066193  125.435355  3.353865  0.226129   \n",
-       "3        7.141771  103.810804  150.728541   95.861938  2.570926  0.271609   \n",
-       "4        5.367427  141.571026  358.648418   17.846343  3.065455  0.238661   \n",
-       "...           ...         ...         ...         ...       ...       ...   \n",
-       "958519   5.984416  194.229902  195.442802  342.057565  2.704916  0.286125   \n",
-       "958520   8.082280  355.248239    5.216223  260.113042  2.995502  0.276248   \n",
-       "958521   4.679278  182.982832  234.894852  240.473601  4.683363  0.208444   \n",
-       "958522   0.732484  176.499082  198.026527  355.351127  2.852636  0.269600   \n",
-       "958523   9.661947  204.512448  148.496988   15.320134  2.844376  0.290018   \n",
-       "\n",
-       "                  tp        tp_cal          per     per_y      moid  \\\n",
-       "0       2.458239e+06  2.018043e+07  1683.145703  4.608202  1.594780   \n",
-       "1       2.458321e+06  2.018072e+07  1687.410992  4.619880  1.234290   \n",
-       "2       2.458446e+06  2.018112e+07  1592.013769  4.358696  1.034290   \n",
-       "3       2.458248e+06  2.018051e+07  1325.432763  3.628837  1.139480   \n",
-       "4       2.458926e+06  2.020032e+07  1508.414421  4.129814  1.095750   \n",
-       "...              ...           ...          ...       ...       ...   \n",
-       "958519  2.437266e+06  1.960113e+07  1258.191614  3.444741  0.861979   \n",
-       "958520  2.459362e+06  2.021053e+07  1303.177916  3.567907  0.671242   \n",
-       "958521  2.459574e+06  2.021123e+07  1727.085364  4.728502  0.035589   \n",
-       "958522  2.441974e+06  1.973102e+07  1335.311579  3.655884  0.893896   \n",
-       "958523  2.443377e+06  1.977082e+07  1241.302609  3.398501  0.680220   \n",
-       "\n",
-       "           moid_ld       sigma_e       sigma_a       sigma_q       sigma_i  \\\n",
-       "0       620.640533  4.819000e-12  1.032800e-11  1.956900e-11  4.608900e-09   \n",
-       "1       480.348639  3.193400e-08  4.033700e-09  8.832200e-08  3.469400e-06   \n",
-       "2       402.514639  3.052000e-08  3.471800e-09  8.139200e-08  3.223100e-06   \n",
-       "3       443.451432  2.332100e-10  1.514300e-09  1.928600e-09  2.170600e-07   \n",
-       "4       426.433027  2.373700e-08  3.970900e-09  6.092400e-08  2.740800e-06   \n",
-       "...            ...           ...           ...           ...           ...   \n",
-       "958519  335.456367  2.142200e-02  8.779900e-01  7.299800e-01  6.969000e+00   \n",
-       "958520  261.227249  2.642000e-07  1.885500e-08  6.256300e-07  1.563500e-05   \n",
-       "958521   13.850093  6.636800e-08  9.925600e-08  1.687100e-07  1.853300e-05   \n",
-       "958522  347.877506  3.169800e-02  5.966200e-01  5.478400e-01  5.448800e-01   \n",
-       "958523  264.721217  1.486800e-02  1.292700e-01  6.252600e-02  1.102300e+00   \n",
-       "\n",
-       "            sigma_om       sigma_w      sigma_ma      sigma_ad       sigma_n  \\\n",
-       "0       6.168800e-08  6.624800e-08  7.820700e-09  1.111300e-11  1.196500e-12   \n",
-       "1       6.272400e-06  9.128200e-06  8.859100e-06  4.961300e-09  4.653600e-10   \n",
-       "2       1.664600e-05  1.772100e-05  8.110400e-06  4.363900e-09  4.413400e-10   \n",
-       "3       3.880800e-07  1.789300e-07  1.206800e-06  1.648600e-09  2.612500e-10   \n",
-       "4       2.894900e-05  2.984200e-05  8.303800e-06  4.729000e-09  5.522700e-10   \n",
-       "...              ...           ...           ...           ...           ...   \n",
-       "958519  7.433000e+00  4.631100e+01  2.738300e+01  1.041200e+00  1.652100e-01   \n",
-       "958520  5.598600e-05  2.380400e-04  1.298200e-04  2.418900e-08  3.346100e-09   \n",
-       "958521  5.691700e-05  8.969200e-05  5.272600e-05  1.650100e-07  1.101600e-08   \n",
-       "958522  4.391600e+00  1.898800e+01  1.083800e+01  7.171600e-01  1.016700e-01   \n",
-       "958523  3.117000e-01  1.284300e+00  4.736100e-01  1.626700e-01  2.487900e-02   \n",
-       "\n",
-       "            sigma_tp     sigma_per class      rms  \n",
-       "0       3.782900e-08  9.415900e-09   MBA  0.43301  \n",
-       "1       4.078700e-05  3.680700e-06   MBA  0.35936  \n",
-       "2       3.528800e-05  3.107200e-06   MBA  0.33848  \n",
-       "3       4.103700e-06  1.274900e-06   MBA  0.39980  \n",
-       "4       3.474300e-05  3.490500e-06   MBA  0.52191  \n",
-       "...              ...           ...   ...      ...  \n",
-       "958519  1.309700e+02  7.264900e+02   MBA  0.23839  \n",
-       "958520  4.690200e-04  1.578500e-05   MBA  0.53633  \n",
-       "958521  2.830600e-04  9.127500e-05   APO  0.51556  \n",
-       "958522  3.898400e+01  5.035500e+02   MBA  0.25641  \n",
-       "958523  5.523600e+00  1.064800e+02   MBA  0.26980  \n",
-       "\n",
-       "[958524 rows x 45 columns]"
-      ]
-     },
-     "execution_count": 4,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[5]asteroid.zip\"\n",
-    "read_file(file_name)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "677ad1b9",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_memory_stat_by_column(df, output_file):\n",
-    "    # вывод пар: колонка - тип данных\n",
-    "    memory_usage_stat = df.memory_usage(deep=True)\n",
-    "    # суммарный размер\n",
-    "    total_memory_usage = memory_usage_stat.sum()\n",
-    "    result = {\n",
-    "        \"file_in_memory_size\": f\"{int(total_memory_usage // 1024):10} KB\",\n",
-    "        \"columns\": []\n",
-    "    }\n",
-    "    # проходимся по колонкам, записываем в список\n",
-    "    for key in df.dtypes.keys():\n",
-    "        result[\"columns\"].append({\n",
-    "            \"column_name\": key,\n",
-    "            \"memory_abs\": int(memory_usage_stat[key] // 1024),\n",
-    "            \"memory_per\": round(memory_usage_stat[key] / total_memory_usage * 100, 4),\n",
-    "            \"dtype\": str(df.dtypes[key])\n",
-    "        })\n",
-    "    # отсортируем колонки\n",
-    "    result[\"columns\"].sort(key=lambda x: x['memory_abs'], reverse=True)\n",
-    "    # Запись в файл JSON\n",
-    "    with open(output_file, 'w') as file:\n",
-    "        json.dump(result, file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "id": "9194376e",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_12708/4227185738.py:2: DtypeWarning: Columns (3,4,5) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  dataset = read_file(file_name)\n"
-     ]
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[5]asteroid.zip\"\n",
-    "dataset = read_file(file_name)\n",
-    "output_file = \"результаты_5.json\"\n",
-    "get_memory_stat_by_column(dataset, output_file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "id": "e1469615",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Считает объем памяти до и после преобразований\n",
-    "def mem_usage(pandas_obj):\n",
-    "    if isinstance(pandas_obj, pd.DataFrame):\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True).sum()\n",
-    "    else: # предположим, что если это не дадафрейм, то серия\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True)\n",
-    "    usage_mb = usage_b / 1024 ** 2 # преобразуем быйты в мегабайты\n",
-    "    return \"{:03.2f} MB\".format(usage_mb)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "id": "4be4a3e7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 4. Преобразовать все колонки с типом данных «object» в категориальные, \n",
-    "#    если количество уникальных значений колонки составляет менее 50%."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "id": "4463d7a7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def opt_obj(df):\n",
-    "    converted_obj = pd.DataFrame()\n",
-    "    dataset_obj = df.select_dtypes(include=['object']).copy()\n",
-    "    for col in dataset_obj.columns:\n",
-    "        num_unique_values = len(dataset_obj[col].unique())\n",
-    "        num_total_values = len(dataset_obj[col])\n",
-    "        if num_unique_values / num_total_values < 0.5:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col].astype('category')\n",
-    "        else:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col]\n",
-    "    print(mem_usage(dataset_obj))\n",
-    "    print(mem_usage(converted_obj))\n",
-    "    return converted_obj    "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "id": "2b0ee9bc",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "505.30 MB\n",
-      "183.90 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_obj = opt_obj(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "id": "9558be52",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 5.Провести понижающее преобразование для столбцов типов «int» колонок\n",
-    "def opt_int(df):\n",
-    "    dataset_int = df.select_dtypes(include=['int']) # выбираем колонки типа int\n",
-    "    \"\"\"\n",
-    "    downcast:\n",
-    "            - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n",
-    "            - 'unsigned': smallest unsigned int dtype (min.: np.int8)\n",
-    "            - 'float': smallest float dtype (min.: np.float32)\n",
-    "    \"\"\"\n",
-    "    converted_int = dataset_int.apply(pd.to_numeric, downcast='unsigned')\n",
-    "    print(mem_usage(dataset_int))\n",
-    "    print(mem_usage(converted_int))\n",
-    "    compare_ints = pd.concat([dataset_int.dtypes, converted_int.dtypes], axis=1)\n",
-    "    compare_ints.columns = ['before', 'after']\n",
-    "    compare_ints.apply(pd.Series.value_counts)\n",
-    "    print(compare_ints)\n",
-    "    return converted_int"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "id": "41ccfc55",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "14.63 MB\n",
-      "5.48 MB\n",
-      "          before   after\n",
-      "spkid      int64  uint32\n",
-      "epoch_mjd  int64  uint16\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_int = opt_int(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "id": "f29d14a0",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 6. Провести понижающее преобразование для столбцов типов «float» колонок\n",
-    "def opt_float(df):\n",
-    "    dataset_float = df.select_dtypes(include=['float'])\n",
-    "    converted_float = dataset_float.apply(pd.to_numeric, downcast='float')\n",
-    "    print(mem_usage(dataset_float))\n",
-    "    print(mem_usage(converted_float))\n",
-    "    compare_float = pd.concat([dataset_float.dtypes, converted_float.dtypes], axis=1)\n",
-    "    compare_float.columns = ['before', 'after']\n",
-    "    compare_float.apply(pd.Series.value_counts)\n",
-    "    print(compare_float)\n",
-    "    return converted_float"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "id": "94de85bb",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "241.33 MB\n",
-      "120.66 MB\n",
-      "                 before    after\n",
-      "H               float64  float32\n",
-      "diameter        float64  float32\n",
-      "albedo          float64  float32\n",
-      "diameter_sigma  float64  float32\n",
-      "epoch           float64  float32\n",
-      "...                 ...      ...\n",
-      "sigma_ad        float64  float32\n",
-      "sigma_n         float64  float32\n",
-      "sigma_tp        float64  float32\n",
-      "sigma_per       float64  float32\n",
-      "rms             float64  float32\n",
-      "\n",
-      "[33 rows x 2 columns]\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_float = opt_float(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "id": "75744269",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "761.26 MB\n",
-      "310.05 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# 7. Повторно провести анализ набора данных, как в п. 2, сравнив показатели занимаемой памяти\n",
-    "# Создаем копию исходного датафрейма\n",
-    "optimized_dataset = dataset.copy()\n",
-    "\n",
-    "# заменяем исходные числовые столбцы оптмизированными\n",
-    "optimized_dataset[converted_obj.columns] = converted_obj\n",
-    "optimized_dataset[converted_int.columns] = converted_int\n",
-    "optimized_dataset[converted_float.columns] = converted_float\n",
-    "\n",
-    "print(mem_usage(dataset))\n",
-    "print(mem_usage(optimized_dataset))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "e7dd9ff6",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 8. Выбрать произвольно 10 колонок для дальнейшем работы, \n",
-    "#    прописав преобразование типов и загрузку только нужных данных на этапе чтения файла. \n",
-    "#    При этом стоит использовать чанки. Сохраните полученный поднабор в отдельном файле."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "id": "1477da15",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "spkid:uint32\n",
-      "epoch_mjd:uint16\n",
-      "H:float32\n",
-      "diameter:float32\n",
-      "diameter_sigma:float32\n",
-      "rms:float32\n",
-      "full_name:object\n",
-      "name:category\n",
-      "orbit_id:category\n",
-      "class:category\n",
-      "12.18 MB\n",
-      "12.06 MB\n",
-      "12.06 MB\n",
-      "12.06 MB\n",
-      "12.06 MB\n",
-      "12.07 MB\n",
-      "12.07 MB\n",
-      "12.06 MB\n",
-      "12.07 MB\n",
-      "7.99 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "need_column = dict()\n",
-    "column_names = ['spkid', 'epoch_mjd', 'H',\n",
-    "           'diameter', 'diameter_sigma', 'rms',\n",
-    "           'full_name', 'name', 'orbit_id', 'class']\n",
-    "\n",
-    "opt_dtypes = optimized_dataset.dtypes\n",
-    "\n",
-    "for key in column_names:\n",
-    "    need_column[key] = opt_dtypes[key]\n",
-    "    print(f\"{key}:{opt_dtypes[key]}\")\n",
-    "\n",
-    "with open(\"dtypes_5.json\", mode=\"w\") as file:\n",
-    "    dtype_json = need_column.copy()\n",
-    "    for key in dtype_json.keys():\n",
-    "        dtype_json[key] = str(dtype_json[key])\n",
-    "    json.dump(dtype_json, file)\n",
-    "    \n",
-    "# Работа с чанкам\n",
-    "has_header = True\n",
-    "for chunk in pd.read_csv(file_name,\n",
-    "                         usecols=lambda x: x in column_names,\n",
-    "                         dtype=need_column,\n",
-    "                         #parse_dates=['date'],\n",
-    "                         #infer_datetime_format=True,\n",
-    "                         chunksize=100_000):\n",
-    "    # любые преобразования\n",
-    "    print(mem_usage(chunk))\n",
-    "    chunk.to_csv('df_5.csv', mode='a', header=has_header)\n",
-    "    has_header = False"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 18,
-   "id": "2f5e6c84",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "<class 'pandas.core.frame.DataFrame'>\n",
-      "RangeIndex: 958524 entries, 0 to 958523\n",
-      "Data columns (total 10 columns):\n",
-      " #   Column          Non-Null Count   Dtype   \n",
-      "---  ------          --------------   -----   \n",
-      " 0   spkid           958524 non-null  uint32  \n",
-      " 1   full_name       958524 non-null  object  \n",
-      " 2   name            22064 non-null   category\n",
-      " 3   H               952261 non-null  float32 \n",
-      " 4   diameter        136209 non-null  float32 \n",
-      " 5   diameter_sigma  136081 non-null  float32 \n",
-      " 6   orbit_id        958524 non-null  category\n",
-      " 7   epoch_mjd       958524 non-null  uint16  \n",
-      " 8   class           958524 non-null  category\n",
-      " 9   rms             958522 non-null  float32 \n",
-      "dtypes: category(3), float32(4), object(1), uint16(1), uint32(1)\n",
-      "memory usage: 96.0 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# сохраняем информацию о типах, коорые нам нужны. Необходимо для графиков.\n",
-    "def read_types(file_name):\n",
-    "    dtypes = {}\n",
-    "    with open(file_name, mode='r') as file:\n",
-    "        dtypes = json.load(file)\n",
-    "    for key in dtypes.keys():\n",
-    "        if dtypes[key] == 'category':\n",
-    "            dtypes[key] = pd.CategoricalDtype\n",
-    "        else:\n",
-    "            dtypes[key] = np.dtype(dtypes[key])\n",
-    "    return dtypes\n",
-    "\n",
-    "need_dtypes = read_types(\"dtypes_5.json\")\n",
-    "\n",
-    "dataset = pd.read_csv(\"df_5.csv\",\n",
-    "                  usecols=lambda x: x in need_dtypes.keys(),\n",
-    "                  dtype=need_column)\n",
-    "dataset.info(memory_usage='deep')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 22,
-   "id": "35c7de56",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График столбчатой диаграммы\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.countplot(x='class', data=dataset)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 23,
-   "id": "adee6b0e",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График круговой диаграммы\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "dataset['class'].value_counts().plot(kind='pie', autopct='%1.1f%%')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 24,
-   "id": "f75d085c",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Линейный график\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.lineplot(x='H', y='diameter', data=dataset)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 28,
-   "id": "615bd78a",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Гистограмма \n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.histplot(dataset['epoch_mjd'], bins=20)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 29,
-   "id": "e225aac8",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 2 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Корреляционная матрица для связи различных числовых переменных\n",
-    "numerical_vars = ['H', 'diameter_sigma', 'rms']\n",
-    "correlation_matrix = dataset[numerical_vars].corr()\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
-    "plt.title('Корреляционная матрица')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "8b3d7a71",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.9.7"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
Index: результаты_5.json
===================================================================
diff --git a/результаты_5.json b/результаты_5.json
deleted file mode 100644
--- a/результаты_5.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"file_in_memory_size": "    779526 KB", "columns": [{"column_name": "full_name", "memory_abs": 70627, "memory_per": 9.0603, "dtype": "object"}, {"column_name": "id", "memory_abs": 60843, "memory_per": 7.8052, "dtype": "object"}, {"column_name": "equinox", "memory_abs": 58035, "memory_per": 7.445, "dtype": "object"}, {"column_name": "orbit_id", "memory_abs": 56996, "memory_per": 7.3117, "dtype": "object"}, {"column_name": "class", "memory_abs": 56163, "memory_per": 7.2048, "dtype": "object"}, {"column_name": "neo", "memory_abs": 54291, "memory_per": 6.9646, "dtype": "object"}, {"column_name": "pha", "memory_abs": 53785, "memory_per": 6.8998, "dtype": "object"}, {"column_name": "pdes", "memory_abs": 46056, "memory_per": 5.9082, "dtype": "object"}, {"column_name": "name", "memory_abs": 30675, "memory_per": 3.9352, "dtype": "object"}, {"column_name": "prefix", "memory_abs": 29954, "memory_per": 3.8426, "dtype": "object"}, {"column_name": "spkid", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "int64"}, {"column_name": "H", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "diameter", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "albedo", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "diameter_sigma", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "epoch", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "epoch_mjd", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "int64"}, {"column_name": "epoch_cal", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "e", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "a", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "q", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "i", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "om", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "w", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "ma", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "ad", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "n", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "tp", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "tp_cal", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "per", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "per_y", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "moid", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "moid_ld", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_e", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_a", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_q", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_i", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_om", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_w", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_ma", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_ad", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_n", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_tp", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "sigma_per", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}, {"column_name": "rms", "memory_abs": 7488, "memory_per": 0.9606, "dtype": "float64"}]}
\ No newline at end of file
Index: результаты_3.json
===================================================================
diff --git a/результаты_3.json b/результаты_3.json
deleted file mode 100644
--- a/результаты_3.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"file_in_memory_size": "   2719483 KB", "columns": [{"column_name": "TAIL_NUMBER", "memory_abs": 357549, "memory_per": 13.1477, "dtype": "object"}, {"column_name": "AIRLINE", "memory_abs": 335278, "memory_per": 12.3288, "dtype": "object"}, {"column_name": "ORIGIN_AIRPORT", "memory_abs": 330263, "memory_per": 12.1443, "dtype": "object"}, {"column_name": "DESTINATION_AIRPORT", "memory_abs": 330263, "memory_per": 12.1443, "dtype": "object"}, {"column_name": "CANCELLATION_REASON", "memory_abs": 184128, "memory_per": 6.7707, "dtype": "object"}, {"column_name": "YEAR", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "MONTH", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "DAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "DAY_OF_WEEK", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "FLIGHT_NUMBER", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "SCHEDULED_DEPARTURE", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "DEPARTURE_TIME", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "DEPARTURE_DELAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "TAXI_OUT", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "WHEELS_OFF", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "SCHEDULED_TIME", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "ELAPSED_TIME", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "AIR_TIME", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "DISTANCE", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "WHEELS_ON", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "TAXI_IN", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "SCHEDULED_ARRIVAL", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "ARRIVAL_TIME", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "ARRIVAL_DELAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "DIVERTED", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "CANCELLED", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "int64"}, {"column_name": "AIR_SYSTEM_DELAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "SECURITY_DELAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "AIRLINE_DELAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "LATE_AIRCRAFT_DELAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}, {"column_name": "WEATHER_DELAY", "memory_abs": 45461, "memory_per": 1.6717, "dtype": "float64"}]}
\ No newline at end of file
Index: Задача 2.ipynb
===================================================================
diff --git a/Задача 2.ipynb b/Задача 2.ipynb
deleted file mode 100644
--- a/Задача 2.ipynb	
+++ /dev/null	
@@ -1,852 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 20,
-   "id": "0ce40138",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import numpy as np\n",
-    "import os"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 42,
-   "id": "d24871de",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "index: 0, cum_size = 0\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 1, cum_size = 123805762\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 2, cum_size = 247297775\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 3, cum_size = 370966117\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 4, cum_size = 494672684\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 5, cum_size = 618453042\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 6, cum_size = 742216581\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 7, cum_size = 866116921\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 8, cum_size = 990300237\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 9, cum_size = 1114144735\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 10, cum_size = 1237906911\n",
-      "(500000, 10)\n",
-      "(500000, 10)\n",
-      "index: 11, cum_size = 1361643510\n",
-      "(195015, 10)\n",
-      "(195015, 10)\n",
-      "1409797587\n"
-     ]
-    }
-   ],
-   "source": [
-    "file_name_full = \"Data/[2]automotive.csv.zip\"\n",
-    "\n",
-    "colomn_dtype = {\n",
-    "    \"firstSeen\": object,\n",
-    "    \"brandName\": object,\n",
-    "    \"modelName\": object,\n",
-    "    \"askPrice\": pd.Int64Dtype(),\n",
-    "    \"isNew\": \"bool\",\n",
-    "    \"vf_Wheels\": pd.Int64Dtype(),\n",
-    "    \"vf_Seats\": pd.Int64Dtype(),\n",
-    "    \"vf_Windows\": pd.Int64Dtype(),\n",
-    "    \"vf_WheelSizeRear\": pd.Int64Dtype(),\n",
-    "    \"vf_WheelBaseShort\": \"float64\"\n",
-    "}\n",
-    "\n",
-    "total_size = 0\n",
-    "index = 0 \n",
-    "has_header = True\n",
-    "for part in pd.read_csv(file_name_full, \n",
-    "                           usecols=lambda x: x in colomn_dtype.keys(),\n",
-    "                           dtype=colomn_dtype,\n",
-    "                           chunksize=500_000, \n",
-    "                           compression='zip',\n",
-    "                           na_values=['NA']):\n",
-    "    print(f\"index: {index}, cum_size = {total_size}\")\n",
-    "    index = index + 1\n",
-    "    total_size = total_size + part.memory_usage(deep=True).sum()\n",
-    "    print(part.shape)\n",
-    "    part.dropna().to_csv(\"df_2.csv\", mode='a', header=has_header)\n",
-    "    has_header = False\n",
-    "    print(part.shape)\n",
-    "    \n",
-    "print(total_size)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 43,
-   "id": "2f13d169",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "pd.set_option(\"display.max_rows\", 20, \"display.max_columns\", 60)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 44,
-   "id": "db6c1bd8",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def read_file(file_name):\n",
-    "    return pd.read_csv(file_name)\n",
-    "    # для заархивированных файлов\n",
-    "    #return next(pd.read_csv(file_name, chunksize=100_000, compression='gzip'))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 45,
-   "id": "926eba76",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_1884/2304502004.py:2: DtypeWarning: Columns (2,3,6,7,8,9,10) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  read_file(file_name)\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>Unnamed: 0</th>\n",
-       "      <th>firstSeen</th>\n",
-       "      <th>askPrice</th>\n",
-       "      <th>isNew</th>\n",
-       "      <th>brandName</th>\n",
-       "      <th>modelName</th>\n",
-       "      <th>vf_Seats</th>\n",
-       "      <th>vf_WheelBaseShort</th>\n",
-       "      <th>vf_WheelSizeRear</th>\n",
-       "      <th>vf_Wheels</th>\n",
-       "      <th>vf_Windows</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>3.0</td>\n",
-       "      <td>2019-05-06</td>\n",
-       "      <td>12387</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Cruze</td>\n",
-       "      <td>5</td>\n",
-       "      <td>106.3</td>\n",
-       "      <td>17</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>20.0</td>\n",
-       "      <td>2019-05-07</td>\n",
-       "      <td>16671</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Impala</td>\n",
-       "      <td>5</td>\n",
-       "      <td>111.7</td>\n",
-       "      <td>18</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>43.0</td>\n",
-       "      <td>2019-05-07</td>\n",
-       "      <td>12959</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Cruze</td>\n",
-       "      <td>5</td>\n",
-       "      <td>106.3</td>\n",
-       "      <td>16</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>109.0</td>\n",
-       "      <td>2019-05-11</td>\n",
-       "      <td>15900</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Impala</td>\n",
-       "      <td>5</td>\n",
-       "      <td>111.7</td>\n",
-       "      <td>18</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>118.0</td>\n",
-       "      <td>2019-05-13</td>\n",
-       "      <td>12998</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Sonic</td>\n",
-       "      <td>5</td>\n",
-       "      <td>99.4</td>\n",
-       "      <td>15</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>385023</th>\n",
-       "      <td>5694424.0</td>\n",
-       "      <td>2020-03-15</td>\n",
-       "      <td>14750</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Malibu</td>\n",
-       "      <td>5</td>\n",
-       "      <td>111.4</td>\n",
-       "      <td>17</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>385024</th>\n",
-       "      <td>5694496.0</td>\n",
-       "      <td>2020-02-13</td>\n",
-       "      <td>18250</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Impala</td>\n",
-       "      <td>5</td>\n",
-       "      <td>111.7</td>\n",
-       "      <td>18</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>385025</th>\n",
-       "      <td>5694839.0</td>\n",
-       "      <td>2020-05-20</td>\n",
-       "      <td>13386</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Malibu</td>\n",
-       "      <td>5</td>\n",
-       "      <td>111.4</td>\n",
-       "      <td>16</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>385026</th>\n",
-       "      <td>5694980.0</td>\n",
-       "      <td>2020-05-19</td>\n",
-       "      <td>13892</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Malibu</td>\n",
-       "      <td>5</td>\n",
-       "      <td>111.4</td>\n",
-       "      <td>16</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>385027</th>\n",
-       "      <td>5695002.0</td>\n",
-       "      <td>2020-03-27</td>\n",
-       "      <td>12950</td>\n",
-       "      <td>False</td>\n",
-       "      <td>CHEVROLET</td>\n",
-       "      <td>Cruze</td>\n",
-       "      <td>5</td>\n",
-       "      <td>106.3</td>\n",
-       "      <td>17</td>\n",
-       "      <td>4</td>\n",
-       "      <td>4</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>385028 rows × 11 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "        Unnamed: 0   firstSeen askPrice  isNew  brandName modelName vf_Seats  \\\n",
-       "0              3.0  2019-05-06    12387  False  CHEVROLET     Cruze        5   \n",
-       "1             20.0  2019-05-07    16671  False  CHEVROLET    Impala        5   \n",
-       "2             43.0  2019-05-07    12959  False  CHEVROLET     Cruze        5   \n",
-       "3            109.0  2019-05-11    15900  False  CHEVROLET    Impala        5   \n",
-       "4            118.0  2019-05-13    12998  False  CHEVROLET     Sonic        5   \n",
-       "...            ...         ...      ...    ...        ...       ...      ...   \n",
-       "385023   5694424.0  2020-03-15    14750  False  CHEVROLET    Malibu        5   \n",
-       "385024   5694496.0  2020-02-13    18250  False  CHEVROLET    Impala        5   \n",
-       "385025   5694839.0  2020-05-20    13386  False  CHEVROLET    Malibu        5   \n",
-       "385026   5694980.0  2020-05-19    13892  False  CHEVROLET    Malibu        5   \n",
-       "385027   5695002.0  2020-03-27    12950  False  CHEVROLET     Cruze        5   \n",
-       "\n",
-       "       vf_WheelBaseShort vf_WheelSizeRear vf_Wheels vf_Windows  \n",
-       "0                  106.3               17         4          4  \n",
-       "1                  111.7               18         4          4  \n",
-       "2                  106.3               16         4          4  \n",
-       "3                  111.7               18         4          4  \n",
-       "4                   99.4               15         4          4  \n",
-       "...                  ...              ...       ...        ...  \n",
-       "385023             111.4               17         4          4  \n",
-       "385024             111.7               18         4          4  \n",
-       "385025             111.4               16         4          4  \n",
-       "385026             111.4               16         4          4  \n",
-       "385027             106.3               17         4          4  \n",
-       "\n",
-       "[385028 rows x 11 columns]"
-      ]
-     },
-     "execution_count": 45,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "file_name = \"df_2.csv\"\n",
-    "read_file(file_name)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 46,
-   "id": "677ad1b9",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_memory_stat_by_column(df, output_file):\n",
-    "    # вывод пар: колонка - тип данных\n",
-    "    memory_usage_stat = df.memory_usage(deep=True)\n",
-    "    # суммарный размер\n",
-    "    total_memory_usage = memory_usage_stat.sum()\n",
-    "    result = {\n",
-    "        \"file_in_memory_size\": f\"{int(total_memory_usage // 1024):10} KB\",\n",
-    "        \"columns\": []\n",
-    "    }\n",
-    "    # проходимся по колонкам, записываем в список\n",
-    "    for key in df.dtypes.keys():\n",
-    "        result[\"columns\"].append({\n",
-    "            \"column_name\": key,\n",
-    "            \"memory_abs\": int(memory_usage_stat[key] // 1024),\n",
-    "            \"memory_per\": round(memory_usage_stat[key] / total_memory_usage * 100, 4),\n",
-    "            \"dtype\": str(df.dtypes[key])\n",
-    "        })\n",
-    "    # отсортируем колонки\n",
-    "    result[\"columns\"].sort(key=lambda x: x['memory_abs'], reverse=True)\n",
-    "    # Запись в файл JSON\n",
-    "    with open(output_file, 'w') as file:\n",
-    "        json.dump(result, file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 63,
-   "id": "57ca9ca1",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_1884/1342175180.py:2: DtypeWarning: Columns (2,3,6,7,8,9,10) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  dataset = read_file(file_name)\n"
-     ]
-    }
-   ],
-   "source": [
-    "file_name = \"df_2.csv\"\n",
-    "dataset = read_file(file_name)\n",
-    "output_file = \"результаты_2.json\"\n",
-    "get_memory_stat_by_column(dataset, output_file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 61,
-   "id": "8551d0e7",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "Unnamed: 0           float64\n",
-       "firstSeen             object\n",
-       "askPrice              object\n",
-       "isNew                 object\n",
-       "brandName             object\n",
-       "modelName             object\n",
-       "vf_Seats              object\n",
-       "vf_WheelBaseShort     object\n",
-       "vf_WheelSizeRear      object\n",
-       "vf_Wheels             object\n",
-       "vf_Windows            object\n",
-       "dtype: object"
-      ]
-     },
-     "execution_count": 61,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "dataset.dtypes"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 48,
-   "id": "e1469615",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Считает объем памяти до и после преобразований\n",
-    "def mem_usage(pandas_obj):\n",
-    "    if isinstance(pandas_obj, pd.DataFrame):\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True).sum()\n",
-    "    else: # предположим, что если это не дадафрейм, то серия\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True)\n",
-    "    usage_mb = usage_b / 1024 ** 2 # преобразуем быйты в мегабайты\n",
-    "    return \"{:03.2f} MB\".format(usage_mb)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 49,
-   "id": "4be4a3e7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 4. Преобразовать все колонки с типом данных «object» в категориальные, \n",
-    "#    если количество уникальных значений колонки составляет менее 50%."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 50,
-   "id": "4463d7a7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def opt_obj(df):\n",
-    "    converted_obj = pd.DataFrame()\n",
-    "    dataset_obj = df.select_dtypes(include=['object']).copy()\n",
-    "    for col in dataset_obj.columns:\n",
-    "        num_unique_values = len(dataset_obj[col].unique())\n",
-    "        num_total_values = len(dataset_obj[col])\n",
-    "        if num_unique_values / num_total_values < 0.5:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col].astype('category')\n",
-    "        else:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col]\n",
-    "    print(mem_usage(dataset_obj))\n",
-    "    print(mem_usage(converted_obj))\n",
-    "    return converted_obj    "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 51,
-   "id": "d7c81d13",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "183.43 MB\n",
-      "6.84 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_obj = opt_obj(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 64,
-   "id": "9558be52",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 5.Провести понижающее преобразование для столбцов типов «int» колонок\n",
-    "def opt_int(df):\n",
-    "    dataset_int = df.select_dtypes(include=['int']) # выбираем колонки типа int\n",
-    "    \"\"\"\n",
-    "    downcast:\n",
-    "            - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n",
-    "            - 'unsigned': smallest unsigned int dtype (min.: np.int8)\n",
-    "            - 'float': smallest float dtype (min.: np.float32)\n",
-    "    \"\"\"\n",
-    "    converted_int = dataset_int.apply(pd.to_numeric, downcast='unsigned')\n",
-    "    print(mem_usage(dataset_int))\n",
-    "    print(mem_usage(converted_int))\n",
-    "    compare_ints = pd.concat([dataset_int.dtypes, converted_int.dtypes], axis=1)\n",
-    "    compare_ints.columns = ['before', 'after']\n",
-    "    compare_ints.apply(pd.Series.value_counts)\n",
-    "    print(compare_ints)\n",
-    "    return converted_int"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 65,
-   "id": "72234e9e",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "0.00 MB\n",
-      "0.00 MB\n",
-      "Empty DataFrame\n",
-      "Columns: [before, after]\n",
-      "Index: []\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_int = opt_int(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 55,
-   "id": "f29d14a0",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 6. Провести понижающее преобразование для столбцов типов «float» колонок\n",
-    "def opt_float(df):\n",
-    "    dataset_float = df.select_dtypes(include=['float'])\n",
-    "    converted_float = dataset_float.apply(pd.to_numeric, downcast='float')\n",
-    "    print(mem_usage(dataset_float))\n",
-    "    print(mem_usage(converted_float))\n",
-    "    compare_float = pd.concat([dataset_float.dtypes, converted_float.dtypes], axis=1)\n",
-    "    compare_float.columns = ['before', 'after']\n",
-    "    compare_float.apply(pd.Series.value_counts)\n",
-    "    print(compare_float)\n",
-    "    return converted_float"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 56,
-   "id": "6bf28129",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2.94 MB\n",
-      "1.47 MB\n",
-      "             before    after\n",
-      "Unnamed: 0  float64  float32\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_float = opt_float(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 66,
-   "id": "75744269",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "186.37 MB\n",
-      "8.31 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# 7. Повторно провести анализ набора данных, как в п. 2, сравнив показатели занимаемой памяти\n",
-    "# Создаем копию исходного датафрейма\n",
-    "optimized_dataset = dataset.copy()\n",
-    "\n",
-    "# заменяем исходные числовые столбцы оптмизированными\n",
-    "optimized_dataset[converted_obj.columns] = converted_obj\n",
-    "optimized_dataset[converted_int.columns] = converted_int\n",
-    "optimized_dataset[converted_float.columns] = converted_float\n",
-    "\n",
-    "print(mem_usage(dataset))\n",
-    "print(mem_usage(optimized_dataset))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 67,
-   "id": "e7dd9ff6",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 8. Выбрать произвольно 10 колонок для дальнейшем работы, \n",
-    "#    прописав преобразование типов и загрузку только нужных данных на этапе чтения файла. \n",
-    "#    При этом стоит использовать чанки. Сохраните полученный поднабор в отдельном файле."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 68,
-   "id": "1477da15",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Unnamed: 0:float32\n",
-      "firstSeen:category\n",
-      "askPrice:category\n",
-      "isNew:category\n",
-      "brandName:category\n",
-      "modelName:category\n",
-      "vf_Seats:category\n",
-      "vf_WheelBaseShort:category\n",
-      "vf_WheelSizeRear:category\n",
-      "vf_Wheels:category\n",
-      "vf_Windows:category\n"
-     ]
-    }
-   ],
-   "source": [
-    "need_column = dict()\n",
-    "#column_names = ['date', 'number_of_game', 'day_of_week',\n",
-    "#           'park_id', 'v_manager_name', 'length_minutes',\n",
-    "#           'v_hits', 'h_hits', 'h_walks', 'h_errors']\n",
-    "\n",
-    "opt_dtypes = optimized_dataset.dtypes\n",
-    "\n",
-    "for key in dataset.columns:\n",
-    "    need_column[key] = opt_dtypes[key]\n",
-    "    print(f\"{key}:{opt_dtypes[key]}\")\n",
-    "\n",
-    "with open(\"dtypes_2.json\", mode=\"w\") as file:\n",
-    "    dtype_json = need_column.copy()\n",
-    "    for key in dtype_json.keys():\n",
-    "        dtype_json[key] = str(dtype_json[key])\n",
-    "    json.dump(dtype_json, file)\n",
-    "    \n",
-    "# Работа с чанкам\n",
-    "#has_header = True\n",
-    "#for chunk in pd.read_csv(file_name,\n",
-    "#                         usecols=lambda x: x in column_names,\n",
-    "#                         dtype=need_column,\n",
-    "#                         #parse_dates=['date'],\n",
-    "#                         #infer_datetime_format=True,\n",
-    "#                         chunksize=100_000):\n",
-    "    # любые преобразования\n",
-    "#    print(mem_usage(chunk))\n",
-    "#    chunk.to_csv('df_1.csv', mode='a', header=has_header)\n",
-    "#    has_header = False"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 72,
-   "id": "2f5e6c84",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "<class 'pandas.core.frame.DataFrame'>\n",
-      "RangeIndex: 385028 entries, 0 to 385027\n",
-      "Data columns (total 11 columns):\n",
-      " #   Column             Non-Null Count   Dtype   \n",
-      "---  ------             --------------   -----   \n",
-      " 0   Unnamed: 0         385026 non-null  float32 \n",
-      " 1   firstSeen          385028 non-null  category\n",
-      " 2   askPrice           340280 non-null  category\n",
-      " 3   isNew              385028 non-null  category\n",
-      " 4   brandName          385028 non-null  category\n",
-      " 5   modelName          385028 non-null  category\n",
-      " 6   vf_Seats           385028 non-null  category\n",
-      " 7   vf_WheelBaseShort  385028 non-null  category\n",
-      " 8   vf_WheelSizeRear   385028 non-null  category\n",
-      " 9   vf_Wheels          385028 non-null  category\n",
-      " 10  vf_Windows         385028 non-null  category\n",
-      "dtypes: category(10), float32(1)\n",
-      "memory usage: 8.3 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# сохраняем информацию о типах, коорые нам нужны. Необходимо для графиков.\n",
-    "def read_types(file_name):\n",
-    "    dtypes = {}\n",
-    "    with open(file_name, mode='r') as file:\n",
-    "        dtypes = json.load(file)\n",
-    "    for key in dtypes.keys():\n",
-    "        if dtypes[key] == 'category':\n",
-    "            dtypes[key] = pd.CategoricalDtype\n",
-    "        elif dtypes[key] == 'string':\n",
-    "            dtypes[key] = pd.StringDtype\n",
-    "        else:    \n",
-    "            dtypes[key] = np.dtype(dtypes[key])\n",
-    "    return dtypes\n",
-    "\n",
-    "need_dtypes = read_types(\"dtypes_2.json\")\n",
-    "\n",
-    "dataset = pd.read_csv(\"df_2.csv\",\n",
-    "                  usecols=lambda x: x in need_dtypes.keys(),\n",
-    "                  dtype=need_column)\n",
-    "dataset.info(memory_usage='deep')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 73,
-   "id": "ee95db9e",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "TypeError",
-     "evalue": "no numeric data to plot",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
-      "\u001b[1;32mC:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_1884/2630898898.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# графики\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mhist\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdataset\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'brandName'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mhist\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_figure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"hist.png\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\plotting\\_core.py\u001b[0m in \u001b[0;36mbar\u001b[1;34m(self, x, y, **kwargs)\u001b[0m\n\u001b[0;32m   1128\u001b[0m         \u001b[0mother\u001b[0m \u001b[0maxis\u001b[0m \u001b[0mrepresents\u001b[0m \u001b[0ma\u001b[0m \u001b[0mmeasured\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1129\u001b[0m         \"\"\"\n\u001b[1;32m-> 1130\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"bar\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1131\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1132\u001b[0m     @Appender(\n",
-      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\plotting\\_core.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    970\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlabel_name\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    971\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 972\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mplot_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    973\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    974\u001b[0m     \u001b[0m__call__\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m__doc__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\__init__.py\u001b[0m in \u001b[0;36mplot\u001b[1;34m(data, kind, **kwargs)\u001b[0m\n\u001b[0;32m     69\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"ax\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"left_ax\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     70\u001b[0m     \u001b[0mplot_obj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mPLOT_CLASSES\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 71\u001b[1;33m     \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     72\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py\u001b[0m in \u001b[0;36mgenerate\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    284\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mgenerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    285\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_args_adjust\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 286\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    287\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_setup_subplots\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    288\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py\u001b[0m in \u001b[0;36m_compute_plot_data\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    451\u001b[0m         \u001b[1;31m# no non-numeric frames or series allowed\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    452\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mis_empty\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 453\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"no numeric data to plot\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    454\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    455\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnumeric_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_convert_to_ndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mTypeError\u001b[0m: no numeric data to plot"
-     ]
-    }
-   ],
-   "source": [
-    "# графики\n",
-    "hist = dataset['brandName'].plot.bar()\n",
-    "hist.get_figure().savefig(\"hist.png\")"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 48,
-   "id": "714e1134",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "sort_dow = dataset['length_minutes'].sort_index()\n",
-    "plot = sort_dow.plot()\n",
-    "plot.get_figure().savefig('plot.png')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "35c7de56",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.9.7"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
Index: результаты_2.json
===================================================================
diff --git a/результаты_2.json b/результаты_2.json
deleted file mode 100644
--- a/результаты_2.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"file_in_memory_size": "    190843 KB", "columns": [{"column_name": "firstSeen", "memory_abs": 25192, "memory_per": 13.2004, "dtype": "object"}, {"column_name": "brandName", "memory_abs": 24692, "memory_per": 12.9384, "dtype": "object"}, {"column_name": "modelName", "memory_abs": 23447, "memory_per": 12.2863, "dtype": "object"}, {"column_name": "askPrice", "memory_abs": 16790, "memory_per": 8.7982, "dtype": "object"}, {"column_name": "vf_WheelSizeRear", "memory_abs": 16480, "memory_per": 8.6354, "dtype": "object"}, {"column_name": "vf_Seats", "memory_abs": 16352, "memory_per": 8.5683, "dtype": "object"}, {"column_name": "vf_Wheels", "memory_abs": 16352, "memory_per": 8.5683, "dtype": "object"}, {"column_name": "vf_Windows", "memory_abs": 16352, "memory_per": 8.5683, "dtype": "object"}, {"column_name": "isNew", "memory_abs": 16286, "memory_per": 8.534, "dtype": "object"}, {"column_name": "vf_WheelBaseShort", "memory_abs": 15889, "memory_per": 8.326, "dtype": "object"}, {"column_name": "Unnamed: 0", "memory_abs": 3008, "memory_per": 1.5762, "dtype": "float64"}]}
\ No newline at end of file
Index: Задача 3.ipynb
===================================================================
diff --git a/Задача 3.ipynb b/Задача 3.ipynb
deleted file mode 100644
--- a/Задача 3.ipynb	
+++ /dev/null	
@@ -1,1207 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 24,
-   "id": "0ce40138",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import numpy as np\n",
-    "import os\n",
-    "import seaborn as sns"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "2f13d169",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "pd.set_option(\"display.max_rows\", 20, \"display.max_columns\", 60)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "db6c1bd8",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def read_file(file_name):\n",
-    "    return pd.read_csv(file_name)\n",
-    "    # для заархивированных файлов\n",
-    "    # df = pd.read_csv(dataset[year], chunksize=chanksize, compression='gzip')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "d24871de",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_18048/764762243.py:2: DtypeWarning: Columns (7,8) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  read_file(file_name)\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>YEAR</th>\n",
-       "      <th>MONTH</th>\n",
-       "      <th>DAY</th>\n",
-       "      <th>DAY_OF_WEEK</th>\n",
-       "      <th>AIRLINE</th>\n",
-       "      <th>FLIGHT_NUMBER</th>\n",
-       "      <th>TAIL_NUMBER</th>\n",
-       "      <th>ORIGIN_AIRPORT</th>\n",
-       "      <th>DESTINATION_AIRPORT</th>\n",
-       "      <th>SCHEDULED_DEPARTURE</th>\n",
-       "      <th>DEPARTURE_TIME</th>\n",
-       "      <th>DEPARTURE_DELAY</th>\n",
-       "      <th>TAXI_OUT</th>\n",
-       "      <th>WHEELS_OFF</th>\n",
-       "      <th>SCHEDULED_TIME</th>\n",
-       "      <th>ELAPSED_TIME</th>\n",
-       "      <th>AIR_TIME</th>\n",
-       "      <th>DISTANCE</th>\n",
-       "      <th>WHEELS_ON</th>\n",
-       "      <th>TAXI_IN</th>\n",
-       "      <th>SCHEDULED_ARRIVAL</th>\n",
-       "      <th>ARRIVAL_TIME</th>\n",
-       "      <th>ARRIVAL_DELAY</th>\n",
-       "      <th>DIVERTED</th>\n",
-       "      <th>CANCELLED</th>\n",
-       "      <th>CANCELLATION_REASON</th>\n",
-       "      <th>AIR_SYSTEM_DELAY</th>\n",
-       "      <th>SECURITY_DELAY</th>\n",
-       "      <th>AIRLINE_DELAY</th>\n",
-       "      <th>LATE_AIRCRAFT_DELAY</th>\n",
-       "      <th>WEATHER_DELAY</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>1</td>\n",
-       "      <td>1</td>\n",
-       "      <td>4</td>\n",
-       "      <td>AS</td>\n",
-       "      <td>98</td>\n",
-       "      <td>N407AS</td>\n",
-       "      <td>ANC</td>\n",
-       "      <td>SEA</td>\n",
-       "      <td>5</td>\n",
-       "      <td>2354.0</td>\n",
-       "      <td>-11.0</td>\n",
-       "      <td>21.0</td>\n",
-       "      <td>15.0</td>\n",
-       "      <td>205.0</td>\n",
-       "      <td>194.0</td>\n",
-       "      <td>169.0</td>\n",
-       "      <td>1448</td>\n",
-       "      <td>404.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>430</td>\n",
-       "      <td>408.0</td>\n",
-       "      <td>-22.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>1</td>\n",
-       "      <td>1</td>\n",
-       "      <td>4</td>\n",
-       "      <td>AA</td>\n",
-       "      <td>2336</td>\n",
-       "      <td>N3KUAA</td>\n",
-       "      <td>LAX</td>\n",
-       "      <td>PBI</td>\n",
-       "      <td>10</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>-8.0</td>\n",
-       "      <td>12.0</td>\n",
-       "      <td>14.0</td>\n",
-       "      <td>280.0</td>\n",
-       "      <td>279.0</td>\n",
-       "      <td>263.0</td>\n",
-       "      <td>2330</td>\n",
-       "      <td>737.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>750</td>\n",
-       "      <td>741.0</td>\n",
-       "      <td>-9.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>1</td>\n",
-       "      <td>1</td>\n",
-       "      <td>4</td>\n",
-       "      <td>US</td>\n",
-       "      <td>840</td>\n",
-       "      <td>N171US</td>\n",
-       "      <td>SFO</td>\n",
-       "      <td>CLT</td>\n",
-       "      <td>20</td>\n",
-       "      <td>18.0</td>\n",
-       "      <td>-2.0</td>\n",
-       "      <td>16.0</td>\n",
-       "      <td>34.0</td>\n",
-       "      <td>286.0</td>\n",
-       "      <td>293.0</td>\n",
-       "      <td>266.0</td>\n",
-       "      <td>2296</td>\n",
-       "      <td>800.0</td>\n",
-       "      <td>11.0</td>\n",
-       "      <td>806</td>\n",
-       "      <td>811.0</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>1</td>\n",
-       "      <td>1</td>\n",
-       "      <td>4</td>\n",
-       "      <td>AA</td>\n",
-       "      <td>258</td>\n",
-       "      <td>N3HYAA</td>\n",
-       "      <td>LAX</td>\n",
-       "      <td>MIA</td>\n",
-       "      <td>20</td>\n",
-       "      <td>15.0</td>\n",
-       "      <td>-5.0</td>\n",
-       "      <td>15.0</td>\n",
-       "      <td>30.0</td>\n",
-       "      <td>285.0</td>\n",
-       "      <td>281.0</td>\n",
-       "      <td>258.0</td>\n",
-       "      <td>2342</td>\n",
-       "      <td>748.0</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>805</td>\n",
-       "      <td>756.0</td>\n",
-       "      <td>-9.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>1</td>\n",
-       "      <td>1</td>\n",
-       "      <td>4</td>\n",
-       "      <td>AS</td>\n",
-       "      <td>135</td>\n",
-       "      <td>N527AS</td>\n",
-       "      <td>SEA</td>\n",
-       "      <td>ANC</td>\n",
-       "      <td>25</td>\n",
-       "      <td>24.0</td>\n",
-       "      <td>-1.0</td>\n",
-       "      <td>11.0</td>\n",
-       "      <td>35.0</td>\n",
-       "      <td>235.0</td>\n",
-       "      <td>215.0</td>\n",
-       "      <td>199.0</td>\n",
-       "      <td>1448</td>\n",
-       "      <td>254.0</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>320</td>\n",
-       "      <td>259.0</td>\n",
-       "      <td>-21.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>5819074</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>12</td>\n",
-       "      <td>31</td>\n",
-       "      <td>4</td>\n",
-       "      <td>B6</td>\n",
-       "      <td>688</td>\n",
-       "      <td>N657JB</td>\n",
-       "      <td>LAX</td>\n",
-       "      <td>BOS</td>\n",
-       "      <td>2359</td>\n",
-       "      <td>2355.0</td>\n",
-       "      <td>-4.0</td>\n",
-       "      <td>22.0</td>\n",
-       "      <td>17.0</td>\n",
-       "      <td>320.0</td>\n",
-       "      <td>298.0</td>\n",
-       "      <td>272.0</td>\n",
-       "      <td>2611</td>\n",
-       "      <td>749.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>819</td>\n",
-       "      <td>753.0</td>\n",
-       "      <td>-26.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>5819075</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>12</td>\n",
-       "      <td>31</td>\n",
-       "      <td>4</td>\n",
-       "      <td>B6</td>\n",
-       "      <td>745</td>\n",
-       "      <td>N828JB</td>\n",
-       "      <td>JFK</td>\n",
-       "      <td>PSE</td>\n",
-       "      <td>2359</td>\n",
-       "      <td>2355.0</td>\n",
-       "      <td>-4.0</td>\n",
-       "      <td>17.0</td>\n",
-       "      <td>12.0</td>\n",
-       "      <td>227.0</td>\n",
-       "      <td>215.0</td>\n",
-       "      <td>195.0</td>\n",
-       "      <td>1617</td>\n",
-       "      <td>427.0</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>446</td>\n",
-       "      <td>430.0</td>\n",
-       "      <td>-16.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>5819076</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>12</td>\n",
-       "      <td>31</td>\n",
-       "      <td>4</td>\n",
-       "      <td>B6</td>\n",
-       "      <td>1503</td>\n",
-       "      <td>N913JB</td>\n",
-       "      <td>JFK</td>\n",
-       "      <td>SJU</td>\n",
-       "      <td>2359</td>\n",
-       "      <td>2350.0</td>\n",
-       "      <td>-9.0</td>\n",
-       "      <td>17.0</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>221.0</td>\n",
-       "      <td>222.0</td>\n",
-       "      <td>197.0</td>\n",
-       "      <td>1598</td>\n",
-       "      <td>424.0</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>440</td>\n",
-       "      <td>432.0</td>\n",
-       "      <td>-8.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>5819077</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>12</td>\n",
-       "      <td>31</td>\n",
-       "      <td>4</td>\n",
-       "      <td>B6</td>\n",
-       "      <td>333</td>\n",
-       "      <td>N527JB</td>\n",
-       "      <td>MCO</td>\n",
-       "      <td>SJU</td>\n",
-       "      <td>2359</td>\n",
-       "      <td>2353.0</td>\n",
-       "      <td>-6.0</td>\n",
-       "      <td>10.0</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>161.0</td>\n",
-       "      <td>157.0</td>\n",
-       "      <td>144.0</td>\n",
-       "      <td>1189</td>\n",
-       "      <td>327.0</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>340</td>\n",
-       "      <td>330.0</td>\n",
-       "      <td>-10.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>5819078</th>\n",
-       "      <td>2015</td>\n",
-       "      <td>12</td>\n",
-       "      <td>31</td>\n",
-       "      <td>4</td>\n",
-       "      <td>B6</td>\n",
-       "      <td>839</td>\n",
-       "      <td>N534JB</td>\n",
-       "      <td>JFK</td>\n",
-       "      <td>BQN</td>\n",
-       "      <td>2359</td>\n",
-       "      <td>14.0</td>\n",
-       "      <td>15.0</td>\n",
-       "      <td>14.0</td>\n",
-       "      <td>28.0</td>\n",
-       "      <td>221.0</td>\n",
-       "      <td>208.0</td>\n",
-       "      <td>189.0</td>\n",
-       "      <td>1576</td>\n",
-       "      <td>437.0</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>440</td>\n",
-       "      <td>442.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>5819079 rows × 31 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "         YEAR  MONTH  DAY  DAY_OF_WEEK AIRLINE  FLIGHT_NUMBER TAIL_NUMBER  \\\n",
-       "0        2015      1    1            4      AS             98      N407AS   \n",
-       "1        2015      1    1            4      AA           2336      N3KUAA   \n",
-       "2        2015      1    1            4      US            840      N171US   \n",
-       "3        2015      1    1            4      AA            258      N3HYAA   \n",
-       "4        2015      1    1            4      AS            135      N527AS   \n",
-       "...       ...    ...  ...          ...     ...            ...         ...   \n",
-       "5819074  2015     12   31            4      B6            688      N657JB   \n",
-       "5819075  2015     12   31            4      B6            745      N828JB   \n",
-       "5819076  2015     12   31            4      B6           1503      N913JB   \n",
-       "5819077  2015     12   31            4      B6            333      N527JB   \n",
-       "5819078  2015     12   31            4      B6            839      N534JB   \n",
-       "\n",
-       "        ORIGIN_AIRPORT DESTINATION_AIRPORT  SCHEDULED_DEPARTURE  \\\n",
-       "0                  ANC                 SEA                    5   \n",
-       "1                  LAX                 PBI                   10   \n",
-       "2                  SFO                 CLT                   20   \n",
-       "3                  LAX                 MIA                   20   \n",
-       "4                  SEA                 ANC                   25   \n",
-       "...                ...                 ...                  ...   \n",
-       "5819074            LAX                 BOS                 2359   \n",
-       "5819075            JFK                 PSE                 2359   \n",
-       "5819076            JFK                 SJU                 2359   \n",
-       "5819077            MCO                 SJU                 2359   \n",
-       "5819078            JFK                 BQN                 2359   \n",
-       "\n",
-       "         DEPARTURE_TIME  DEPARTURE_DELAY  TAXI_OUT  WHEELS_OFF  \\\n",
-       "0                2354.0            -11.0      21.0        15.0   \n",
-       "1                   2.0             -8.0      12.0        14.0   \n",
-       "2                  18.0             -2.0      16.0        34.0   \n",
-       "3                  15.0             -5.0      15.0        30.0   \n",
-       "4                  24.0             -1.0      11.0        35.0   \n",
-       "...                 ...              ...       ...         ...   \n",
-       "5819074          2355.0             -4.0      22.0        17.0   \n",
-       "5819075          2355.0             -4.0      17.0        12.0   \n",
-       "5819076          2350.0             -9.0      17.0         7.0   \n",
-       "5819077          2353.0             -6.0      10.0         3.0   \n",
-       "5819078            14.0             15.0      14.0        28.0   \n",
-       "\n",
-       "         SCHEDULED_TIME  ELAPSED_TIME  AIR_TIME  DISTANCE  WHEELS_ON  TAXI_IN  \\\n",
-       "0                 205.0         194.0     169.0      1448      404.0      4.0   \n",
-       "1                 280.0         279.0     263.0      2330      737.0      4.0   \n",
-       "2                 286.0         293.0     266.0      2296      800.0     11.0   \n",
-       "3                 285.0         281.0     258.0      2342      748.0      8.0   \n",
-       "4                 235.0         215.0     199.0      1448      254.0      5.0   \n",
-       "...                 ...           ...       ...       ...        ...      ...   \n",
-       "5819074           320.0         298.0     272.0      2611      749.0      4.0   \n",
-       "5819075           227.0         215.0     195.0      1617      427.0      3.0   \n",
-       "5819076           221.0         222.0     197.0      1598      424.0      8.0   \n",
-       "5819077           161.0         157.0     144.0      1189      327.0      3.0   \n",
-       "5819078           221.0         208.0     189.0      1576      437.0      5.0   \n",
-       "\n",
-       "         SCHEDULED_ARRIVAL  ARRIVAL_TIME  ARRIVAL_DELAY  DIVERTED  CANCELLED  \\\n",
-       "0                      430         408.0          -22.0         0          0   \n",
-       "1                      750         741.0           -9.0         0          0   \n",
-       "2                      806         811.0            5.0         0          0   \n",
-       "3                      805         756.0           -9.0         0          0   \n",
-       "4                      320         259.0          -21.0         0          0   \n",
-       "...                    ...           ...            ...       ...        ...   \n",
-       "5819074                819         753.0          -26.0         0          0   \n",
-       "5819075                446         430.0          -16.0         0          0   \n",
-       "5819076                440         432.0           -8.0         0          0   \n",
-       "5819077                340         330.0          -10.0         0          0   \n",
-       "5819078                440         442.0            2.0         0          0   \n",
-       "\n",
-       "        CANCELLATION_REASON  AIR_SYSTEM_DELAY  SECURITY_DELAY  AIRLINE_DELAY  \\\n",
-       "0                       NaN               NaN             NaN            NaN   \n",
-       "1                       NaN               NaN             NaN            NaN   \n",
-       "2                       NaN               NaN             NaN            NaN   \n",
-       "3                       NaN               NaN             NaN            NaN   \n",
-       "4                       NaN               NaN             NaN            NaN   \n",
-       "...                     ...               ...             ...            ...   \n",
-       "5819074                 NaN               NaN             NaN            NaN   \n",
-       "5819075                 NaN               NaN             NaN            NaN   \n",
-       "5819076                 NaN               NaN             NaN            NaN   \n",
-       "5819077                 NaN               NaN             NaN            NaN   \n",
-       "5819078                 NaN               NaN             NaN            NaN   \n",
-       "\n",
-       "         LATE_AIRCRAFT_DELAY  WEATHER_DELAY  \n",
-       "0                        NaN            NaN  \n",
-       "1                        NaN            NaN  \n",
-       "2                        NaN            NaN  \n",
-       "3                        NaN            NaN  \n",
-       "4                        NaN            NaN  \n",
-       "...                      ...            ...  \n",
-       "5819074                  NaN            NaN  \n",
-       "5819075                  NaN            NaN  \n",
-       "5819076                  NaN            NaN  \n",
-       "5819077                  NaN            NaN  \n",
-       "5819078                  NaN            NaN  \n",
-       "\n",
-       "[5819079 rows x 31 columns]"
-      ]
-     },
-     "execution_count": 4,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[3]flights.csv\"\n",
-    "read_file(file_name)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "677ad1b9",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_memory_stat_by_column(df, output_file):\n",
-    "    # вывод пар: колонка - тип данных\n",
-    "    memory_usage_stat = df.memory_usage(deep=True)\n",
-    "    # суммарный размер\n",
-    "    total_memory_usage = memory_usage_stat.sum()\n",
-    "    result = {\n",
-    "        \"file_in_memory_size\": f\"{int(total_memory_usage // 1024):10} KB\",\n",
-    "        \"columns\": []\n",
-    "    }\n",
-    "    # проходимся по колонкам, записываем в список\n",
-    "    for key in df.dtypes.keys():\n",
-    "        result[\"columns\"].append({\n",
-    "            \"column_name\": key,\n",
-    "            \"memory_abs\": int(memory_usage_stat[key] // 1024),\n",
-    "            \"memory_per\": round(memory_usage_stat[key] / total_memory_usage * 100, 4),\n",
-    "            \"dtype\": str(df.dtypes[key])\n",
-    "        })\n",
-    "    # отсортируем колонки\n",
-    "    result[\"columns\"].sort(key=lambda x: x['memory_abs'], reverse=True)\n",
-    "    # Запись в файл JSON\n",
-    "    with open(output_file, 'w') as file:\n",
-    "        json.dump(result, file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "id": "9194376e",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_18048/4262810685.py:2: DtypeWarning: Columns (7,8) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  dataset = read_file(file_name)\n"
-     ]
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[3]flights.csv\"\n",
-    "dataset = read_file(file_name)\n",
-    "output_file = \"результаты_3.json\"\n",
-    "get_memory_stat_by_column(dataset, output_file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "id": "e1469615",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Считает объем памяти до и после преобразований\n",
-    "def mem_usage(pandas_obj):\n",
-    "    if isinstance(pandas_obj, pd.DataFrame):\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True).sum()\n",
-    "    else: # предположим, что если это не дадафрейм, то серия\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True)\n",
-    "    usage_mb = usage_b / 1024 ** 2 # преобразуем быйты в мегабайты\n",
-    "    return \"{:03.2f} MB\".format(usage_mb)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "id": "4be4a3e7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 4. Преобразовать все колонки с типом данных «object» в категориальные, \n",
-    "#    если количество уникальных значений колонки составляет менее 50%."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "id": "4463d7a7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def opt_obj(df):\n",
-    "    converted_obj = pd.DataFrame()\n",
-    "    dataset_obj = df.select_dtypes(include=['object']).copy()\n",
-    "    for col in dataset_obj.columns:\n",
-    "        num_unique_values = len(dataset_obj[col].unique())\n",
-    "        num_total_values = len(dataset_obj[col])\n",
-    "        if num_unique_values / num_total_values < 0.5:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col].astype('category')\n",
-    "        else:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col]\n",
-    "    print(mem_usage(dataset_obj))\n",
-    "    print(mem_usage(converted_obj))\n",
-    "    return converted_obj    "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "id": "2b0ee9bc",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "1501.45 MB\n",
-      "44.97 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_obj = opt_obj(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "id": "9558be52",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 5.Провести понижающее преобразование для столбцов типов «int» колонок\n",
-    "def opt_int(df):\n",
-    "    dataset_int = df.select_dtypes(include=['int']) # выбираем колонки типа int\n",
-    "    \"\"\"\n",
-    "    downcast:\n",
-    "            - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n",
-    "            - 'unsigned': smallest unsigned int dtype (min.: np.int8)\n",
-    "            - 'float': smallest float dtype (min.: np.float32)\n",
-    "    \"\"\"\n",
-    "    converted_int = dataset_int.apply(pd.to_numeric, downcast='unsigned')\n",
-    "    print(mem_usage(dataset_int))\n",
-    "    print(mem_usage(converted_int))\n",
-    "    compare_ints = pd.concat([dataset_int.dtypes, converted_int.dtypes], axis=1)\n",
-    "    compare_ints.columns = ['before', 'after']\n",
-    "    compare_ints.apply(pd.Series.value_counts)\n",
-    "    print(compare_ints)\n",
-    "    return converted_int"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "id": "41ccfc55",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "443.96 MB\n",
-      "83.24 MB\n",
-      "                    before   after\n",
-      "YEAR                 int64  uint16\n",
-      "MONTH                int64   uint8\n",
-      "DAY                  int64   uint8\n",
-      "DAY_OF_WEEK          int64   uint8\n",
-      "FLIGHT_NUMBER        int64  uint16\n",
-      "SCHEDULED_DEPARTURE  int64  uint16\n",
-      "DISTANCE             int64  uint16\n",
-      "SCHEDULED_ARRIVAL    int64  uint16\n",
-      "DIVERTED             int64   uint8\n",
-      "CANCELLED            int64   uint8\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_int = opt_int(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "id": "f29d14a0",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 6. Провести понижающее преобразование для столбцов типов «float» колонок\n",
-    "def opt_float(df):\n",
-    "    dataset_float = df.select_dtypes(include=['float'])\n",
-    "    converted_float = dataset_float.apply(pd.to_numeric, downcast='float')\n",
-    "    print(mem_usage(dataset_float))\n",
-    "    print(mem_usage(converted_float))\n",
-    "    compare_float = pd.concat([dataset_float.dtypes, converted_float.dtypes], axis=1)\n",
-    "    compare_float.columns = ['before', 'after']\n",
-    "    compare_float.apply(pd.Series.value_counts)\n",
-    "    print(compare_float)\n",
-    "    return converted_float"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "id": "94de85bb",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "710.34 MB\n",
-      "355.17 MB\n",
-      "                      before    after\n",
-      "DEPARTURE_TIME       float64  float32\n",
-      "DEPARTURE_DELAY      float64  float32\n",
-      "TAXI_OUT             float64  float32\n",
-      "WHEELS_OFF           float64  float32\n",
-      "SCHEDULED_TIME       float64  float32\n",
-      "ELAPSED_TIME         float64  float32\n",
-      "AIR_TIME             float64  float32\n",
-      "WHEELS_ON            float64  float32\n",
-      "TAXI_IN              float64  float32\n",
-      "ARRIVAL_TIME         float64  float32\n",
-      "ARRIVAL_DELAY        float64  float32\n",
-      "AIR_SYSTEM_DELAY     float64  float32\n",
-      "SECURITY_DELAY       float64  float32\n",
-      "AIRLINE_DELAY        float64  float32\n",
-      "LATE_AIRCRAFT_DELAY  float64  float32\n",
-      "WEATHER_DELAY        float64  float32\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_float = opt_float(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "id": "75744269",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2655.75 MB\n",
-      "483.39 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# 7. Повторно провести анализ набора данных, как в п. 2, сравнив показатели занимаемой памяти\n",
-    "# Создаем копию исходного датафрейма\n",
-    "optimized_dataset = dataset.copy()\n",
-    "\n",
-    "# заменяем исходные числовые столбцы оптмизированными\n",
-    "optimized_dataset[converted_obj.columns] = converted_obj\n",
-    "optimized_dataset[converted_int.columns] = converted_int\n",
-    "optimized_dataset[converted_float.columns] = converted_float\n",
-    "\n",
-    "print(mem_usage(dataset))\n",
-    "print(mem_usage(optimized_dataset))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "e7dd9ff6",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 8. Выбрать произвольно 10 колонок для дальнейшем работы, \n",
-    "#    прописав преобразование типов и загрузку только нужных данных на этапе чтения файла. \n",
-    "#    При этом стоит использовать чанки. Сохраните полученный поднабор в отдельном файле."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "id": "1477da15",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "MONTH:uint8\n",
-      "DAY_OF_WEEK:uint8\n",
-      "AIRLINE:category\n",
-      "ORIGIN_AIRPORT:category\n",
-      "DEPARTURE_TIME:float32\n",
-      "SCHEDULED_TIME:float32\n",
-      "FLIGHT_NUMBER:uint16\n",
-      "DIVERTED:uint8\n",
-      "TAIL_NUMBER:category\n",
-      "DESTINATION_AIRPORT:category\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "2.49 MB\n",
-      "0.94 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "need_column = dict()\n",
-    "column_names = ['MONTH', 'DAY_OF_WEEK', 'AIRLINE',\n",
-    "           'ORIGIN_AIRPORT', 'DEPARTURE_TIME', 'SCHEDULED_TIME',\n",
-    "           'FLIGHT_NUMBER', 'DIVERTED', 'TAIL_NUMBER', 'DESTINATION_AIRPORT']\n",
-    "\n",
-    "opt_dtypes = optimized_dataset.dtypes\n",
-    "\n",
-    "for key in column_names:\n",
-    "    need_column[key] = opt_dtypes[key]\n",
-    "    print(f\"{key}:{opt_dtypes[key]}\")\n",
-    "\n",
-    "with open(\"dtypes_3.json\", mode=\"w\") as file:\n",
-    "    dtype_json = need_column.copy()\n",
-    "    for key in dtype_json.keys():\n",
-    "        dtype_json[key] = str(dtype_json[key])\n",
-    "    json.dump(dtype_json, file)\n",
-    "    \n",
-    "# Работа с чанкам\n",
-    "has_header = True\n",
-    "for chunk in pd.read_csv(file_name,\n",
-    "                         usecols=lambda x: x in column_names,\n",
-    "                         dtype=need_column,\n",
-    "                         #parse_dates=['date'],\n",
-    "                         #infer_datetime_format=True,\n",
-    "                         chunksize=100_000):\n",
-    "    # любые преобразования\n",
-    "    print(mem_usage(chunk))\n",
-    "    chunk.to_csv('df_3.csv', mode='a', header=has_header)\n",
-    "    has_header = False"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 20,
-   "id": "2f5e6c84",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "<class 'pandas.core.frame.DataFrame'>\n",
-      "RangeIndex: 5819079 entries, 0 to 5819078\n",
-      "Data columns (total 10 columns):\n",
-      " #   Column               Dtype   \n",
-      "---  ------               -----   \n",
-      " 0   MONTH                uint8   \n",
-      " 1   DAY_OF_WEEK          uint8   \n",
-      " 2   AIRLINE              category\n",
-      " 3   FLIGHT_NUMBER        uint16  \n",
-      " 4   TAIL_NUMBER          category\n",
-      " 5   ORIGIN_AIRPORT       category\n",
-      " 6   DESTINATION_AIRPORT  category\n",
-      " 7   DEPARTURE_TIME       float32 \n",
-      " 8   SCHEDULED_TIME       float32 \n",
-      " 9   DIVERTED             uint8   \n",
-      "dtypes: category(4), float32(2), uint16(1), uint8(3)\n",
-      "memory usage: 111.6 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# сохраняем информацию о типах, коорые нам нужны. Необходимо для графиков.\n",
-    "def read_types(file_name):\n",
-    "    dtypes = {}\n",
-    "    with open(file_name, mode='r') as file:\n",
-    "        dtypes = json.load(file)\n",
-    "    for key in dtypes.keys():\n",
-    "        if dtypes[key] == 'category':\n",
-    "            dtypes[key] = pd.CategoricalDtype\n",
-    "        else:\n",
-    "            dtypes[key] = np.dtype(dtypes[key])\n",
-    "    return dtypes\n",
-    "\n",
-    "need_dtypes = read_types(\"dtypes_3.json\")\n",
-    "\n",
-    "dataset = pd.read_csv(\"df_3.csv\",\n",
-    "                  usecols=lambda x: x in need_dtypes.keys(),\n",
-    "                  dtype=need_column)\n",
-    "                  #parse_dates=['date'])\n",
-    "dataset.info(memory_usage='deep')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 25,
-   "id": "35c7de56",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График столбчатой диаграммы для количества полетов по дням недели\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.countplot(x='DAY_OF_WEEK', data=dataset)\n",
-    "plt.xlabel('День недели')\n",
-    "plt.ylabel('Количество полетов')\n",
-    "plt.title('Количество полетов по дням недели')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 26,
-   "id": "62af0520",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График круговой диаграммы для распределения авиакомпаний\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "dataset['AIRLINE'].value_counts().plot(kind='pie', autopct='%1.1f%%')\n",
-    "plt.ylabel('')\n",
-    "plt.title('Распределение авиакомпаний')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 27,
-   "id": "4b12510c",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Линейный график для изменения времени вылета по месяцам\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.lineplot(x='MONTH', y='DEPARTURE_TIME', data=dataset)\n",
-    "plt.xlabel('Месяц')\n",
-    "plt.ylabel('Время вылета')\n",
-    "plt.title('Изменение времени вылета по месяцам')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 28,
-   "id": "6284c18e",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Гистограмма для распределения продолжительности запланированного времени\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.histplot(dataset['SCHEDULED_TIME'], bins=20)\n",
-    "plt.xlabel('Продолжительность запланированного времени')\n",
-    "plt.ylabel('Количество полетов')\n",
-    "plt.title('Распределение продолжительности запланированного времени')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 29,
-   "id": "7dba08b0",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 2 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Корреляционная матрица для связи различных числовых переменных\n",
-    "numerical_vars = ['DEPARTURE_TIME', 'SCHEDULED_TIME', 'FLIGHT_NUMBER']\n",
-    "correlation_matrix = dataset[numerical_vars].corr()\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
-    "plt.title('Корреляционная матрица')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "74c29403",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.9.7"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
Index: Задача 1.ipynb
===================================================================
diff --git a/Задача 1.ipynb b/Задача 1.ipynb
deleted file mode 100644
--- a/Задача 1.ipynb	
+++ /dev/null	
@@ -1,1605 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "0ce40138",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import numpy as np\n",
-    "import os\n",
-    "import seaborn as sns"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "2f13d169",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "pd.set_option(\"display.max_rows\", 20, \"display.max_columns\", 60)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "db6c1bd8",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def read_file(file_name):\n",
-    "    return pd.read_csv(file_name)\n",
-    "    # для заархивированных файлов\n",
-    "    # df = pd.read_csv(dataset[year], chunksize=chanksize, compression='gzip')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "d24871de",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_13428/1551661027.py:2: DtypeWarning: Columns (12,13,14,15,19,20,81,83,85,87,93,94,95,96,97,98,99,100,105,106,108,109,111,112,114,115,117,118,120,121,123,124,126,127,129,130,132,133,135,136,138,139,141,142,144,145,147,148,150,151,153,154,156,157,160) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  read_file(file_name)\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>date</th>\n",
-       "      <th>number_of_game</th>\n",
-       "      <th>day_of_week</th>\n",
-       "      <th>v_name</th>\n",
-       "      <th>v_league</th>\n",
-       "      <th>v_game_number</th>\n",
-       "      <th>h_name</th>\n",
-       "      <th>h_league</th>\n",
-       "      <th>h_game_number</th>\n",
-       "      <th>v_score</th>\n",
-       "      <th>h_score</th>\n",
-       "      <th>length_outs</th>\n",
-       "      <th>day_night</th>\n",
-       "      <th>completion</th>\n",
-       "      <th>forefeit</th>\n",
-       "      <th>protest</th>\n",
-       "      <th>park_id</th>\n",
-       "      <th>attendance</th>\n",
-       "      <th>length_minutes</th>\n",
-       "      <th>v_line_score</th>\n",
-       "      <th>h_line_score</th>\n",
-       "      <th>v_at_bats</th>\n",
-       "      <th>v_hits</th>\n",
-       "      <th>v_doubles</th>\n",
-       "      <th>v_triples</th>\n",
-       "      <th>v_homeruns</th>\n",
-       "      <th>v_rbi</th>\n",
-       "      <th>v_sacrifice_hits</th>\n",
-       "      <th>v_sacrifice_flies</th>\n",
-       "      <th>v_hit_by_pitch</th>\n",
-       "      <th>...</th>\n",
-       "      <th>v_player_9_def_pos</th>\n",
-       "      <th>h_player_1_id</th>\n",
-       "      <th>h_player_1_name</th>\n",
-       "      <th>h_player_1_def_pos</th>\n",
-       "      <th>h_player_2_id</th>\n",
-       "      <th>h_player_2_name</th>\n",
-       "      <th>h_player_2_def_pos</th>\n",
-       "      <th>h_player_3_id</th>\n",
-       "      <th>h_player_3_name</th>\n",
-       "      <th>h_player_3_def_pos</th>\n",
-       "      <th>h_player_4_id</th>\n",
-       "      <th>h_player_4_name</th>\n",
-       "      <th>h_player_4_def_pos</th>\n",
-       "      <th>h_player_5_id</th>\n",
-       "      <th>h_player_5_name</th>\n",
-       "      <th>h_player_5_def_pos</th>\n",
-       "      <th>h_player_6_id</th>\n",
-       "      <th>h_player_6_name</th>\n",
-       "      <th>h_player_6_def_pos</th>\n",
-       "      <th>h_player_7_id</th>\n",
-       "      <th>h_player_7_name</th>\n",
-       "      <th>h_player_7_def_pos</th>\n",
-       "      <th>h_player_8_id</th>\n",
-       "      <th>h_player_8_name</th>\n",
-       "      <th>h_player_8_def_pos</th>\n",
-       "      <th>h_player_9_id</th>\n",
-       "      <th>h_player_9_name</th>\n",
-       "      <th>h_player_9_def_pos</th>\n",
-       "      <th>additional_info</th>\n",
-       "      <th>acquisition_info</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>18710504</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Thu</td>\n",
-       "      <td>CL1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>1</td>\n",
-       "      <td>FW1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>1</td>\n",
-       "      <td>0</td>\n",
-       "      <td>2</td>\n",
-       "      <td>54.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>FOR01</td>\n",
-       "      <td>200.0</td>\n",
-       "      <td>120.0</td>\n",
-       "      <td>000000000</td>\n",
-       "      <td>010010000</td>\n",
-       "      <td>30.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>selmf101</td>\n",
-       "      <td>Frank Sellman</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>mathb101</td>\n",
-       "      <td>Bobby Mathews</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>foraj101</td>\n",
-       "      <td>Jim Foran</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>goldw101</td>\n",
-       "      <td>Wally Goldsmith</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>lennb101</td>\n",
-       "      <td>Bill Lennon</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>caret101</td>\n",
-       "      <td>Tom Carey</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>mince101</td>\n",
-       "      <td>Ed Mincher</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>mcdej101</td>\n",
-       "      <td>James McDermott</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>kellb105</td>\n",
-       "      <td>Bill Kelly</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>18710505</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Fri</td>\n",
-       "      <td>BS1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>1</td>\n",
-       "      <td>WS3</td>\n",
-       "      <td>na</td>\n",
-       "      <td>1</td>\n",
-       "      <td>20</td>\n",
-       "      <td>18</td>\n",
-       "      <td>54.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>WAS01</td>\n",
-       "      <td>5000.0</td>\n",
-       "      <td>145.0</td>\n",
-       "      <td>107000435</td>\n",
-       "      <td>640113030</td>\n",
-       "      <td>41.0</td>\n",
-       "      <td>13.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>13.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>watef102</td>\n",
-       "      <td>Fred Waterman</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>forcd101</td>\n",
-       "      <td>Davy Force</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>mille105</td>\n",
-       "      <td>Everett Mills</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>allid101</td>\n",
-       "      <td>Doug Allison</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>hallg101</td>\n",
-       "      <td>George Hall</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>leona101</td>\n",
-       "      <td>Andy Leonard</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>braia102</td>\n",
-       "      <td>Asa Brainard</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>burrh101</td>\n",
-       "      <td>Henry Burroughs</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>berth101</td>\n",
-       "      <td>Henry Berthrong</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>HTBF</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>18710506</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Sat</td>\n",
-       "      <td>CL1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>2</td>\n",
-       "      <td>RC1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>1</td>\n",
-       "      <td>12</td>\n",
-       "      <td>4</td>\n",
-       "      <td>54.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>RCK01</td>\n",
-       "      <td>1000.0</td>\n",
-       "      <td>140.0</td>\n",
-       "      <td>610020003</td>\n",
-       "      <td>010020100</td>\n",
-       "      <td>49.0</td>\n",
-       "      <td>11.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>mackd101</td>\n",
-       "      <td>Denny Mack</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>addyb101</td>\n",
-       "      <td>Bob Addy</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>fishc102</td>\n",
-       "      <td>Cherokee Fisher</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>hasts101</td>\n",
-       "      <td>Scott Hastings</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>ham-r101</td>\n",
-       "      <td>Ralph Ham</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>ansoc101</td>\n",
-       "      <td>Cap Anson</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>sagep101</td>\n",
-       "      <td>Pony Sager</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>birdg101</td>\n",
-       "      <td>George Bird</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>stirg101</td>\n",
-       "      <td>Gat Stires</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>18710508</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Mon</td>\n",
-       "      <td>CL1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>3</td>\n",
-       "      <td>CH1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>1</td>\n",
-       "      <td>12</td>\n",
-       "      <td>14</td>\n",
-       "      <td>54.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>CHI01</td>\n",
-       "      <td>5000.0</td>\n",
-       "      <td>150.0</td>\n",
-       "      <td>101403111</td>\n",
-       "      <td>077000000</td>\n",
-       "      <td>46.0</td>\n",
-       "      <td>15.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>10.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>mcatb101</td>\n",
-       "      <td>Bub McAtee</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>kingm101</td>\n",
-       "      <td>Marshall King</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>hodec101</td>\n",
-       "      <td>Charlie Hodes</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>woodj106</td>\n",
-       "      <td>Jimmy Wood</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>simmj101</td>\n",
-       "      <td>Joe Simmons</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>folet101</td>\n",
-       "      <td>Tom Foley</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>duffe101</td>\n",
-       "      <td>Ed Duffy</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>pinke101</td>\n",
-       "      <td>Ed Pinkham</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>zettg101</td>\n",
-       "      <td>George Zettlein</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>18710509</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Tue</td>\n",
-       "      <td>BS1</td>\n",
-       "      <td>na</td>\n",
-       "      <td>2</td>\n",
-       "      <td>TRO</td>\n",
-       "      <td>na</td>\n",
-       "      <td>1</td>\n",
-       "      <td>9</td>\n",
-       "      <td>5</td>\n",
-       "      <td>54.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>TRO01</td>\n",
-       "      <td>3250.0</td>\n",
-       "      <td>145.0</td>\n",
-       "      <td>000002232</td>\n",
-       "      <td>101003000</td>\n",
-       "      <td>46.0</td>\n",
-       "      <td>17.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>flync101</td>\n",
-       "      <td>Clipper Flynn</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>mcgem101</td>\n",
-       "      <td>Mike McGeary</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>yorkt101</td>\n",
-       "      <td>Tom York</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>mcmuj101</td>\n",
-       "      <td>John McMullin</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>kings101</td>\n",
-       "      <td>Steve King</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>beave101</td>\n",
-       "      <td>Edward Beavens</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>bells101</td>\n",
-       "      <td>Steve Bellan</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>pikel101</td>\n",
-       "      <td>Lip Pike</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>cravb101</td>\n",
-       "      <td>Bill Craver</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>HTBF</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>171902</th>\n",
-       "      <td>20161002</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Sun</td>\n",
-       "      <td>MIL</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>COL</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>6</td>\n",
-       "      <td>4</td>\n",
-       "      <td>60.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>DEN02</td>\n",
-       "      <td>27762.0</td>\n",
-       "      <td>203.0</td>\n",
-       "      <td>0200000202</td>\n",
-       "      <td>1100100010</td>\n",
-       "      <td>39.0</td>\n",
-       "      <td>10.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>blacc001</td>\n",
-       "      <td>Charlie Blackmon</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>dahld001</td>\n",
-       "      <td>David Dahl</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>arenn001</td>\n",
-       "      <td>Nolan Arenado</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>gonzc001</td>\n",
-       "      <td>Carlos Gonzalez</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>murpt002</td>\n",
-       "      <td>Tom Murphy</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>pattj005</td>\n",
-       "      <td>Jordan Patterson</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>valap001</td>\n",
-       "      <td>Pat Valaika</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>adamc001</td>\n",
-       "      <td>Cristhian Adames</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>marqg001</td>\n",
-       "      <td>German Marquez</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>171903</th>\n",
-       "      <td>20161002</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Sun</td>\n",
-       "      <td>NYN</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>PHI</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>2</td>\n",
-       "      <td>5</td>\n",
-       "      <td>51.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>PHI13</td>\n",
-       "      <td>36935.0</td>\n",
-       "      <td>159.0</td>\n",
-       "      <td>000001100</td>\n",
-       "      <td>00100031x</td>\n",
-       "      <td>33.0</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>hernc005</td>\n",
-       "      <td>Cesar Hernandez</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>parej002</td>\n",
-       "      <td>Jimmy Paredes</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>herro001</td>\n",
-       "      <td>Odubel Herrera</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>franm004</td>\n",
-       "      <td>Maikel Franco</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>howar001</td>\n",
-       "      <td>Ryan Howard</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>ruppc001</td>\n",
-       "      <td>Cameron Rupp</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>blana001</td>\n",
-       "      <td>Andres Blanco</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>altha001</td>\n",
-       "      <td>Aaron Altherr</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>eickj001</td>\n",
-       "      <td>Jerad Eickhoff</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>171904</th>\n",
-       "      <td>20161002</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Sun</td>\n",
-       "      <td>LAN</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>SFN</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>1</td>\n",
-       "      <td>7</td>\n",
-       "      <td>51.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>SFO03</td>\n",
-       "      <td>41445.0</td>\n",
-       "      <td>184.0</td>\n",
-       "      <td>000100000</td>\n",
-       "      <td>23000002x</td>\n",
-       "      <td>30.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>spand001</td>\n",
-       "      <td>Denard Span</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>beltb001</td>\n",
-       "      <td>Brandon Belt</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>poseb001</td>\n",
-       "      <td>Buster Posey</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>pench001</td>\n",
-       "      <td>Hunter Pence</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>crawb001</td>\n",
-       "      <td>Brandon Crawford</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>pagaa001</td>\n",
-       "      <td>Angel Pagan</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>panij002</td>\n",
-       "      <td>Joe Panik</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>gillc001</td>\n",
-       "      <td>Conor Gillaspie</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>moorm003</td>\n",
-       "      <td>Matt Moore</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>171905</th>\n",
-       "      <td>20161002</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Sun</td>\n",
-       "      <td>PIT</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>SLN</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>4</td>\n",
-       "      <td>10</td>\n",
-       "      <td>51.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>STL10</td>\n",
-       "      <td>44615.0</td>\n",
-       "      <td>192.0</td>\n",
-       "      <td>000020200</td>\n",
-       "      <td>00100360x</td>\n",
-       "      <td>35.0</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>carpm002</td>\n",
-       "      <td>Matt Carpenter</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>diaza003</td>\n",
-       "      <td>Aledmys Diaz</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>moliy001</td>\n",
-       "      <td>Yadier Molina</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>piscs001</td>\n",
-       "      <td>Stephen Piscotty</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>peraj001</td>\n",
-       "      <td>Jhonny Peralta</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>mossb001</td>\n",
-       "      <td>Brandon Moss</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>gyorj001</td>\n",
-       "      <td>Jedd Gyorko</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>gricr001</td>\n",
-       "      <td>Randal Grichuk</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>waina001</td>\n",
-       "      <td>Adam Wainwright</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>171906</th>\n",
-       "      <td>20161002</td>\n",
-       "      <td>0</td>\n",
-       "      <td>Sun</td>\n",
-       "      <td>MIA</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>161</td>\n",
-       "      <td>WAS</td>\n",
-       "      <td>NL</td>\n",
-       "      <td>162</td>\n",
-       "      <td>7</td>\n",
-       "      <td>10</td>\n",
-       "      <td>51.0</td>\n",
-       "      <td>D</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>WAS11</td>\n",
-       "      <td>28730.0</td>\n",
-       "      <td>216.0</td>\n",
-       "      <td>000230020</td>\n",
-       "      <td>03023002x</td>\n",
-       "      <td>38.0</td>\n",
-       "      <td>14.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>turnt001</td>\n",
-       "      <td>Trea Turner</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>reveb001</td>\n",
-       "      <td>Ben Revere</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>harpb003</td>\n",
-       "      <td>Bryce Harper</td>\n",
-       "      <td>9.0</td>\n",
-       "      <td>zimmr001</td>\n",
-       "      <td>Ryan Zimmerman</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>drews001</td>\n",
-       "      <td>Stephen Drew</td>\n",
-       "      <td>5.0</td>\n",
-       "      <td>difow001</td>\n",
-       "      <td>Wilmer Difo</td>\n",
-       "      <td>4.0</td>\n",
-       "      <td>espid001</td>\n",
-       "      <td>Danny Espinosa</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>lobaj001</td>\n",
-       "      <td>Jose Lobaton</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>schem001</td>\n",
-       "      <td>Max Scherzer</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Y</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>171907 rows × 161 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "            date  number_of_game day_of_week v_name v_league  v_game_number  \\\n",
-       "0       18710504               0         Thu    CL1       na              1   \n",
-       "1       18710505               0         Fri    BS1       na              1   \n",
-       "2       18710506               0         Sat    CL1       na              2   \n",
-       "3       18710508               0         Mon    CL1       na              3   \n",
-       "4       18710509               0         Tue    BS1       na              2   \n",
-       "...          ...             ...         ...    ...      ...            ...   \n",
-       "171902  20161002               0         Sun    MIL       NL            162   \n",
-       "171903  20161002               0         Sun    NYN       NL            162   \n",
-       "171904  20161002               0         Sun    LAN       NL            162   \n",
-       "171905  20161002               0         Sun    PIT       NL            162   \n",
-       "171906  20161002               0         Sun    MIA       NL            161   \n",
-       "\n",
-       "       h_name h_league  h_game_number  v_score  h_score  length_outs  \\\n",
-       "0         FW1       na              1        0        2         54.0   \n",
-       "1         WS3       na              1       20       18         54.0   \n",
-       "2         RC1       na              1       12        4         54.0   \n",
-       "3         CH1       na              1       12       14         54.0   \n",
-       "4         TRO       na              1        9        5         54.0   \n",
-       "...       ...      ...            ...      ...      ...          ...   \n",
-       "171902    COL       NL            162        6        4         60.0   \n",
-       "171903    PHI       NL            162        2        5         51.0   \n",
-       "171904    SFN       NL            162        1        7         51.0   \n",
-       "171905    SLN       NL            162        4       10         51.0   \n",
-       "171906    WAS       NL            162        7       10         51.0   \n",
-       "\n",
-       "       day_night completion forefeit protest park_id  attendance  \\\n",
-       "0              D        NaN      NaN     NaN   FOR01       200.0   \n",
-       "1              D        NaN      NaN     NaN   WAS01      5000.0   \n",
-       "2              D        NaN      NaN     NaN   RCK01      1000.0   \n",
-       "3              D        NaN      NaN     NaN   CHI01      5000.0   \n",
-       "4              D        NaN      NaN     NaN   TRO01      3250.0   \n",
-       "...          ...        ...      ...     ...     ...         ...   \n",
-       "171902         D        NaN      NaN     NaN   DEN02     27762.0   \n",
-       "171903         D        NaN      NaN     NaN   PHI13     36935.0   \n",
-       "171904         D        NaN      NaN     NaN   SFO03     41445.0   \n",
-       "171905         D        NaN      NaN     NaN   STL10     44615.0   \n",
-       "171906         D        NaN      NaN     NaN   WAS11     28730.0   \n",
-       "\n",
-       "        length_minutes v_line_score h_line_score  v_at_bats  v_hits  \\\n",
-       "0                120.0    000000000    010010000       30.0     4.0   \n",
-       "1                145.0    107000435    640113030       41.0    13.0   \n",
-       "2                140.0    610020003    010020100       49.0    11.0   \n",
-       "3                150.0    101403111    077000000       46.0    15.0   \n",
-       "4                145.0    000002232    101003000       46.0    17.0   \n",
-       "...                ...          ...          ...        ...     ...   \n",
-       "171902           203.0   0200000202   1100100010       39.0    10.0   \n",
-       "171903           159.0    000001100    00100031x       33.0     8.0   \n",
-       "171904           184.0    000100000    23000002x       30.0     4.0   \n",
-       "171905           192.0    000020200    00100360x       35.0     9.0   \n",
-       "171906           216.0    000230020    03023002x       38.0    14.0   \n",
-       "\n",
-       "        v_doubles  v_triples  v_homeruns  v_rbi  v_sacrifice_hits  \\\n",
-       "0             1.0        0.0         0.0    0.0               0.0   \n",
-       "1             1.0        2.0         0.0   13.0               0.0   \n",
-       "2             1.0        1.0         0.0    8.0               0.0   \n",
-       "3             2.0        1.0         2.0   10.0               0.0   \n",
-       "4             4.0        1.0         0.0    6.0               0.0   \n",
-       "...           ...        ...         ...    ...               ...   \n",
-       "171902        4.0        1.0         2.0    6.0               0.0   \n",
-       "171903        3.0        0.0         0.0    2.0               0.0   \n",
-       "171904        0.0        0.0         0.0    1.0               0.0   \n",
-       "171905        0.0        0.0         1.0    4.0               0.0   \n",
-       "171906        1.0        1.0         2.0    7.0               1.0   \n",
-       "\n",
-       "        v_sacrifice_flies  v_hit_by_pitch  ...  v_player_9_def_pos  \\\n",
-       "0                     0.0             0.0  ...                 6.0   \n",
-       "1                     0.0             0.0  ...                 1.0   \n",
-       "2                     0.0             0.0  ...                 6.0   \n",
-       "3                     0.0             0.0  ...                 6.0   \n",
-       "4                     0.0             0.0  ...                 1.0   \n",
-       "...                   ...             ...  ...                 ...   \n",
-       "171902                0.0             1.0  ...                 1.0   \n",
-       "171903                0.0             0.0  ...                 1.0   \n",
-       "171904                0.0             0.0  ...                 1.0   \n",
-       "171905                0.0             0.0  ...                 1.0   \n",
-       "171906                0.0             0.0  ...                 1.0   \n",
-       "\n",
-       "        h_player_1_id   h_player_1_name  h_player_1_def_pos  h_player_2_id  \\\n",
-       "0            selmf101     Frank Sellman                 5.0       mathb101   \n",
-       "1            watef102     Fred Waterman                 5.0       forcd101   \n",
-       "2            mackd101        Denny Mack                 3.0       addyb101   \n",
-       "3            mcatb101        Bub McAtee                 3.0       kingm101   \n",
-       "4            flync101     Clipper Flynn                 9.0       mcgem101   \n",
-       "...               ...               ...                 ...            ...   \n",
-       "171902       blacc001  Charlie Blackmon                 8.0       dahld001   \n",
-       "171903       hernc005   Cesar Hernandez                 4.0       parej002   \n",
-       "171904       spand001       Denard Span                 8.0       beltb001   \n",
-       "171905       carpm002    Matt Carpenter                 3.0       diaza003   \n",
-       "171906       turnt001       Trea Turner                 8.0       reveb001   \n",
-       "\n",
-       "        h_player_2_name  h_player_2_def_pos  h_player_3_id  h_player_3_name  \\\n",
-       "0         Bobby Mathews                 1.0       foraj101        Jim Foran   \n",
-       "1            Davy Force                 6.0       mille105    Everett Mills   \n",
-       "2              Bob Addy                 4.0       fishc102  Cherokee Fisher   \n",
-       "3         Marshall King                 8.0       hodec101    Charlie Hodes   \n",
-       "4          Mike McGeary                 2.0       yorkt101         Tom York   \n",
-       "...                 ...                 ...            ...              ...   \n",
-       "171902       David Dahl                 7.0       arenn001    Nolan Arenado   \n",
-       "171903    Jimmy Paredes                 7.0       herro001   Odubel Herrera   \n",
-       "171904     Brandon Belt                 3.0       poseb001     Buster Posey   \n",
-       "171905     Aledmys Diaz                 6.0       moliy001    Yadier Molina   \n",
-       "171906       Ben Revere                 7.0       harpb003     Bryce Harper   \n",
-       "\n",
-       "        h_player_3_def_pos  h_player_4_id   h_player_4_name  \\\n",
-       "0                      3.0       goldw101   Wally Goldsmith   \n",
-       "1                      3.0       allid101      Doug Allison   \n",
-       "2                      1.0       hasts101    Scott Hastings   \n",
-       "3                      2.0       woodj106        Jimmy Wood   \n",
-       "4                      8.0       mcmuj101     John McMullin   \n",
-       "...                    ...            ...               ...   \n",
-       "171902                 5.0       gonzc001   Carlos Gonzalez   \n",
-       "171903                 8.0       franm004     Maikel Franco   \n",
-       "171904                 2.0       pench001      Hunter Pence   \n",
-       "171905                 2.0       piscs001  Stephen Piscotty   \n",
-       "171906                 9.0       zimmr001    Ryan Zimmerman   \n",
-       "\n",
-       "        h_player_4_def_pos  h_player_5_id   h_player_5_name  \\\n",
-       "0                      6.0       lennb101       Bill Lennon   \n",
-       "1                      2.0       hallg101       George Hall   \n",
-       "2                      8.0       ham-r101         Ralph Ham   \n",
-       "3                      4.0       simmj101       Joe Simmons   \n",
-       "4                      1.0       kings101        Steve King   \n",
-       "...                    ...            ...               ...   \n",
-       "171902                 9.0       murpt002        Tom Murphy   \n",
-       "171903                 5.0       howar001       Ryan Howard   \n",
-       "171904                 9.0       crawb001  Brandon Crawford   \n",
-       "171905                 9.0       peraj001    Jhonny Peralta   \n",
-       "171906                 3.0       drews001      Stephen Drew   \n",
-       "\n",
-       "        h_player_5_def_pos  h_player_6_id   h_player_6_name  \\\n",
-       "0                      2.0       caret101         Tom Carey   \n",
-       "1                      7.0       leona101      Andy Leonard   \n",
-       "2                      5.0       ansoc101         Cap Anson   \n",
-       "3                      9.0       folet101         Tom Foley   \n",
-       "4                      7.0       beave101    Edward Beavens   \n",
-       "...                    ...            ...               ...   \n",
-       "171902                 2.0       pattj005  Jordan Patterson   \n",
-       "171903                 3.0       ruppc001      Cameron Rupp   \n",
-       "171904                 6.0       pagaa001       Angel Pagan   \n",
-       "171905                 5.0       mossb001      Brandon Moss   \n",
-       "171906                 5.0       difow001       Wilmer Difo   \n",
-       "\n",
-       "        h_player_6_def_pos  h_player_7_id  h_player_7_name  \\\n",
-       "0                      4.0       mince101       Ed Mincher   \n",
-       "1                      4.0       braia102     Asa Brainard   \n",
-       "2                      2.0       sagep101       Pony Sager   \n",
-       "3                      7.0       duffe101         Ed Duffy   \n",
-       "4                      4.0       bells101     Steve Bellan   \n",
-       "...                    ...            ...              ...   \n",
-       "171902                 3.0       valap001      Pat Valaika   \n",
-       "171903                 2.0       blana001    Andres Blanco   \n",
-       "171904                 7.0       panij002        Joe Panik   \n",
-       "171905                 7.0       gyorj001      Jedd Gyorko   \n",
-       "171906                 4.0       espid001   Danny Espinosa   \n",
-       "\n",
-       "        h_player_7_def_pos  h_player_8_id   h_player_8_name  \\\n",
-       "0                      7.0       mcdej101   James McDermott   \n",
-       "1                      1.0       burrh101   Henry Burroughs   \n",
-       "2                      6.0       birdg101       George Bird   \n",
-       "3                      6.0       pinke101        Ed Pinkham   \n",
-       "4                      5.0       pikel101          Lip Pike   \n",
-       "...                    ...            ...               ...   \n",
-       "171902                 4.0       adamc001  Cristhian Adames   \n",
-       "171903                 6.0       altha001     Aaron Altherr   \n",
-       "171904                 4.0       gillc001   Conor Gillaspie   \n",
-       "171905                 4.0       gricr001    Randal Grichuk   \n",
-       "171906                 6.0       lobaj001      Jose Lobaton   \n",
-       "\n",
-       "        h_player_8_def_pos  h_player_9_id  h_player_9_name  \\\n",
-       "0                      8.0       kellb105       Bill Kelly   \n",
-       "1                      9.0       berth101  Henry Berthrong   \n",
-       "2                      7.0       stirg101       Gat Stires   \n",
-       "3                      5.0       zettg101  George Zettlein   \n",
-       "4                      3.0       cravb101      Bill Craver   \n",
-       "...                    ...            ...              ...   \n",
-       "171902                 6.0       marqg001   German Marquez   \n",
-       "171903                 9.0       eickj001   Jerad Eickhoff   \n",
-       "171904                 5.0       moorm003       Matt Moore   \n",
-       "171905                 8.0       waina001  Adam Wainwright   \n",
-       "171906                 2.0       schem001     Max Scherzer   \n",
-       "\n",
-       "        h_player_9_def_pos  additional_info  acquisition_info  \n",
-       "0                      9.0              NaN                 Y  \n",
-       "1                      8.0             HTBF                 Y  \n",
-       "2                      9.0              NaN                 Y  \n",
-       "3                      1.0              NaN                 Y  \n",
-       "4                      6.0             HTBF                 Y  \n",
-       "...                    ...              ...               ...  \n",
-       "171902                 1.0              NaN                 Y  \n",
-       "171903                 1.0              NaN                 Y  \n",
-       "171904                 1.0              NaN                 Y  \n",
-       "171905                 1.0              NaN                 Y  \n",
-       "171906                 1.0              NaN                 Y  \n",
-       "\n",
-       "[171907 rows x 161 columns]"
-      ]
-     },
-     "execution_count": 4,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[1]game_logs.csv\"\n",
-    "read_file(file_name)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "677ad1b9",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_memory_stat_by_column(df, output_file):\n",
-    "    # вывод пар: колонка - тип данных\n",
-    "    memory_usage_stat = df.memory_usage(deep=True)\n",
-    "    # суммарный размер\n",
-    "    total_memory_usage = memory_usage_stat.sum()\n",
-    "    result = {\n",
-    "        \"file_in_memory_size\": f\"{int(total_memory_usage // 1024):10} KB\",\n",
-    "        \"columns\": []\n",
-    "    }\n",
-    "    # проходимся по колонкам, записываем в список\n",
-    "    for key in df.dtypes.keys():\n",
-    "        result[\"columns\"].append({\n",
-    "            \"column_name\": key,\n",
-    "            \"memory_abs\": int(memory_usage_stat[key] // 1024),\n",
-    "            \"memory_per\": round(memory_usage_stat[key] / total_memory_usage * 100, 4),\n",
-    "            \"dtype\": str(df.dtypes[key])\n",
-    "        })\n",
-    "    # отсортируем колонки\n",
-    "    result[\"columns\"].sort(key=lambda x: x['memory_abs'], reverse=True)\n",
-    "    # Запись в файл JSON\n",
-    "    with open(output_file, 'w') as file:\n",
-    "        json.dump(result, file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "id": "9194376e",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "C:\\Users\\73B5~1\\AppData\\Local\\Temp/ipykernel_13428/867221245.py:2: DtypeWarning: Columns (12,13,14,15,19,20,81,83,85,87,93,94,95,96,97,98,99,100,105,106,108,109,111,112,114,115,117,118,120,121,123,124,126,127,129,130,132,133,135,136,138,139,141,142,144,145,147,148,150,151,153,154,156,157,160) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  dataset = read_file(file_name)\n"
-     ]
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[1]game_logs.csv\"\n",
-    "dataset = read_file(file_name)\n",
-    "output_file = \"результаты_1.json\"\n",
-    "get_memory_stat_by_column(dataset, output_file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "id": "e1469615",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Считает объем памяти до и после преобразований\n",
-    "def mem_usage(pandas_obj):\n",
-    "    if isinstance(pandas_obj, pd.DataFrame):\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True).sum()\n",
-    "    else: # предположим, что если это не дадафрейм, то серия\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True)\n",
-    "    usage_mb = usage_b / 1024 ** 2 # преобразуем быйты в мегабайты\n",
-    "    return \"{:03.2f} MB\".format(usage_mb)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "id": "4be4a3e7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 4. Преобразовать все колонки с типом данных «object» в категориальные, \n",
-    "#    если количество уникальных значений колонки составляет менее 50%."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "id": "4463d7a7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def opt_obj(df):\n",
-    "    converted_obj = pd.DataFrame()\n",
-    "    dataset_obj = df.select_dtypes(include=['object']).copy()\n",
-    "    for col in dataset_obj.columns:\n",
-    "        num_unique_values = len(dataset_obj[col].unique())\n",
-    "        num_total_values = len(dataset_obj[col])\n",
-    "        if num_unique_values / num_total_values < 0.5:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col].astype('category')\n",
-    "        else:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col]\n",
-    "    print(mem_usage(dataset_obj))\n",
-    "    print(mem_usage(converted_obj))\n",
-    "    return converted_obj    "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "id": "2b0ee9bc",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "750.57 MB\n",
-      "49.89 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_obj = opt_obj(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "id": "9558be52",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 5.Провести понижающее преобразование для столбцов типов «int» колонок\n",
-    "def opt_int(df):\n",
-    "    dataset_int = df.select_dtypes(include=['int']) # выбираем колонки типа int\n",
-    "    \"\"\"\n",
-    "    downcast:\n",
-    "            - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n",
-    "            - 'unsigned': smallest unsigned int dtype (min.: np.int8)\n",
-    "            - 'float': smallest float dtype (min.: np.float32)\n",
-    "    \"\"\"\n",
-    "    converted_int = dataset_int.apply(pd.to_numeric, downcast='unsigned')\n",
-    "    print(mem_usage(dataset_int))\n",
-    "    print(mem_usage(converted_int))\n",
-    "    compare_ints = pd.concat([dataset_int.dtypes, converted_int.dtypes], axis=1)\n",
-    "    compare_ints.columns = ['before', 'after']\n",
-    "    compare_ints.apply(pd.Series.value_counts)\n",
-    "    print(compare_ints)\n",
-    "    return converted_int"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "id": "41ccfc55",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "7.87 MB\n",
-      "1.48 MB\n",
-      "               before   after\n",
-      "date            int64  uint32\n",
-      "number_of_game  int64   uint8\n",
-      "v_game_number   int64   uint8\n",
-      "h_game_number   int64   uint8\n",
-      "v_score         int64   uint8\n",
-      "h_score         int64   uint8\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_int = opt_int(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "id": "f29d14a0",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 6. Провести понижающее преобразование для столбцов типов «float» колонок\n",
-    "def opt_float(df):\n",
-    "    dataset_float = df.select_dtypes(include=['float'])\n",
-    "    converted_float = dataset_float.apply(pd.to_numeric, downcast='float')\n",
-    "    print(mem_usage(dataset_float))\n",
-    "    print(mem_usage(converted_float))\n",
-    "    compare_float = pd.concat([dataset_float.dtypes, converted_float.dtypes], axis=1)\n",
-    "    compare_float.columns = ['before', 'after']\n",
-    "    compare_float.apply(pd.Series.value_counts)\n",
-    "    print(compare_float)\n",
-    "    return converted_float"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "id": "94de85bb",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "100.99 MB\n",
-      "50.49 MB\n",
-      "                     before    after\n",
-      "length_outs         float64  float32\n",
-      "attendance          float64  float32\n",
-      "length_minutes      float64  float32\n",
-      "v_at_bats           float64  float32\n",
-      "v_hits              float64  float32\n",
-      "...                     ...      ...\n",
-      "h_player_5_def_pos  float64  float32\n",
-      "h_player_6_def_pos  float64  float32\n",
-      "h_player_7_def_pos  float64  float32\n",
-      "h_player_8_def_pos  float64  float32\n",
-      "h_player_9_def_pos  float64  float32\n",
-      "\n",
-      "[77 rows x 2 columns]\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_float = opt_float(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "id": "75744269",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "859.43 MB\n",
-      "101.86 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# 7. Повторно провести анализ набора данных, как в п. 2, сравнив показатели занимаемой памяти\n",
-    "# Создаем копию исходного датафрейма\n",
-    "optimized_dataset = dataset.copy()\n",
-    "\n",
-    "# заменяем исходные числовые столбцы оптмизированными\n",
-    "optimized_dataset[converted_obj.columns] = converted_obj\n",
-    "optimized_dataset[converted_int.columns] = converted_int\n",
-    "optimized_dataset[converted_float.columns] = converted_float\n",
-    "\n",
-    "print(mem_usage(dataset))\n",
-    "print(mem_usage(optimized_dataset))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "id": "e7dd9ff6",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 8. Выбрать произвольно 10 колонок для дальнейшем работы, \n",
-    "#    прописав преобразование типов и загрузку только нужных данных на этапе чтения файла. \n",
-    "#    При этом стоит использовать чанки. Сохраните полученный поднабор в отдельном файле."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "id": "1477da15",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "date:uint32\n",
-      "number_of_game:uint8\n",
-      "day_of_week:category\n",
-      "park_id:category\n",
-      "v_manager_name:category\n",
-      "length_minutes:float32\n",
-      "v_hits:float32\n",
-      "h_hits:float32\n",
-      "h_walks:float32\n",
-      "h_errors:float32\n",
-      "2.94 MB\n",
-      "2.14 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "need_column = dict()\n",
-    "column_names = ['date', 'number_of_game', 'day_of_week',\n",
-    "           'park_id', 'v_manager_name', 'length_minutes',\n",
-    "           'v_hits', 'h_hits', 'h_walks', 'h_errors']\n",
-    "\n",
-    "opt_dtypes = optimized_dataset.dtypes\n",
-    "\n",
-    "for key in column_names:\n",
-    "    need_column[key] = opt_dtypes[key]\n",
-    "    print(f\"{key}:{opt_dtypes[key]}\")\n",
-    "\n",
-    "with open(\"dtypes_1.json\", mode=\"w\") as file:\n",
-    "    dtype_json = need_column.copy()\n",
-    "    for key in dtype_json.keys():\n",
-    "        dtype_json[key] = str(dtype_json[key])\n",
-    "    json.dump(dtype_json, file)\n",
-    "    \n",
-    "# Работа с чанкам\n",
-    "has_header = True\n",
-    "for chunk in pd.read_csv(file_name,\n",
-    "                         usecols=lambda x: x in column_names,\n",
-    "                         dtype=need_column,\n",
-    "                         #parse_dates=['date'],\n",
-    "                         #infer_datetime_format=True,\n",
-    "                         chunksize=100_000):\n",
-    "    # любые преобразования\n",
-    "    print(mem_usage(chunk))\n",
-    "    chunk.to_csv('df_1.csv', mode='a', header=has_header)\n",
-    "    has_header = False"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 18,
-   "id": "2f5e6c84",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "<class 'pandas.core.frame.DataFrame'>\n",
-      "RangeIndex: 171907 entries, 0 to 171906\n",
-      "Data columns (total 10 columns):\n",
-      " #   Column          Non-Null Count   Dtype         \n",
-      "---  ------          --------------   -----         \n",
-      " 0   date            171907 non-null  datetime64[ns]\n",
-      " 1   number_of_game  171907 non-null  uint8         \n",
-      " 2   day_of_week     171907 non-null  category      \n",
-      " 3   park_id         171907 non-null  category      \n",
-      " 4   length_minutes  136701 non-null  float32       \n",
-      " 5   v_hits          140838 non-null  float32       \n",
-      " 6   h_hits          140838 non-null  float32       \n",
-      " 7   h_walks         140838 non-null  float32       \n",
-      " 8   h_errors        140838 non-null  float32       \n",
-      " 9   v_manager_name  171907 non-null  category      \n",
-      "dtypes: category(3), datetime64[ns](1), float32(5), uint8(1)\n",
-      "memory usage: 5.7 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# сохраняем информацию о типах, коорые нам нужны. Необходимо для графиков.\n",
-    "def read_types(file_name):\n",
-    "    dtypes = {}\n",
-    "    with open(file_name, mode='r') as file:\n",
-    "        dtypes = json.load(file)\n",
-    "    for key in dtypes.keys():\n",
-    "        if dtypes[key] == 'category':\n",
-    "            dtypes[key] = pd.CategoricalDtype\n",
-    "        else:\n",
-    "            dtypes[key] = np.dtype(dtypes[key])\n",
-    "    return dtypes\n",
-    "\n",
-    "need_dtypes = read_types(\"dtypes_1.json\")\n",
-    "\n",
-    "dataset = pd.read_csv(\"df_1.csv\",\n",
-    "                  usecols=lambda x: x in need_dtypes.keys(),\n",
-    "                  dtype=need_column,\n",
-    "                  parse_dates=['date'])\n",
-    "dataset.info(memory_usage='deep')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 45,
-   "id": "7fb6637a",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Гистограмма для распределения по дням недели\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.histplot(dataset['day_of_week'], bins=20)\n",
-    "plt.title('Распределение по дням недели')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 42,
-   "id": "a8580d40",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Линейный график продолжительности игры\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.lineplot(x='date', y='length_minutes', data=dataset)\n",
-    "plt.xlabel('Дата')\n",
-    "plt.ylabel('Продолжительность игры (минуты)')\n",
-    "plt.title('Линейный график продолжительности игры')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 39,
-   "id": "02a9b5c7",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 1440x720 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Столбчатый график количества игр по парку\n",
-    "plt.figure(figsize=(20, 10))\n",
-    "sns.countplot(x='park_id', data=dataset)\n",
-    "plt.xlabel('Парк')\n",
-    "plt.ylabel('Количество игр')\n",
-    "plt.title('Столбчатый график количества игр по парку')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 40,
-   "id": "bd22b7a8",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAFkCAYAAADMoOsCAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAABTkklEQVR4nO3deXhU1f3H8fd3su8JCXuARECIMoCKLCqK1K1i69K9WreqpaW12lSlVSvWpXTT/qoorjVqbal1B/cioKyCsifsAbKRsCRknfX8/rgDDiErmZk7M/e8nicPYeYun1nynTPn3nuOKKXQNE3TrMFmdgBN0zQtdHTR1zRNsxBd9DVN0yxEF31N0zQL0UVf0zTNQnTR1zRNsxBd9DVN0yyk06IvIqUicoHf/weKyE4R+VNwo2mapmmB1q2Wvoj0Bj4G3ldK3RmcSJqmaVrQKKU6/AFKgQuATOBLoAgQv/tnAf8F5gH1wBfAGN99dwCvtdreY8DffL8vAlqABt9Pme92G3APsBuoBl4EMnz35QHKb52NwBS/7f8fsBc4DKwBJvvdlwz8BzjoW9cJvNDBYx/Wal8e4KZWOWJ9/x/v+/+Dvv9nAfOBGuCQ7/dcv22399ivB5b6nqc6oAT4mt96NwDFvud6J/ATv/um+DL8n99tp/hue7lV7rf8lsnyZfmsK89jG8/TC8Bc4CNfrsXAkC6+JjHAb4EdvnXXAIN89ymg0e85Ovp6+T2OW4AKoBIo9NuuDZjp2+4B3+veq1XuMqDZb9sv+903AHjN9/rtAm5tte71vvfDkWwKGOa7LwN4zpepHHgQiPFb77M2ckzx+3vyz/FEq233Az4Ean37dQGz2nldOtvWC77H3eD3k4HxPirzvS77MWrA1R28/os49r3cDJT63V/gW6YW2AR8s5Oa86DvcTX4Xn//v7PWjynWd39eZ8+P77lXwO1+61+K399tG1k6e73MfJ8t4qt6ZAM24KsjHf10taWfCrzne4JvVL69+LkceBXoBbwCvCkiccDLwCUikgkgIrHA94CX/Nb9uVIq1feT67vtet/P+cBJvv0/3mqfmUAaxpP8F7/bPwfG+mV5VUQSffddC4wA8pVSqUBnXVQ2gCP5gE87WPZPGH/g/uv+AxgCDMZ40Vs/hrYeO8AEjIKeA9wHvC4ivXz3VQOXAekYHwCPisjpfuvWAF8XkQTf/2/C+JBo7SQR6e/7/Ue+/fnr6Hlsy9XAA77Ma4F/dnFbvwJ+gPHHlw7cCDT5rTvG7/lv6/U6HxgOXATM9OuKvBW4AjgP4w/rEDCn1boCXOLb9sNHbxSxAe8A64CBwNeA20TkYr91bcAyv2z+igA3RqPhNF+2m9rI3iERGQ58vdXNt2EUgf6+/c7rwbYA/uT3HkxVStX5bu+H8VoOBK4DnhaRER3s4ud+z8U3/PYbh/Fcfgj0AX4B/LOTbQlGYUwFTu3K4/NzGx0/P9t9j+eI9v4+usrM95m/6zAab53qatF/EuNTJhc4u4371yil/quUcgGPAInARKVUJbAE+I5vuUuA/UqpNZ3s72rgEaXUTqVUA/Ab4Pu+Dw1/gtFSPHDkBqXUy0qpA0opt1Lqr0ACRqE/svyRdboiEeOTuUMichnGc/mxX44DSqnXlFJNSql64CGMN0ZXVGN8G3IppeYBW4Bpvu0uUErtUIbFGH9Mk/3WdQLvAleJSDzGH/qbbeyjCOODFYwPwyL/Ozt5HtuyQCm1RCnlAO4GJonIoC5s6ybgHqXUFt9jWqeUOtD2Ltp0v1KqUSm1AeND9ge+238C3K2UKvNlmgV8u9V7KIm2X98zgd5Kqd8rpZxKqZ3AM8D3/ZaJb2tdEemL8Zzf5stVDTzaat2u+gPGB+kxu8B4r3X3JIy2ttWZe5VSDt/7bAHw3W6uDzARo9E22/dcLsT41vuDDtZp73Xpis6en31AqYhMEpE+GI2yVSe4LzDpfebP14C6ly6+vl1945RgfHrfCTwnIkmt7t975BellBfj68wA301FwDW+36/h2FZ+ewZgdO0csRvjW0Zfv9v2Y3wQ3Qb88ciNIlIoIsUiUicitRhfV3P8snwO1IhIHfDrTnL0w2g5d8SG8Qd1zDEOEUkWkadEZLeIHMb48MsUka584JS3+ja1G9/zKSJfF5EVInLQ9/gu5avHd8SzwI8xWiDv0/ab5iXgahGZgPH67WuVv6PnsS3+74EGjC60I5k72tYgjK/GJ2qv3+9HnyeMP+Y3RKTWt89ijBZgX1+mBIxvi229vkOAAUfW9a3/W459//XCaNW1tW4cUOm37lMYrdwjJrba9oDWG/G9LiNp9WGM8a22Caj3rdtpIe5gWx05pJRq9Pu//3PbHQOAvb664L+tgR2s09nf3Xf9nrv9re7ryvPzLEZj43qMruPOdPR6mfU+8/dL4AOMxmGnulr0H1JKtSilngH2cPwnyqAjv/i+suRi9LOC0cocLSKjMLol/knnKjCekCMGY3xd9i9MOUqpZIyupddEJElEJgN3YbzQWUqpTIx+cQFQSjVhtDI2Atkc2y3UltMwvnp15Hpgi1JqRavbCzFasxOUUunAub7bpZPtAQwUEf/lBgMVvjfQa77cfX2P793W21RKbcQ4fnEPxhu8LQcwnoenWi/T2fPYDv/3QCrGm7WiC9vaCwztYLudGeT3+2C+et/tBb6ulMr0+0lUSh3pghuLcQxhVxvb3AvsarVumlLqUr9lTga2trOuA+P9eWTddKWUfzfFCv9t+2X29ydgplLK43+jUqoGo5vxPd+6/2lj3S5tqxNZIpLi93//57Y7KoBBvrrgv63ydpaHzv/u/uP33B3TEOni8/MeRo/FdXStEdrR62XW++yIXsDPgfu78DiAEztP/2bgFhEZ73fbGSJyle8rzW0Yb/oVAEqpFowDva8Aq5RSe7qwj38Bt4tIvq+APAzMU0q521jWg9FyjMfo43djfKrGisjvMPqJARCRDODvwM3tbAu/ZdMxCvq/Osl6N0b3U2tpGP34tb7++Ps62Y6/PsCtIhInIt/BOBD2LsZjTMB4fG4R+TpGf3FbHgY+Vkpt6mA/j2L0v7/fRvZ2n8d2XCoi5/i6lB4AViql9nZhW88CD4jIcDGMFpHsTvbl717ft6pTMY5xHOnDnQs8JCJDwDjzTEQu9/1uw+hbfrWdQrgKOCwid/kaEzEiMkpEzvStfzbGt6i3Wq/o69L8EPiriKSLiE1EhopIV7v2AKYam1LzW98hInkYH6I/6+m2uuB+EYn3fXBfhnHcrrtWYhyMvdP3fp6C0Wvw77YWFpGLMFr6753Avrr0/Phe8z9iHDc4eCL78WPK+8zPbcBzSqmqrgbudtH39Tv9DviH7w8cX6jvYXwN+RFwlTL6948oAux07VMV4HnfskswPiFbMJ48f7Ui0oDx9ewnyjgA9QHGm2UrxlfIFo79+v9n4HWlVFf68FZjfCV+SkQafPuaDDwuIoP9lpuvlNrWxvp/w+jL24/xAdi6sHZkJcbByf0YxwK+7esTr8c4cPQfjOf6h8DbbW1AKTVfKfWrjnailFqplLq+jTdkZ89jW17B+GA7CJyBcVymK9t6xPd4PsQ4u+c5jOetqxZjHJz7H/AXpdSHvtv/D+O5+VBE6jFegwm+++b68l3j99r+FvieiFztez6+gdFK24XxOjwLZIjIKRjv518rpVa2k+lajA/ozRiv03+B/u0s25b+tOou9PMURv/47nbu7862OlKFkb0C49v5dKVUSXc3opRyAt/EOM6xH+MMomvb2pbvw+U9jIZCle91OdJoeaeLu+zS86OU+odS6g9d3GZHzHyfgXF8srMei2OIOu5EnO4RkVkYpxBd08EygzGOC/RTSh3u0Q5DRERKlVJ5bdz+LMbpXaVB2u/1GKdhnROM7QeDiLyAcarYPSHcZx7GH0pcZ9/a2lj3BYxTPxe1uv0ajFMDXwhMysjka42/rI49oyxU+71eKXV9G/d9rJS6oPXt4Sxc32etz4YJON9XnF8B/46Ugu9T2c7tBzG6K7TIdRCjC7K1RkLwN6G1y4Hx2rSlsxMqwlFYvs+CumPfgaB9GF/rLwnmvgJNKTWpndv1lcgRrr1uL6XUG6HOon1FKbUcWN7OfR2d4hmWwvV91uPuHU3TNC1y6FE2NU3TLEQXfU3TNAvRRV/TNM1CdNHXNE2zEF30NU3TLEQXfU3TNAvRRV/TNM1CdNHXNE2zEF30NU3TLEQXfU3TNAvRRV/TNM1CdNHXNE2zEF30NU3TLEQXfU3TNAvRRV/TNM1CdNHXNE2zEF30NU3TLEQXfU1rRUTuFpFNIrJeRNaKyASzM2laoOhJoDXNj4hMAi4DTldKOUQkB4g3OZamBYxu6WvasfoD+5VSDgCl1H6lVIWIlPo+ABCRcSKyyPf7LBF5XkQWichOEbnVvOia1jld9DXtWB8Cg0Rkq4g8ISLndWGdkcDFwHjgPhGJC2pCTesBXfQ1zY9SqgE4A7gFqAHmicj1nay2QCnlUErtB6qBvsFNqWknTvfpa1orSikPsAhYJCIbgOsAN181khJbreLw+92D/rvSwphu6WuaHxEZISLD/W4aC+wGSjG+AQB8K8SxNC1gdItE046VCjwmIpkYrfvtGF09BcBzIvJbYKV58TStZ0QpZXYGTdM0LUR0946maZqF6KKvaZpmIbroa5qmWYgu+pqmaRaii76maZqF6KKvaZpmIbroa5qmWYgu+pqmaRair8jVIt+sjGSgn++nr+/fPhhX1yb6/ST5/R6PMU6Oy/fjBFqARqAJaMAYcK0K2Of3c4BZdfqKRi1i6StytfA3K8MG5AEjfD8jgZOBQRhFPi2EadwYHwblwDZgi9/PVmbVNYYwi6Z1my76WniZlZEBTPD9jMYo8MM4fmTLcKSACowPgA3AKmAls+p2mJpK0/zooq+ZZ1ZGDGDHKPATfT8jADEzVhDs58gHgPGzill1h8yNpFmVLvpaaM3KOBm4BGOmqfOAFHMDmUIB64EPgPeBpcyqc5obSbMKXfS14JqVkQpM5atCf5K5gcJSA/AJxofAB8yq225yHi2K6aKvBd6sjEyMiUa+h9Gajzc1T+TZBrwK/ItZdRvNDqNFF130tcAwTpv8JvADjFa9LvSBsQn4F/BvfUBYCwRd9LUTNysjFqPA/xCj4Fuxfz6UVmN8ALzMrLpqs8NokUkXfa37ZmX0w5hC8BZgoMlprMgJvA48way6T80Oo0UWXfS1rpuVMRmYAVwFxJmcRjNsAJ4EXmJWXYPZYbTwp4u+1rFZGSnAj4CfYZxTr4Wnw8BLwGPMqttidhgtfOmir7VtVkYW8AvgViDb5DRa13mB/wIPMqtug9lhtPCji752DHuRvffLFVW3jHE47yK0Y9pogaWAt4AHmFX3hdlhtPChi74GgL3IngPcAcwY6nStfbO88myzM2kB8y5G8V9hdhDNfLroW5y9yJ4C3AX8iiOnXCrlebO8cu9QlzvPxGha4H0I3MmsunVmB9HMo4u+RdmL7DbgOuAhoH/r+092OJe+VlGlW/vRx4txwPceZtWVmR1GCz1d9C3IXmQ/D3gUOK3dhZRyzy+rrBzidg8KWTAtZGpU+sozHXM/BGaXzp7WZHYeLXT0dIkWYi+yD7MX2d8AFtFRwQcQib2rT3ZpCGJpIaYU3luchZnAvUBJ3swF3zc5khZCuqVvAfYiezzwG+C3dGdMHKVc75VVVOe6Pfqq2yiy0Zv36WXOhye3uvlT4ObS2dP0Of5RThf9KGcvsk8AngNOPZH1x7Q4lrxcue/cwKbSzKIUDZMcjzdW0atvG3e3ALOAv5TOnuYJbTItVHT3TpSyF9lT7EX2vwHLOMGCD7AuIX5CZUxMZcCCaaZ623vW6nYKPhhTUs4GVuTNXDAqhLG0ENIt/ShkL7JfBDyFMZl4j53R3LLkhapq3dqPcG5lqxjleC6rhYSkLizuBB4GHi6dPc0V5GhaCOmWfhSxF9mT7EX2uRgzMOUFartrEhPGV8fE6KF8I9yf3N/f1cWCD8axn1nA6ryZC04PXiot1HRLP0rYi+yjgHnAKcHY/sTm5sXPVNWcF4xta8FXr5I22R3PngJyIpPOu4F7gD+Vzp6mC0aE0y39KGAvsv8U+JwgFXyAFYmJZx6w2fYHa/tacP3UdZv3BAs+QCxGX/87eTMX9ApgLM0EuuhHMHuRPcteZH8NeALjIFzwiCTf2ztbz9cagXZ4+y//zGsPxLDY04Av82YumBiAbWkm0UU/QtmL7BOBtRgTmoTEp0mJ4w7ZbAdDtT+t55Si5QbXnYG8qnowsCRv5oLbA7hNLYR00Y9A9iL7dRhX1Q4O6Y5FUu/L6aXHaI8g//OetmKP6psb4M3GAY/kzVzwRt7MBZkB3rYWZPpAbgSxF9ljgD9hjIhpDqUOf7anTGV4VYZpGbQu8SipGe14NrGRpGDOi7ATuKx09rTiIO5DCyDd0o8Q9iJ7BjAfMws+gEj6A9m91pqaQeuSJzyXlwS54AOcBCzLm7ng/CDvRwsQ3dKPAPYi+3DgbWCk2VkARKnapbvLbGlKpZudRWtbk4rfcqrj+eEKW6gadi7gptLZ014M0f60E6Rb+mHONwzySsKk4AMokcyHc3rpKfjC2K9cP20MYcEHo5+/KG/mglkh3Kd2AnRLP4zZi+yXA/8m2KdjngBR6uDy3WXxKUqlmp1FO1a5yl51tuOx8SZGeBGj1a+HbwhDuqUfpnxn6LxGGBZ8ACXS64/ZWWvMzqEdSylcNzjv7G1yjGuBD/SZPeFJF/0wZC+y3w78A4gxO0tH3kxNOaVZRM+6FEZWeAuWbVWD8s3OAZwPLNRX8IYfXfTDjL3I/iDwCHCil8yHjBLp/ddemZ+bnUMzeBWHprtuH2N2Dj+nYRT+HLODaF/RRT+M2Ivsc4C7zc7RHa+mpY50CC1m59CgyHPx+jpSM83O0coYjMJvdpeT5qOLfpiwF9n/D/iZ2Tm6yyvS929ZmavMzmF1DhW760H3NWebnaMdduCTvJkL+pgdRIvyoi8ij4rIbX7//0BEnvX7/19FpNOLnUQkT0SCNtiYvcg+G7g1WNsPtlfS04Y7jUk3NJPc476xxkNMrNk5OnAqsChv5oJ+Zgexuqgu+hhTBZ4FICI2IIdjpw48C1hqQq6j7EX23wF3mZmhp7wi/edkZa40O4dV7VfpX7zqmWLmKZpdVYBR+PubHcTKor3oL8VX9DGK/UagXkSyRCQB402IiCwWkTW+bwL9fbedISLrRGQ5MCMY4exF9l8D9wdj26FWlJGW7zKuytRCSCm8P3b+OpKulRgBfJg3c4Eeu8kkUV30lVIVgFtEBmMU/+UYV7dOAsYBxcCjwLeVUmcAzwMP+Vb/B3CrUmpSMLLZi+wzgD8HY9tm8IjkPpWZscLsHFazXp20dJ0adrLZObppFPBm3swF8WYHsaKoLvo+R1r7R4r+cr//l2O8AT8SkbUYU8LlikgGkKmUWuzbxkuBDGQvsn8HeCyQ2wwHz2WmD3EbU+tpIaAU9Tc7C8NmeI5umgK8mDdzQdifmhxtrFD0j/Tr2zG6d1ZgtPTPAhYDm5RSY30/dqXURRjnyAdlfArf5CcvEgHn4XeXW2Twcxnpum8/RF73Tl5TTVYknwr5PaLo226ksELRXwpcBhxUSnmUUgeBTIzCPw/oLSKTAEQkTkROVUrVAnUico5vG1cHIoi9yJ4PvEWYDq0QCE9lZQzwgtfsHNHOrWxlv3X9OBqmLSzMm7ngNrNDWIkViv4GjLN2VrS6rU4pVQ18G/ijiKzDmH7wyIHfG4A5vgO5zT0N4RsPfwEQ1ecqu0TyizLSdN9+kD3svnqPg/hoaTw8kjdzwXfMDmEVepTNELAX2WOB94ALzM4SCvFetePz3XvzbdZoVIRcnUreMMbxbCAmOg8nDmBK6expusEQZPqPMjSewCIFH8Bpk6H/Sk8Nad/+jW810+fP9Yx6ouHobbMWtTDwkXrGzm1g7NwG3t3W9hmleX+rx/6kscy4p79a/66PWhj9ZAPXvvHVF72X1jn5vxWO4D2QTiiF+onr9mj8u00AXtXDNQRfNL55woq9yD4duNnsHKH2t6zMbBWkg+FtuX5sHO9fk3zc7bdPjGft9FTWTk/l0uFx7a7/yXXJrJ2eyupbjFPe61oUy8o8rP9pKh6l2LDPQ7NL8cI6Fz8707wzDbergctXeE89tfMlI1Iu8K+8mQvCenTZSKeLfhDZi+xnAn8zO4cZWmy2k19NSw3ZmDznDomlV1LgToiyCTg9CqUUzS6Ii4E/L3Ny6/h44mLMOfFKKZpvcN2ZZ8rOQ+drwANmh4hmuugHib3Ing38F+NrqyX9pVem6XPoPr7KyegnG7jxrWYONbf9xUMELnqpiTOebuDpNcYQQmkJwrcK4jjtqUbyM21kJAifV3i4fGT73xaC7UPvuJVlqvcA0wKEzsy8mQu+aXaIaKUP5AaBvcguwHzgUrOzmO2BmgOfX9HQeGYo9lVa6+WyV5rY+DOji2Zfg5ecZEEE7l3ooLJB8fzlScetV1HvZUCajepGLxe+1MRjX0/k3CHHjl1209vNzDgznjWVHj7c4WZ03xjuOTd0n+ceJfvsjudSm0hMCdlOzVUHnFE6e9oOs4NEG93SD45CdMEHYHZ21vEd7SHSN9VGjE2wiXDzGfGsKve0udyANOPPoE+KjStHxh633JeVxv9Pzrbx4joX//lOMhurPWw70Pb2guHv7qu2WajgA2QAr+XNXHD8p7TWI7roB5i9yD4BeNjsHOGi0WY79d2U5NVm7Luy/qtrxN4odjGqz/Fv90anot6hjv7+4Q4Po/ocexzx3k8c/P78BFxe8Pi+GNsEmkI0vFyTSij5u+fKszpfMuqMwZhFLmBE5G4R2SQi60VkrYhM6GDZ60Uk6rrTwnn87YhjL7InY4zTY17Hbxh6MLtXwqWNwZ1K9wevNbGo1MP+JkXuI/XcPyWBRbs9rK3yIEBepo2nLjOuZaqo93LT2y28e3Uy+xoVV84zsrm98MNRcVwy7Ks/izdLXJw5IObot4FJuTHYn2xgdF8bY/qF5iSTX7pmtChsVm2gTc+bueD10tnTPurphnxX3l8GnK6UcohIDtDRqVjXYwzdUtHTfYcT3acfQL7ZryJ2MpRgemRfzZcXNjWfZnaOSLPXm7NysvPv7bZGLWIvYC+dPa2uJxsRkauAG5RS32h1+++AbwBJGGN1/QT4FvACxqCMzcAkpVSPr8wPB1ZtPQScvch+LvALs3OEq/tzekXdAHPBphTO61136ZmmYBDGEOg99SEwSES2isgTInKe7/bHlVJnKqVGYRT+y5RS/wVWA1f7BmOMioIPuugHhL3InoIx/r4ubO2oi4kZuzgpcZ3ZOSLJUu+o5TvUwCFm5wgTN+TNXDCtJxtQSjUAZwC3ADXAPBG5HjhfRFaKyAZgKsfOrhd1dNEPjD8BJ5kdItz9rne2Hn2zi7xKDvzMdetYs3OEmWfyZi7o1ZMN+EbaXaSUug/4OcYIuk9gTKRkB54hikfBBV30e8xeZJ8K/NTsHJHgYEzMacsSEzeYnSMSPO+5ZNNhUvWUgsfqTw8mHxKRESIy3O+mscAW3+/7RSQVY9TdI+qBtBPdX7jSRb8H7EX2RIyWge7W6aJ7evcyb7SyCOFQcTv+4P6hFU/R7Iof5s1c8I3OF2tTKlAkIptFZD1wCjAL4294A/Am8Lnf8i8Ac32ndkbN9QL67J0esBfZ70GPE9Jtz1fu23xmi+MUs3OEq9udP/38De/kkFzFHKF2AaeUzp7WYnaQSKRb+ifIXmQfDPzG7ByR6Le9sxs6X8qaqlXGGl3wO5UPzDQ7RKTSRf/E/QUwbYiBSFYVGzt+XUL8ls6XtBal8NzgvFP343fNXXkzF+iTJ06ALvonwHfwVk/v1gN39c6pNTtDuPlSDVu6SeUPMztHhEgE/mp2iEiki343+aY+/LvZOSJdeWzM+I3x8dvMzhEulOLwzc5CfZyje67Im7lgitkhIo0u+t33M6L84o2QEJGZfbL3mx0jXPzHc94XB8jIMTtHBHo0b+YCXce6QT9Z3WAvsqcC95idI1rsjo2dUBIfZ/nx0l0qZu+97hsnmZ0jQo0FbjA7RCTRRb97fgnoiZsDRcR2V++cfWbHMNsD7mvKnMRZdoa1APhd3swF5k1cHGF00e8ie5E9E/i12Tmizc642Ak74mJLzc5hllqVsu5Fz8W6ld8zg9Gt/S7TRb/rCoFMs0NEHZGYO3vnlJsdwwxKoW5x/krPvRAYv8mbuUA/l12gi34X2IvsORhdO1oQbI2Pm1AaG7vH7ByhtkUNWrZKFegzdgJjCMakJ1ondNHvmjuJwoGXwoZI7F19snebHSOUlKLpRucd+uKiwPqtbu13Thf9Tvha+TPMzhHtNsfHTyyLjbFMN8+73gmrKsjpb3aOKJMHXGd2iHCni37nfoYebiH4ROLu6p2z0+wYoeBRtspfu6aPNztHlPpt3swFeu7vDuii3wF7kT0Bo+hrIbA+IX58ZUxMpdk5gu0R97d3NJOgGxLBkQ9cY3aIcKaLfsd+APQ1O4RliCT8pnd2VA/N0KASN8/xXH622TminJ6rugO66HfsdrMDWM2axITx1TEx1WbnCJZfuH7hAtGT7gTX6XkzF0w0O0S40n1f7bAX2b8GjDY7R1eVPVdG/dp6YtNjGf7Q8GPu2//efqrmVTHysZHEph3/ku//YD+HFh8CgcTcRAb+eCC2eBtV/6mifn09SYOTyL0lF4BDSw/hafSQc1GQhokRSby7d/bKZ6qq+wRnB+bZ7e2z4hPvaboYhcYMYIXZIcKRbum371dmB+iOrHOyyCvMO+525wEnDZsaiMtu+0w21yEXBz46wNBZQxn+0HCUV1G3sg5Pk4em7U0Mf9C4rWVvC16nl9rPasmemh3Ux7IiMeHMAzZbVA3GphSO6113DjA7h4V8J2/mAj1kSht00W+Dvcg+FPi62Tm6I2VECjEpMcfdXvWvKvp+t+PDEsqr8Dq9KI9CORWxWbEgoNwKpRTKpZAYYf97+8m+MBuJDXLvhEjyPb2zNwV3J6G1xDt6+S41YLDZOSwkAbjJ7BDhSBf9tl1PFEx2fvjLw8RlxZE0uP05neOy4si5JIethVspua0EW5KNtFFpxCTFkD4unR2/20FcThy2ZBvNO5tJPz09JNk/S0o845DNdjAkOwsyr5L9M1y3nm52DguanjdzwfEtIYvTRb8Ve5HdBlxrdo6e8jq81LxTQ58rO+4a9zR6qP+ynpP/fDIjHx2J1+GldlktAL0v7c2wB4bR/wf9qX69mj5X9eHg4oPsmbOH6reDfKxVJPW+nF4bgruT0HjGM624geTQfFpq/gYDl5kdItzoon+8qRhvlojmrHbirHGy/d7tbCncguuQix337cBV6zpmuYZNDcTlxBGbHovECunj0mna3nTMMs27mwFI6JdA7dJaBs8YjKPMgaPKEdTH8Ely0ml1NqkL6k6CrEXFbf+j+/tnmZ3DwqabHSDc6KJ/vOvNDhAIiYMSKXisgBF/HcGIv44gLiuOofcPJS7z2AO6cdlxNO9oxuvwopSicXMjCf2PHdq9+vVq+lzZB+VW4PXdaAOv00tQiaQ/kN3ry+DuJLjucP2k1otNdzGY54K8mQv0jGR+dNH3Yy+ypwNXmp3jROx9ci87H9yJo8pBye0lHFzcfne465CL0kdKAUgemkz6melsv2872+/ZjvIqsqZkHV328JrDJOUnEZcVR0xKDEnDkth2j3H9VEfHCgLlw5TksfUih4O+oyCoUlmr3/GeNc7sHBYXC3zb7BDhRJRSZmcIG/Yi+03AM2bn0I41raFx8eyaA+eZnaM7lMJ9qfMPu4vVkKGh3O/+d/9G847PiUnOYMCPnzh6++E171D/xXxEYkgaOo6s8288bt3Dn79Jw7oPQSCudx45l96GxMZzaNE/aN65hvg++eRcVghAw8aFeFvqSR93ecgeWw8sKp097XyzQ4QL3dI/lh6zIwy9m5JsbxRpMDtHd6xWJy8LdcEHSLVfQJ/v3H/MbS2719O8bQUDbnicATc9Qfr4q45bz12/n8Nr3qHfdY8aHxZeL43FS/A6GnGUFzPgxsdRyouzphSvy0Hjxo9JO21aqB5WT52bN3OBHtHURxd9H3uRvTdwjtk5tOMpkV5/zM5aY3aOrlKKup84bz/VjH0nDhpFTNKxUz/Uf/ku6RO/g8Qax3NiUjLbXtnrQbmdKK8H5XYQk9oLEJTHbVyv4XYithgOr3qdtDO+icREzAX9NuA7ZocIF7rof+UbgD7gFqbeTE05pVmkqfMlzfcvz9S1B8kI7mXL3eA6VI5j7yYqX/wVVa/MxFG59bhlYtNySB9/JeVP3kDZ4z9CEpJJyj8dW0IyySPOovKFW4nN6IskpOCs3Ery8IgbTeL7ZgcIF7rofyUiOietSon0/muvzM/NztEZp4rZfZ/7+vCa6NzrwetooN+P/krWlBuoeeuPtD6W52lpoGnbSgZOf47cGS+iXA4aNn0CQMaEbzPghsfoNfUm6j59mczJ11C/7gNq3pxN7bJ/m/GITsTEvJkLhpgdIhzoog/Yi+zJwIVm59A69mpa6kiH0GJ2jo7Mcl9X6SI23uwc/mLSckg+eRIiQsKAEYgI3uZjT4hqKV1LbEZfYpIzkJhYkk+ehKO8+JhlnPt2ABCbNZDGjQvpfcVMXDW7cR2MiAnPBH0WD6CL/hEXAcE//1DrEa9I379lZa4yO0d7Dqq0ta94Lgi7fo/k4RNp2b0eANfBcpTHjS3p2AuEY9N746zYgtfVglKKlt3riMsedMwytZ++TMY5V4PXDcp3jYbYUO7gXqQXQJeYHSAc6KJvuMLsAFrXvJKeNtwJTrNztKYU3puchYlm56h5+09UvfRrXAfLKZtzHfXrPiR19IW4a6uoeO5n7H/7T2RPux0RwV1/gH2v3gdAwoARJI84m8oXbqPy+RmgFGljvqqRTVuXE99vOLFp2dgSU0kYMJKK52aAQHyfiJnf/Zy8mQtMf43MZvnz9H1j7VQDYXPgTevYjbWHP739UO1ks3P42+Qd8tk05x/02V/h7+LS2dM+NDuEmXRLH8agC35EKcpIy3eBq/MlQ0MpGn/svGN450tqYcDyx+500YcpZgfQuscjkvtUZkbYzIr0jnfS51X00nMpRwZd9M0OEAYi6vJ+zfBcZvoQN7jNzuFWtoo7XbdMMDuH1mWj82YuiLqpOLvD0kXf159/rtk5tO5ziwx+LiN9pdk5/uz+3q4WEvSZX5FDsHhr39JFH7ADWZ0upYWlp7IyBnjAY9b+61XSpqc8l+mx8iOPLvoWNsXsANqJc4nkv5iRZlrf/gzXrR6QiJ9W04LC64rpELN60df9+RHu8czMft6vpnYJmZ3efsuXeMeMDvV+tYAYnjdzgWWnr7R60bf0J340cNpk6CvpqSHt21cKxw2uOwd1vqQWpgSw7ET1li369iL7AKCf2Tm0nvtbVmaOgpBdZbjQe9ry3apfbqj2pwWFZWc0s2zRx8Kf9NHGYbMNfzUtNSRj8niU1Nzq+vkZodiXFlSWfQ0tW/TH7PSenNak2p9IVosof+mVmRGK/cz1fLOkkVazlGiRyLJF37Jj7xSPLHgNuMojVNWmsndHP2nakC8JG4fIgPJsBiH6rIxI80DNgVVXNDSOD9b2m1X8tlMdz5/kxaYn24l8CsgqnT2tzuwgoRYx850FgR0gRtEvu55+2fWK8duMD0AF9Y2JlJblcGjzYJH1+bbsbQM4yRUrlh+hL5zNzs5KuaKhMWjbL3T9tF4X/Khx5GDuJ2YHCTVLFv3ikQXJQLuTVgukpbZgH1kGI8sUVy3zoMDjimFHdSb7tuSKa32+pG0eLIPrUiQnhNG1DjTabKcuSEleM62xKeBf3StUr1XveicE7VuEZoox6KJvGQV083iGQEy8h6G5Bxiae0DxtXXGtwKvsK82hb07+0njhjyJ35An/ctyGKK7h8zxUHav+GmNgZ1KVylcNzjv7B3QjWrhoN2GXzSzatEP2KwPNkXfXg307bVdMW770e6hhqYESstyOLh5sMj6POm1baCc5IwTPUZLkNXH2OwfJSd9eWFT82mB2uZKVbBsixqsL+SLPhEz+0sgWbXo5wdz4wKpKQ5GjSiHEeWKK5erI91DO2syqNqaK651+ZK6abAMrksV3YIMsPtzetku3BOYeVu9itrpztv0lbfRSRd9C8kL9Q593UMnDTzISQMPKs5ff7R7qLo2hT2lfY92D/Xb25shSsSyp9P2VF1MzJjFSYnrzmtuGdPTbb3suXBdLWm6lR+d8vJmLpDS2dMsdQqjVYt+UFv63WFT9OnVQJ9eDYrTdxztHmpqjmdXudE9xLp86bV1oOQ74yTZ5LgR43e9s72Le9jad6rYXb93/0iPohm9EoEBQGC+FkYIXfTDkEByspNTh1fA8ArF5SsUCrzuGHbVZFC1bYA41+VLyuYhMvhgmlh6Qoj2HIyJOW1pUuKGs5tb7Ce6jXvcN9S4iQ3r94rWYyehi350Kx5ZIJjQvdNTArY4D/kDDpI/4KDivI1Hu4dq6pLZU9pXGjbkSdzGIdJ3Tx/yvDax/Pnk9+b0cizcW3FC6x5QaV/+x3O+PkUz+g0FPjU7RChZruhjDLKWYHaIQLEpemc10jtrp+K0nUe7h5qb49lVkc2BzYNErc+XXltyJd8RLykmxw2pmtjYcZ8nJmw+s8VxSnfWUwrvj5136K40a7DcNzkrFv3+ZgcINoGkZCenDKuEYZWKb6462j1Uuj+dym0DxLk+X5I3DZZBBzIkqkca/W3v7MaPutna36jyl61Vw84JUiQtvFiue9SKRd+S0yP6uofy+h8ir/8hxbmbfN1DsP+w0T1UvzFP4jbkSd/dUdQ9VBUbe+bahPiSsQ7nyK4srxQNNzkLTw52Li1sWK4eWLHo9zI7QDixQU5mEzljdynG7jraPdTSEsfWimwOFA8S7/p8ydqSK3nNCRKRo0vO7J1T935Z11r7b3jPWb2PXlOCm0gLI7roW4Au+p0QSExyUTC0CoZWKS77XKFAeWzs2Z9OxfYB0rI+T1I2DZHcmkwJ++6y8tiY8Rvj47eNcjqHd7ScW9nKfuO6aWKocmlhQRd9C9BF/wQISKyXwf1qGdyvVnHO5qPdQwfrk9m9u48c3jhEYtfnS5/SvuR7bRI+7y0Rmdkne//8ssoOi/4f3D/c4yBez4hlLbroW4Au+gFkg14ZTfQaXaoYXar44WJQ4HDEsa2y19HuocziXMlrThTTJqPeHRs7oSQ+bsdIp6vNQbYOq6SNz3ku1RdiWY/lir7lJlEpHlnwHHCj2Tmsxtc9VHYgzdc9lC9Jm4ZIbnWmDAhVhpOcrmVvlVceV9iVQl3j+u2mpd5Ro0KVRQsbHiDOSkMxWLGlb1pr08p83UOD+tYxqG+d4uzioweNa+uTKN3TR+o2DpHY9XnSe1c/8j0xEhfoDDvjYifsiIstHepy5/nfvkMNWL7UO0q38q0pBkgDDpsdJFSsWPQDXky0EyeQmd7M2FG7FaN2K76/BBQ4HXFsqcqipniQeDbkSWbxIMlrTJKezYMrEnNn75zy1yqq8o7cpBTNN7juHNLTx6FFtHR00Y9qUXH+eTQTiE90MSKvmhF51YqvrzG+FXhslB9Io3xHf2lenydJG/Nk4L4sGdidbW+Nj5tQGhu7J8/tHgzwkfeMlXtVnymBfxRaBLFUHbTUg/XRRT9CxXgZ2KeOgX3qFJNKjnYP1TUksWtPbw5vGmKzrc+T3jv7k++Okfg2NyISe1ef7N3zKvYN9ijZd7vrZ+NC+Ri0sGSpmqCLvhbRBDLSmhl76h44dY+X734KClzOWLZWZVFTMkjc6/Mlo3iQ5DUkSSbA5vj4iWWxMeWvtXxzVyNJergFzVI1wYpF34qP2VIE4hLcnDykhpOH1Cgu/sLXPSRUHEyjbGd/aX59yCk1m5K/P/hCZI3JcTWTHcYyJ+4A1iyAlvpU174SoxjQ+zADbLEF67/sdUHCt53rHAUZkyaKBP5MIU0LV1ackk8XfQur6H/WynX2n51MTGbOhkOfTl5a/eZGpVSt2bk0U3nMDhBKViz6TrMDaObYkf+NT0tO/uE4RBLFlpwGUN609bQPyp8/5FGe3Wbn00zjNjtAKFmx6DeYHUALvY0FNyzePeSSyYhvyGhJPnr5fZ1rf/7bex5Pd3ia1pqVTzOVLvpRrtHsAFroKMS7+rTCJdV9x53nf7tITDx+DQCntyXrrT1zTj3k2PdZyENqZtNFP8rplr5FeCXWsWLCfasOZ5x0bttLSJ3//xTeuA8rXjhnZ/36Rcpqg1JZm8PsAKFkxaKvW/oW4IpJqlt61kPFzUm9OxgfP7a+rVs/3//elDUHPlyplGoKVj4tbLiAuk6XiiJWLPq6pR/lWhIyq5ae9fA+V1zq2A4XlLh2i/qO+rUTF1b+c7dXeSsDnU8LKzW5sydb6ludFYu+bulHsYaUAbuWT/i92xsT3+k8tyIJLR3dv99RXrBg71xxeZ3FgUuohZlqswOEmhWLfq3ZAbTgOJh58qZV436TrmwxXZv9SpI6PYDX5Knv99aex4Y0uGpX9DigFo72mR0g1KxY9PXX9ShU1ffM1WvH3JqP2LK7uo7Ykrv0td6j3MkLyp6aUNG0Y9EJB9TClW7pW0CF2QG0wNo15JLPNo+8biwiyd1ZT2wp3Vr8033/nbLx0GefKaVc3UuohTHd0reAcrMDaIFTPOKaxbvyv3EO0v2J2EVSu73Optql53xW/fompdSh7q6rhSXd0reAfVhsrI1opEB9MebWxZX9J53X+dJtE1ta22Pud6KiafvY98qfO+xR7l0num8tbOiWfrQrKCn2YMFP92jilRjnyjPvXV6bNeKECz4AtpRudQf5q3cdGPL2njlZLZ6mL3uUQTOb5WqB5Yq+j+7iiVDumIT6pZMe3NiU0q/HE5mLLbVbnfqtOb0tmW/vmTPqoKPy055m0UyjW/oWoYt+BHLEpdUsPesPZa749NMDsT2R5J5NtI4xdMNHFS9O3n547WKllDcQubSQ0kXfIraZHaAjd1dWcs72bXxz187j7nv+4AFO2VLCIXfbp5gf9ni4rbycabt2ctmunaxtbgbgrzXVXLFrFzMrvzp56e26Ol46dDA4DyLAGpP67l426cEmT0xCQcA2KokZQEAK9ZoDH5z3+f73Vyul9MV/kaMBC57CbdWiH9ZXWF6ZkcHTuYOOu73S5WJ5YxP9Y9s/6eQP1fs4JyWFBfkn8XpePifFx1Pv8fBlczNv5ufjUbDV0UKL18sbh+v4fmZWu9sKF7XpJxWvHH9PsrLFDgnkdkXERgAv1tvVsH78/ypfLtNDN0SMTVYbggF00Q9L45KTyYg5/qX5Y3U1hb17I+2s1+DxsLq5mW9lGL0W8SKkx8RgE3AphVIKh/ISi/D8wYNck5lFnLS3tfBQ3fu0L7447Ve5iK13cPZgOxzIrR1wVIyYv/dJm8vr2BzI7WpBscHsAGbQRT9CLGyop09sLCMTE9tdZq/LRa+YGO6uquSq0l3cW1VJk9dLii2Gi1LTuGp3KQPj4kiLiWFjSzNfS0sL4SPovj25U5dtPOXHoxAJXlCJDfgAfM2ehr5v7Xk8v951aHmgt60F1HqzA5jBkkW/oKS4lgjqy2v2ennqwAF+kZPT4XIeFJtbWvheZhav5+WTJDaePXgAgB9nZ/NGXj539enL3/fX8POc3vy3tpbbK8qZe2B/KB5Gt2wZ9p3F24deNQmREzqXvuvim4OxVY9yJ71b9vTE8sZti4OxfS0gdEvfYiKmtb/X5aTc5eLK0l1csGM7+9xuvrW7lJpWB3P7xsbRNzaWMUlJAFyUlsbmlmMHkjzy/7z4eN46XMejAwayzeGg1Bk+Uwevs/90UXnulPOQ4Pc9iS0xmBNoyGfVr5+3/uDipUop057gwndnM/axb/K15647etv8kk/42rPXMviP57GusqTN9SoO7+O7//ol5z9zDV979lqeW/3q0fseXvQkFz5/PbfNf+joba9t/OCYZSKAbulbTMQU/ZMTEvls2HA+HjqMj4cOo29sLK8NyaN3qwO6vWNj6RcXxy6nUcdWNDUyND7hmGUe21/DL3JycCuF13cIy4bQ4jX/bEOv2Nyrxv3mswPZo6aEap8iSUG/Oru4bsXZS/b9t0QpdSDY+2rLd+yX8NJ3/nzMbSNy8nn6ygeZMGhMu+vF2GK49/yf8cnNL/PWj+ZS9MUbbN1fymFHA6vLN/HRjS/gUR6Ka3bQ7HLw6sb3uPa0K4P9cAKlInf25Mg4dS3ArFz015kdoD2/rijnB7t3U+p0cv6O7bxWW9vustVuFz8p23v0/3f36cudFZVcsWsXJQ4Ht2R/Nejkx/X1jEpMok9sHOkxMYxJSuLyXcZIAh0dKwgFjy2+afnEB75sSM09J6Q7lpSQnL1R1bxz9HtlzzR6vO4dodifv4mDxpKZlH7MbcNz8hiaPbjD9fqm5mDvNwKA1IRkhmUPoaq+Bhs2XB4XSila3A7ibLE8tepf3HDGt4iL6fZwRmaxZCsfIGJeoSAI2/HR/zJgYIf3fzx02NHf+8TG8ZTf6Z0FiYm8mpfX5noXpKVxgd/B2zv79OlZ0ABxxqUcXD7h/kpPbNKZod632FJD1vCpdx8a/Nbex+u+PvDmNUmxKWeEar+BsLeukk37tnHagFNITUjm0hHncckLP+bsIaeTlpDCusoSbjv7erNjdocl+/PB2kV/E1APhPcpLFGuOTGnbMX4e5zKFneqGfsXW2pcKPfn8joy3tk7Z8zU/lcvyUkc2M6E7eGl0dnET964l1lf+wVpCcbIFT+d8EN+OuGHANzx3h8pnHwj/1o3nyW7Pmdkn5P45VnXdbTJcGDZom/Z7p2CkmIvsMrsHFZ2OG3wtuUT7otVtriTzMogttSQ92spVOz/Kl8+d1vdmiVKqbAe8dXlcXPLG/dyxSkX8vU2xrfbuG8rACdlDeK/G9/nySvuZ0vNLnYd3HvcsmHGst07li36PmHbxRPt9mePWrf69Dv7ILZ+ZuYQW2qSWfv+4uDH567cv+ALpVS9WRk6opTijvf+yPDsIdwy/nttLvOXT5+j8Jwf4/K68fqGHrKJjWZ3ME+K6rEGwLIXz1m96OuLZ0xQNmDyivWjpo9ApMcDnvWYpJjavbe7YdOZH1W8WOVVnrJg7WPG2/dzxUs/ZefBPZw551v8e9183tu6hDPnfIsvKjZx/X/v4up5hQBU1e/n2lfvAODz8g28tukDlu75gov/cSMX/+NGFu746k/m/a2fMqbfSPql5ZCRmMbpA07lgueuQwRO6TOszSxhYlHu7MmWnf1MlLLc0BNHFY8syAbC78qkKLb9pCuW7Bl0wTkY496YTilno6P28R4NsRwIiTEpNV/PvWlfvC1xlNlZLOCXubMn/93sEGYJiz88sxSUFB8Atpidwyo2nHrToj2DLzw3XAo+gEh8CmB6X0SLp7H3W3seH3bYeWCZ2Vks4COzA5gpbP74TPSx2QGinUI8n59+x6c1vU+bYnaWtkmt2QkAvMqT+F75s5P2NpbooRuCpzx39uSIuTAzGHTRt/infrB5bLEtyyfcv7o+PW+y2VnaFxPQkTZ7SJZVv3Xe2oOfLFVKmf4NJApZvpEXMUVfRDwistbvJ6+NZd4VkcxubvoToO0ZSbQeccUm1S2d9PCWlqTsCWZn6ZDEht3EJ1vqVp29uOo/W5Xy1pidJcpYvpEXMUUfaFZKjfX7KT1yhxhsSqlLlVK13dloQUnxYfRZPAHXkpBVuXTSw9XuuJT2B3cJEyIJLZ0vFXr7Wkrt75Y94/B4XdvNzhIlFLqlH1FF/xgikicixSLyBPAFMEhESkWk4/GH27YgwPEsrSFlwM7lE+73emPih5udpUskMWxP32tw1+a+tefxPk3u+tVmZ4kCG3JnT7bcnLitRVLRT/Lr2nnDd9sI4EWl1GlKqd092Pa7AcinAQezRm5YNe63WcoW0/EAQmFEJDm8r4pVzvT5e588rbp5rz7A2zOW79qByCr6/t07R8Zv3a2U6vFVtQUlxRuAPT3djtVV9pu4au3onw9FJPwn3vUjNtNP0++UQsV8UvXKeVvqVoX90A1hTBd9IqvotyWQB+D+G8BtWc6uIZd+VjzimtMRSTY7S7fZUmPMjtBVaw9+cu6Kmne+VErVmZ0lwtQD+psSkV/0A+lfZgeIVJtHXrt4V/60cxCJyFFbxZYW5CkZA2tPY/G4Dyte2O9VnrAf1SyMvJk7e3JYHrAPNV30fQpKilcD+iyJblCI94uxty2u6jfh+OEXI4jYUkwbdO1E1Tqrh76954kkp6fFsqNFdtMrZgcIFxFT9JVSqa3+X6qUGtXqtjylVE/G0pnXg3UtxSsxzhXjf7eyNnN4RBd8AJHU8O/Ub4PD25Tz1p7HR9Q5a5aanSXM1aBP1TwqYop+iOguni5wxyQeXjrpoU3NyX0mmZ0lEMSWnN75UuHJiyfh/fLnz97dsHmRsvLoiR17NXf2ZH0Bpo8u+n4KSoo3ARvNzhHOHPEZ1Z+d9XClKz7tNLOzBIwkZZodoadW1Lwz5cuD/1uhlGo2O0sY0l07fnTRP55u7bejMbnv7mUTH3B4YxJGmJ0lkERi4jDO7oho2w6vmbSo6t87lfJWm50ljGzLnT25291fIqJE5CW//8eKSI2IzA9svNDTRf94ReixeI5zKGPY5pVn3pOibDGDOl86Etmi4hTI6pY9py4oe9rl9rq2mp0lTPzjBNdrBEaJyJGD/BcC5YGJZC5d9FspKCkuB942O0c42df7jDVfjr1tMGI7kSEuIkRMxLf0j2h01w18a89jA5rch60+B7QHoxF3ot4Dpvl+/wF+vQAi0ktE3hSR9SKyQkRG+26fJSLPi8giEdkpIrf2YP9BoYt+2540O0C42D3ogqWbTrlhNCKpnS8dwSSuyewIgeRWrtR39j45bl9zqZUvSPogd/bkih6s/2/g+yKSCIwGVvrddz/wpVJqNPBb4EW/+0YCFwPjgftEJK4HGQJOF/22/Q/YZnYIs5UM//7iHSddcRZh9qYNBpHEaBy73raoat55xbUrliilrNhl+XxPVlZKrQfyMFr5rcfnOgd4ybfcQiBbvprzeYFSyuE7fbwa6NuTHIGmi34bCkqKFTDX7BxmUaDWjp6xuGLg5PMQEbPzhIQtMWqL4vpDi89dVv3meosN3VAKvBWA7bwN/IXjT/Bo6+/iyCmz/g0IDxBWV6rrot++FwDLnf7mFZt71bi7lx3sdUrEX3TVHSIpXrMzBFNZ09bTPyh//qBXeXoyGm0k+WuAzs1/Hvi9UmpDq9uXAFcDiMgUYL9SKpxmYGuXLvrtKCgpPojRp2cZHlt847KJD6xtTB1wttlZQk1sKVH/jabOtT//rT1z0hye5nVmZwmyGuC5QGxIKVWmlPq/Nu6aBYwTkfXAbOC6QOwvFERfxNe+4pEFpwIbaPurXFRxxqXtXz5hVrUnNvEUs7OYwd3y+VJ386eW+LCzYXNeMODaVVkJfc8xO0uQ3Js7e/KDZocIV7ql3wHfFbpvmp0j2JqScsqWTnqwwaoFH0AkNcHsDKHixRv/YcUL5+yq37A4CoduqAfmmB0inOmi37mHzQ4QTHVpeVtWjL8vTtli88zOYipbasSNtNlTq/a/e96aAx+uVEpF0+mqT+fOnnzI7BDhTBf9TviGXP7Q7BzBUJM9eu2a03/dH7GF1SllZhBbSnRfh9COHfVrJy6sfGW3V3mrzM4SAE7gEbNDhDtd9LvmIbMDBFrZwHOXbxh1SwEiETvCZCCJJGeancEs+x1lBQv2zlVur7PE7Cw99FIPL8ayBF30u6CgpHgJ8JnZOQJl29Crlmwd9t0JiFimH7tTkpCOcU61JTV56vu/uefxQY2uupWdLx2WvMCfzA4RCXTR77oHzA4QCOtPvWXx3kFfOxcR/dr7EeMitFqzc5jJo1wp88vmnlnZtDMSh254PXf2ZD3IXBfoP/wuKigp/pAInn1HIZ7Pz7jr0/29x1jqoqvuiYmIi2uCzLZk36vnbTz02adKKZfZYbrIQ5Q0ykJBF/3uuQPja2RE8djimpdN/P2a+rTBk83OEtYktsHsCOFiU+3SyZ9Vv75JKRUJZ8I8mzt7sp4ruIt00e+GgpLitcDLZufoDldscu3SSQ9vdyT2Gm92lvAXb7lhNzpS0bR97Pvlz9V5lHuX2Vk6UAvcY3aISKKLfvfdTYSMydOc2Kty6aSHD7jjku1mZ4kEYkuIlO6MkDnsOpD39p45WS2epi/NztKO+3JnT95vdohIoot+NxWUFJcBfzM7R2fqU3N3LJ8wC29M3FCzs0QKkeSoHWmzJ5zelsy398wZddBR9anZWVrZDDxhdohIo8feOQHFIwvSge1Ab7OztOVAVsGGdaNnDEIk0+wskcTZ+N4ir7N4yomuP2/VOjZXVpOaEM8dlxjHy99ZV8zmin3E2mxkpybzvTPHkBR/7PQE1YcbeHnFVw3pAw1NXDzqZM49OZ/564rZUlXDgMx0fjBhLABrSstocrqYfHL+iUY9YeOyL158UtqYyRIeZ39dlDt78kdmh4g04fDCRZyCkuLDwEyzc7Slot+kVetGzximC373iaT26O9hXH4uN5977KGTk/vm8OuLz6Xw4nPJSU3hf8Xbj1uvT3oqv7poMr+6aDK3XXAO8bExjBrYl2ani90HDlF48bl4laKy9jAut4fPS8s4a9iQnkQ9YasPfHDe6v3vf66UajQlwFfe0gX/xOiif4IKSoqfB8LqfOadeZd9WjLi6jP4ajJnrRvEltqjGcKG9s4muVUrfkS/3sTYjD+zIdlZ1DW3dLiNbdX7yU5JpldKMiKC26tQSuHyeIix2fhky07OGZ53dJtm2NmwfsL/Kv+516u8lSZFcACFJu074oXVjC4R6CfAOsD0K1s3FVy/eF/fM009B//lRX9m4+4VpCVlcvd3jx3O/ON1/+HNFU8x+9rXSU3KOG7d3/3zhyTEJ2MTGzaJ4a5vGdMUv7niaTbvXUVu9jCunWp8uVq19SMaHYc53/6tgOaXIA+6tmrXXsYO7t/hMmv3VDB28AAAEuNiGZ3bj0c/+oxhfbJJjItl78FaLjp1eDBjdskBR/nI+XvnVn0996biOFt8QYh3/2ju7Mk7QrzPqKFb+j1QUFK8BZNH4VSId81pv1pidsEHmHjyxcy49A/H3X6ooZqSsjVkpfbpcP1fXvZXfvPtp48W/GZHA7v2beK333kWr/JSfmAnTreDFVs+4NxTLg94/mAW/Y83byPGJpw+eGC7y7g9XjZV7GPMoK8+GM4fOZRfXTSZb449hfc3buWSUSezcuceXlz2BR9vNnca52ZPfb+39jw2pMF1aEUId1tBFI6FFUq66PfcbKDYjB17JdaxYsJ9K+syhp5rxv5bGzZgNMmJx4/f9tqyJ7hi4i1IN+eiEbHh9rqN7g23gxhbLP9bN48p9iuJiQn8l1SRlKAMPvd5aRnFldX8cMJpHU45XFJVTW5WBmmJx39xLD9kTG+bk5bC6tJyrj3rdKrq6qmpN7dr3aPcyQvKnp5Q0bQ9VF2dv8idPVlfRNcDuuj3UEFJsROjmyekp0G5YpLqlk56qLg5qfekUO63u9aXLiMzJYfc7I7PHBURHn/3Tv742nQ+2zwfgMT4ZMbmT2b2az8hO70fSfEp7K7ewui8IE1wZUvKDPQmSyqr+aRkBzecPY742JgOl/Xv2mnt/Y1buXjUyXh9ffxgPGcuT1iMESef7nvtvA2HlnymlHIGcT//yJ09+fUgbt8SdJ9+ABSUFH9aPLJgLvDTUOyvJT5z34oJv6v1xiSMDcX+TpTT1cIHX/6Tn1/6x06Xvf3y/yMzJYf65kM8Pv9O+mUOZtiA0Vw49vtcOPb7APxz8V+Ydub1LCteQHHZGgZmn8Qlp18TsLwicUlAC5B4Iuu/vPxLdtQcoNHh5IF3/sdFpw5nYckO3B4vTy9ZBcDgXpl8e5yduuYWXv18PTf5zvZxuj1s3befb51x/HV0G8urGNQrg4wkI9aQ7Ez+8sES+mekMSAzfEbG3ly7/JxDjn3rJvf99iAR6RXgze8Abg3wNi1Jn6cfIMUjC5KBNcDIYO6nIbn/rs/H/SZO2WJyg7mfE3Wgvoq5793N3d99jvIDO3ls/h3ExxrdFbWNNWSk5HDHlXNIT26/JixYXURCXBIXjPnu0dv27t/Gkk1v8e2zZvDEu7/h9sv/xvMfP8BlZ95An4zAPRUthx6tBNXx0VatQ2lxvXZfPPAGT4zEnhSgTXqAc3JnTw7lsYOopbt3AqSgpLgJ+CHG7D1BcShz+KZVZ/42PVwLfmsDs09i9nWv8furX+H3V79CZkpv7rpq7nEF3+FqpsXZdPT3krLVDMjKO2aZ+Z//g2njrsfj9aCUMeadiA2n2xHg1DH1Ad6g5dS7Dg55a8/j2S2exi8CtMmHdMEPHF30A6igpPhLgjT4U1Wfcau/HPPLPMSWHYztB8I/Pn6Qv775C/bV7eWel7/HspJ32122tnE/T7z7GwDqmw/x6Fu/5A+v3syf35jBqYMncsrgry5yWrfrM4b0HklmSg7JCank9T2Fh169CUE6PVbQbRJn9kVHUcHldWS8vWfO6AMtFUt6uKmV6GGTA0p37wRY8cgCAT4CvhaobZYOvmjpzvxvjkekRxcPaZ1z1D23QnnrJpqdI5qcnn3h4mFpp53I0A0NwGm5sycffxmzdsJ0Sz/ACkqKFXAtcCAQ2yse8cNFO/O/eZYu+CEiSXqkzQD74sBH563a/+5qpVR3T7W8TRf8wNNFPwgKSoorgBvpwWmcCtSXY25dXNn/7CkdntytBZTYksPiHMhoU9qwcfzHFS9VeJW3vIurvJE7e/JznS+mdZcu+kFSUFL8Nid45aBXbK6VZ96z7FDWCNOvsrUakRT9ARskB52VJ7+z98k4l9exqZNF9wI3hyKTFemiH1z3AfO7s4I7JqFh2aSH1jel9A/SFUhaR8SW2vEVVFqPtHga+ry557Gh9a6Dy9tZpAm4PHf25IB0j2rH00U/iApKir3ANcDWrizviEurWTrp4T3O+PQzgptMa5ctNd7sCNHOqzyJ75Y9M7GsccuiNu6+IXf25HCdpSsq6KIfZAUlxXXA5cDhjpZrSuqzZ9mkB5s8sYmnhCaZ1haxpZ7Q1bhat8nS6jenrDu4aKlS6sjFFg/nzp78H1NTWYAu+iFQUFJcAvyIdg7s1qbnl6wYf2+SssWaMzOGdpRIaqrZGaykpG7l2Yv3/Wery+v8J3qC85DQ5+mHUPHIgruBB/1vq84Z8+XGU28ehkiaSbE0P8rbuN9R91SO2TksZg1wXuG8+frCuBDQLf0QKigpfgh4+sj/9+Sev2zjqTefqgt+GJGkLEI8YqrF7QYu0wU/dPQom6H3M6D/1mHfTi8bOOVcfQ5+eBGxxQB1wPHTe2mBVgtcWjhvfpXZQaxEt/RDrKCk2LMnd+p3y3LPj9MFP1zZ6sxOYAFO4MrCefM3mx3EanTRN8HFH89pAS4DNpqdRWtLjJ6ZKbgUcGPhvPmLzA5iRbrom2TG3KmHgIuBXWZn0VqR+CazI0QxL/Djwnnz/2l2EKvSRd9EM+ZOrQDOB0pNjqL5EUkI5pR/VuYBflQ4b/4/zA5iZbrom2zG3Km7gfOAnWZn0XxseqTNIHAB3yucN/8Vs4NYnS76YWDG3Kl7gCmAHkY2DIik6FM2A8sBXFU4b/5rZgfRdNEPGzPmTt2LUfi7NE6PFjxiS9VnVQVOM3B54bz53Rp4UAseXfTDyIy5U8sxCv8Wk6NYmthS9YQ1gdEITCucN/8Ds4NoX9FFP8zMmDu1EjgXWG12FqsSPdJmIBwGLi6cN/8Ts4Nox9JFPwzNmDu1GqPFv8DkKJYkkppsdoYIdwi4sHDe/KVmB9GOp4t+mJoxd2ojxpDMT3e2rBZgthQ9FtKJ2w98rXDe/FVmB9HapkfZjABzpi88bnROLXiUchx21M5JNztHBPoS4yydUrODaO3TLf0IMGPu1IeA6zDOddaCTCQhHXCbnSPCvAScrQt++NMt/QgyZ/rCc4BXgX5mZ4l2LYceqQF6m50jAriBXxXOm/+Y2UG0rtEt/QgyY+7Uz4DTgWVmZ4l+MR1Ob6kBsA+Yqgt+ZNFFP8L4TumcAjxucpToJrF6Uo+OrQDOKJw3/1Ozg2jdo7t3Itic6Qt/BDwFJJmdJdq01D2zCm/9eLNzhKmngV8UzpuvB6aLQLroR7g50xeOwejnH252lmjiOPzSZ8pTc47ZOcKMA/h54bz5z5odRDtxunsnws2YO3UdMBaYa3KUqCKS7DE7Q5gpA87VBT/y6ZZ+FJkzfeGlwPNAX7OzRDpn4/uLvM7NU8zOEQYU8BxwR+G8+bUmZ9ECQBf9KDNn+sIc4BngCpOjRDRX82efelpWTTY7h8m2AbfoaQ2jiy76UWrO9IU3An8D9JACJ8DdsnaFu3nhRLNzmMQN/AW4v3De/Bazw2iBpYt+FJszfeEAjML/HZOjRByPc/taV+PbY83OYYI1wE2F8+avNTuIFhy66FvAnOkLLwHmACeZnSVSeN1V25z1r1jpjKhm4D7gkcJ58/VB7Cimi75FzJm+MBG4G7gT0OPFd0J566scdc9YZbiL/wE/KZw3f4fZQbTg00XfYuZMXzgC42reC8zOEs6Ucrc4av+eaHaOIDsE/Lpw3vznzQ6ihY4u+hY1Z/rCi4E/AmPMzhKuWg490gRE44QqzcBjwOzCefMPmR1GCy1d9C1szvSFAlyNMVb/EJPjhJ2WQ49WgBpgdo4AcmNcx3F/4bz5FWaH0cyhi77GnOkLE4CfYfT5Z5scJ2y0HPr7FnCPMDtHACiMoTruKZw3f5vZYTRz6aKvHTVn+sIM4BfAreix5GmpffILVPPpZufoAS/wX+DBwnnzN5gdRgsPuuhrx5kzfWES8GOgEMgzN415HHXPL1fe2klm5zgBHuBfwMOF8+YXmx1GCy+66GvtmjN9YSzwfeAuYJTJcULOcfhfS5Sn8lyzc3SDE/gnRrHfbnYYLTzpoq91ynfA91KMrp+LADE3UWg4G95a5HXtmGJ2ji7YiDEo2kuF8+YfMDuMFt500de6Zc70hcOA6cD1RPlBX1fT/xZ7HOvOMztHOxqAfwPPFs6bv9LsMFrk0EVfOyG+M36uAG4CvkYUtv7dzSuWuluWnW12jlaWY7Tq5xXOm99gdhgt8uiir/XYnOkLhwDfA74LnGFynIBxOzatcjd9EA5TJu4HXsJo1W82O4wW2XTR1wJqzvSFJ2EU/+9hzOgVsTyu3RtcDa/ZTdp9LfAxxvn1bwZrPloRycYYewegH8aZPzUYZ21VKKVOCcZ+NfPooq8FzZzpC4djDOv8dWAiEGtuou7xevbvch5+MT9UuwNWAx8A7wMrQz3apYjMAhqUUn8RkTxgvlLKcmdtRTtd9LWQmDN9YTowFePsn4uAoeYm6pzyNh101M3tFcRdVGIU+Q+Aj8w+86aNov8e8BlwFlAOXK6UahaRRcCvlVKrRSQHWK2UyjMntdZdEdXy0iLXjLlTDwNv+n6YM33hUOBC4GxgAjCMcDsYLIkZGEMYBCqXE6OIfgC8Xzhv/voAbTdYhgM/UErdLCL/Ab4FvGxyJq2HdNHXTDFj7tQdwA5gLsCc6QuzgPEYHwATfL/nmBYQELHFYPStZ57A6uXABt/PRt+/xRE2/eAupdRa3+9rsPDV2dFEF/0o18GBOoDxSqmgHCDsrhlzpx7iq64OAOZMXzgQGAmM8P175CeXkH0rsNWBN7ODBWr5qqgf/TdKhix2+P3uAZJ8v7sBm+/3aJ9zIOrooh/llFIH8J1F499na2amrpoxd2o5Rov5f/63z5m+MAXjmMAAoH87P+kYY+En0X0K4+KnQ0jielRTCbDP76fK97OlcN78shPYfqQrxTg1dxXwbXOjaN2li74FicgLGGdm/Nf3/walVKrv9zswTrlMAN5QSt1nWtB2zJg7tRFY7/vpkG8IiWTfT4rv3ziM1qrL96//jxOonzF3qu/MmakBzx8F/gL8R0R+BCw0O4zWPfrsHQs50tLHGDztuKIvIhdhtNx+gtF98jbwJ6XUEpMia5oWYLqlr/k7cjrll77/p2KcwaGLvqZFCV30renogTgRESDed7sAf1BKPWVWME3TgsvW+SJaFCrlqzFyLsfo4wbjzJkbReRI//5AEekT+niapgWLbulb0zPAWyKyCuPMmEYApdSHIlIALDe+ANAAXANUmxVU07TA0gdyNU3TLER372iaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplmILvqapmkWoou+pmmaheiir2maZiG66GuaplnI/wN3VlCHCGayUQAAAABJRU5ErkJggg==\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Круговая диаграмма распределения игр по паркам\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "park_counts = data['day_of_week'].value_counts()\n",
-    "plt.pie(park_counts, labels=park_counts.index, autopct='%1.1f%%')\n",
-    "plt.title('Круговая диаграмма распределения игр по дням недели')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 41,
-   "id": "98b13bc0",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 2 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Корреляционная матрица для связи различных числовых переменных\n",
-    "numerical_vars = ['v_hits', 'h_hits', 'h_walks', 'h_errors']\n",
-    "correlation_matrix = dataset[numerical_vars].corr()\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
-    "plt.title('Корреляционная матрица')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "52536c27",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.9.7"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
Index: результаты_1.json
===================================================================
diff --git a/результаты_1.json b/результаты_1.json
deleted file mode 100644
--- a/результаты_1.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"file_in_memory_size": "    880053 KB", "columns": [{"column_name": "h_manager_name", "memory_abs": 11556, "memory_per": 1.3131, "dtype": "object"}, {"column_name": "v_manager_name", "memory_abs": 11555, "memory_per": 1.3131, "dtype": "object"}, {"column_name": "hp_umpire_name", "memory_abs": 11536, "memory_per": 1.3109, "dtype": "object"}, {"column_name": "1b_umpire_name", "memory_abs": 11405, "memory_per": 1.296, "dtype": "object"}, {"column_name": "v_starting_pitcher_name", "memory_abs": 11396, "memory_per": 1.295, "dtype": "object"}, {"column_name": "h_starting_pitcher_name", "memory_abs": 11396, "memory_per": 1.295, "dtype": "object"}, {"column_name": "3b_umpire_name", "memory_abs": 11210, "memory_per": 1.2738, "dtype": "object"}, {"column_name": "2b_umpire_name", "memory_abs": 11049, "memory_per": 1.2555, "dtype": "object"}, {"column_name": "v_manager_id", "memory_abs": 10912, "memory_per": 1.2399, "dtype": "object"}, {"column_name": "h_manager_id", "memory_abs": 10912, "memory_per": 1.2399, "dtype": "object"}, {"column_name": "hp_umpire_id", "memory_abs": 10911, "memory_per": 1.2399, "dtype": "object"}, {"column_name": "v_starting_pitcher_id", "memory_abs": 10910, "memory_per": 1.2398, "dtype": "object"}, {"column_name": "h_starting_pitcher_id", "memory_abs": 10910, "memory_per": 1.2398, "dtype": "object"}, {"column_name": "lf_umpire_name", "memory_abs": 10577, "memory_per": 1.2019, "dtype": "object"}, {"column_name": "rf_umpire_name", "memory_abs": 10576, "memory_per": 1.2018, "dtype": "object"}, {"column_name": "v_player_1_name", "memory_abs": 10472, "memory_per": 1.19, "dtype": "object"}, {"column_name": "h_player_1_name", "memory_abs": 10472, "memory_per": 1.19, "dtype": "object"}, {"column_name": "v_player_7_name", "memory_abs": 10463, "memory_per": 1.189, "dtype": "object"}, {"column_name": "h_player_7_name", "memory_abs": 10463, "memory_per": 1.1889, "dtype": "object"}, {"column_name": "v_player_8_name", "memory_abs": 10460, "memory_per": 1.1886, "dtype": "object"}, {"column_name": "h_player_2_name", "memory_abs": 10460, "memory_per": 1.1886, "dtype": "object"}, {"column_name": "h_player_8_name", "memory_abs": 10460, "memory_per": 1.1886, "dtype": "object"}, {"column_name": "v_player_2_name", "memory_abs": 10459, "memory_per": 1.1885, "dtype": "object"}, {"column_name": "v_player_3_name", "memory_abs": 10454, "memory_per": 1.1879, "dtype": "object"}, {"column_name": "h_player_3_name", "memory_abs": 10454, "memory_per": 1.1879, "dtype": "object"}, {"column_name": "v_player_4_name", "memory_abs": 10453, "memory_per": 1.1878, "dtype": "object"}, {"column_name": "h_player_4_name", "memory_abs": 10453, "memory_per": 1.1879, "dtype": "object"}, {"column_name": "h_player_6_name", "memory_abs": 10452, "memory_per": 1.1877, "dtype": "object"}, {"column_name": "v_player_6_name", "memory_abs": 10451, "memory_per": 1.1876, "dtype": "object"}, {"column_name": "v_player_9_name", "memory_abs": 10450, "memory_per": 1.1875, "dtype": "object"}, {"column_name": "h_player_9_name", "memory_abs": 10450, "memory_per": 1.1875, "dtype": "object"}, {"column_name": "v_player_5_name", "memory_abs": 10445, "memory_per": 1.1869, "dtype": "object"}, {"column_name": "h_player_5_name", "memory_abs": 10444, "memory_per": 1.1868, "dtype": "object"}, {"column_name": "losing_pitcher_name", "memory_abs": 10423, "memory_per": 1.1844, "dtype": "object"}, {"column_name": "winning_pitcher_name", "memory_abs": 10422, "memory_per": 1.1843, "dtype": "object"}, {"column_name": "park_id", "memory_abs": 10408, "memory_per": 1.1827, "dtype": "object"}, {"column_name": "h_line_score", "memory_abs": 10288, "memory_per": 1.1691, "dtype": "object"}, {"column_name": "v_line_score", "memory_abs": 10260, "memory_per": 1.1659, "dtype": "object"}, {"column_name": "winning_rbi_batter_id_name", "memory_abs": 10257, "memory_per": 1.1656, "dtype": "object"}, {"column_name": "1b_umpire_id", "memory_abs": 10110, "memory_per": 1.1489, "dtype": "object"}, {"column_name": "day_of_week", "memory_abs": 10072, "memory_per": 1.1446, "dtype": "object"}, {"column_name": "v_name", "memory_abs": 10072, "memory_per": 1.1446, "dtype": "object"}, {"column_name": "h_name", "memory_abs": 10072, "memory_per": 1.1446, "dtype": "object"}, {"column_name": "saving_pitcher_name", "memory_abs": 9922, "memory_per": 1.1275, "dtype": "object"}, {"column_name": "v_player_1_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_2_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_3_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_4_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_5_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_6_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_7_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_8_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_player_9_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_1_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_2_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_3_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_4_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_5_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_6_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_7_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_8_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "h_player_9_id", "memory_abs": 9910, "memory_per": 1.1262, "dtype": "object"}, {"column_name": "v_league", "memory_abs": 9904, "memory_per": 1.1255, "dtype": "object"}, {"column_name": "h_league", "memory_abs": 9904, "memory_per": 1.1255, "dtype": "object"}, {"column_name": "winning_pitcher_id", "memory_abs": 9891, "memory_per": 1.1239, "dtype": "object"}, {"column_name": "losing_pitcher_id", "memory_abs": 9891, "memory_per": 1.1239, "dtype": "object"}, {"column_name": "3b_umpire_id", "memory_abs": 9133, "memory_per": 1.0379, "dtype": "object"}, {"column_name": "acquisition_info", "memory_abs": 8948, "memory_per": 1.0168, "dtype": "object"}, {"column_name": "day_night", "memory_abs": 8930, "memory_per": 1.0148, "dtype": "object"}, {"column_name": "winning_rbi_batter_id", "memory_abs": 8778, "memory_per": 0.9975, "dtype": "object"}, {"column_name": "2b_umpire_id", "memory_abs": 8225, "memory_per": 0.9347, "dtype": "object"}, {"column_name": "saving_pitcher_id", "memory_abs": 6919, "memory_per": 0.7863, "dtype": "object"}, {"column_name": "additional_info", "memory_abs": 5429, "memory_per": 0.6169, "dtype": "object"}, {"column_name": "lf_umpire_id", "memory_abs": 5378, "memory_per": 0.6112, "dtype": "object"}, {"column_name": "completion", "memory_abs": 5376, "memory_per": 0.611, "dtype": "object"}, {"column_name": "protest", "memory_abs": 5376, "memory_per": 0.6109, "dtype": "object"}, {"column_name": "forefeit", "memory_abs": 5375, "memory_per": 0.6108, "dtype": "object"}, {"column_name": "rf_umpire_id", "memory_abs": 5372, "memory_per": 0.6105, "dtype": "object"}, {"column_name": "date", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "int64"}, {"column_name": "number_of_game", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "int64"}, {"column_name": "v_game_number", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "int64"}, {"column_name": "h_game_number", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "int64"}, {"column_name": "v_score", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "int64"}, {"column_name": "h_score", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "int64"}, {"column_name": "length_outs", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "attendance", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "length_minutes", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_at_bats", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_hits", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_doubles", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_triples", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_homeruns", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_rbi", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_sacrifice_hits", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_sacrifice_flies", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_hit_by_pitch", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_walks", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_intentional walks", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_strikeouts", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_stolen_bases", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_caught_stealing", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_grounded_into_double", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_first_catcher_interference", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_left_on_base", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_pitchers_used", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_individual_earned_runs", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_team_earned_runs", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_wild_pitches", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_balks", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_putouts", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_assists", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_errors", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_passed_balls", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_double_plays", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_triple_plays", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_at_bats", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_hits", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_doubles", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_triples", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_homeruns", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_rbi", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_sacrifice_hits", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_sacrifice_flies", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_hit_by_pitch", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_walks", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_intentional walks", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_strikeouts", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_stolen_bases", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_caught_stealing", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_grounded_into_double", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_first_catcher_interference", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_left_on_base", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_pitchers_used", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_individual_earned_runs", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_team_earned_runs", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_wild_pitches", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_balks", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_putouts", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_assists", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_errors", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_passed_balls", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_double_plays", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_triple_plays", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_1_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_2_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_3_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_4_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_5_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_6_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_7_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_8_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "v_player_9_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_1_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_2_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_3_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_4_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_5_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_6_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_7_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_8_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}, {"column_name": "h_player_9_def_pos", "memory_abs": 1343, "memory_per": 0.1526, "dtype": "float64"}]}
\ No newline at end of file
Index: результаты_6.json
===================================================================
diff --git a/результаты_6.json b/результаты_6.json
deleted file mode 100644
--- a/результаты_6.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"file_in_memory_size": "   2924049 KB", "columns": [{"column_name": "LOCATION", "memory_abs": 270747, "memory_per": 9.2593, "dtype": "object"}, {"column_name": "Crm Cd Desc", "memory_abs": 251321, "memory_per": 8.595, "dtype": "object"}, {"column_name": "Date Rptd", "memory_abs": 230938, "memory_per": 7.8979, "dtype": "object"}, {"column_name": "DATE OCC", "memory_abs": 230938, "memory_per": 7.8979, "dtype": "object"}, {"column_name": "Premis Desc", "memory_abs": 218948, "memory_per": 7.4878, "dtype": "object"}, {"column_name": "Status Desc", "memory_abs": 199039, "memory_per": 6.807, "dtype": "object"}, {"column_name": "Mocodes", "memory_abs": 194239, "memory_per": 6.6428, "dtype": "object"}, {"column_name": "AREA NAME", "memory_abs": 191027, "memory_per": 6.533, "dtype": "object"}, {"column_name": "Status", "memory_abs": 172473, "memory_per": 5.8984, "dtype": "object"}, {"column_name": "Vict Sex", "memory_abs": 161552, "memory_per": 5.525, "dtype": "object"}, {"column_name": "Vict Descent", "memory_abs": 161551, "memory_per": 5.5249, "dtype": "object"}, {"column_name": "Weapon Desc", "memory_abs": 151964, "memory_per": 5.1971, "dtype": "object"}, {"column_name": "Cross Street", "memory_abs": 115126, "memory_per": 3.9372, "dtype": "object"}, {"column_name": "DR_NO", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "int64"}, {"column_name": "TIME OCC", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "int64"}, {"column_name": "AREA ", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "Rpt Dist No", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "int64"}, {"column_name": "Part 1-2", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "int64"}, {"column_name": "Crm Cd", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "int64"}, {"column_name": "Vict Age", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "int64"}, {"column_name": "Premis Cd", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "Weapon Used Cd", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "Crm Cd 1", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "Crm Cd 2", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "Crm Cd 3", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "Crm Cd 4", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "LAT", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "LON", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}, {"column_name": "AREA", "memory_abs": 23386, "memory_per": 0.7998, "dtype": "float64"}]}
\ No newline at end of file
Index: результаты_4.json
===================================================================
diff --git a/результаты_4.json b/результаты_4.json
deleted file mode 100644
--- a/результаты_4.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"file_in_memory_size": "   4450191 KB", "columns": [{"column_name": "description", "memory_abs": 2235413, "memory_per": 50.2319, "dtype": "object"}, {"column_name": "specializations", "memory_abs": 301473, "memory_per": 6.7744, "dtype": "object"}, {"column_name": "terms_found", "memory_abs": 196396, "memory_per": 4.4132, "dtype": "object"}, {"column_name": "employer_industries", "memory_abs": 154627, "memory_per": 3.4746, "dtype": "object"}, {"column_name": "key_skills", "memory_abs": 109673, "memory_per": 2.4645, "dtype": "object"}, {"column_name": "name", "memory_abs": 78280, "memory_per": 1.759, "dtype": "object"}, {"column_name": "apply_alternate_url", "memory_abs": 66568, "memory_per": 1.4959, "dtype": "object"}, {"column_name": "employment_name", "memory_abs": 65511, "memory_per": 1.4721, "dtype": "object"}, {"column_name": "experience_name", "memory_abs": 64003, "memory_per": 1.4382, "dtype": "object"}, {"column_name": "schedule_name", "memory_abs": 60717, "memory_per": 1.3644, "dtype": "object"}, {"column_name": "employer_vacancies_url", "memory_abs": 58989, "memory_per": 1.3255, "dtype": "object"}, {"column_name": "employer_name", "memory_abs": 57997, "memory_per": 1.3032, "dtype": "object"}, {"column_name": "billing_type_name", "memory_abs": 57220, "memory_per": 1.2858, "dtype": "object"}, {"column_name": "area_name", "memory_abs": 56828, "memory_per": 1.277, "dtype": "object"}, {"column_name": "type_name", "memory_abs": 56242, "memory_per": 1.2638, "dtype": "object"}, {"column_name": "alternate_url", "memory_abs": 49926, "memory_per": 1.1219, "dtype": "object"}, {"column_name": "employer_alternate_url", "memory_abs": 49252, "memory_per": 1.1068, "dtype": "object"}, {"column_name": "area_url", "memory_abs": 47584, "memory_per": 1.0693, "dtype": "object"}, {"column_name": "created_at", "memory_abs": 46483, "memory_per": 1.0445, "dtype": "object"}, {"column_name": "published_at", "memory_abs": 46483, "memory_per": 1.0445, "dtype": "object"}, {"column_name": "address_street", "memory_abs": 41871, "memory_per": 0.9409, "dtype": "object"}, {"column_name": "experience_id", "memory_abs": 39549, "memory_per": 0.8887, "dtype": "object"}, {"column_name": "prof_classes_found", "memory_abs": 37803, "memory_per": 0.8495, "dtype": "object"}, {"column_name": "billing_type_id", "memory_abs": 37681, "memory_per": 0.8467, "dtype": "object"}, {"column_name": "schedule_id", "memory_abs": 36690, "memory_per": 0.8245, "dtype": "object"}, {"column_name": "address_city", "memory_abs": 36446, "memory_per": 0.819, "dtype": "object"}, {"column_name": "employment_id", "memory_abs": 35043, "memory_per": 0.7875, "dtype": "object"}, {"column_name": "type_id", "memory_abs": 35012, "memory_per": 0.7868, "dtype": "object"}, {"column_name": "address_building", "memory_abs": 28703, "memory_per": 0.645, "dtype": "object"}, {"column_name": "salary_currency", "memory_abs": 26157, "memory_per": 0.5878, "dtype": "object"}, {"column_name": "department_name", "memory_abs": 21653, "memory_per": 0.4866, "dtype": "object"}, {"column_name": "employer_trusted", "memory_abs": 20623, "memory_per": 0.4634, "dtype": "object"}, {"column_name": "contacts", "memory_abs": 20516, "memory_per": 0.461, "dtype": "object"}, {"column_name": "department_id", "memory_abs": 19875, "memory_per": 0.4466, "dtype": "object"}, {"column_name": "insider_interview", "memory_abs": 18981, "memory_per": 0.4265, "dtype": "object"}, {"column_name": "salary_gross", "memory_abs": 18726, "memory_per": 0.4208, "dtype": "object"}, {"column_name": "code", "memory_abs": 18635, "memory_per": 0.4187, "dtype": "object"}, {"column_name": "response_url", "memory_abs": 18443, "memory_per": 0.4145, "dtype": "object"}, {"column_name": "driver_license_types", "memory_abs": 18408, "memory_per": 0.4137, "dtype": "object"}, {"column_name": "test_required", "memory_abs": 18372, "memory_per": 0.4128, "dtype": "object"}, {"column_name": "id", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "int64"}, {"column_name": "employer_id", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "float64"}, {"column_name": "salary_from", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "float64"}, {"column_name": "salary_to", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "float64"}, {"column_name": "area_id", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "int64"}, {"column_name": "address_description", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "float64"}, {"column_name": "address_lat", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "float64"}, {"column_name": "address_lng", "memory_abs": 4590, "memory_per": 0.1032, "dtype": "float64"}, {"column_name": "accept_handicapped", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}, {"column_name": "accept_kids", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}, {"column_name": "allow_messages", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}, {"column_name": "premium", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}, {"column_name": "accept_incomplete_resumes", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}, {"column_name": "response_letter_required", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}, {"column_name": "has_test", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}, {"column_name": "archived", "memory_abs": 573, "memory_per": 0.0129, "dtype": "bool"}]}
\ No newline at end of file
Index: Задача 6.ipynb
===================================================================
diff --git a/Задача 6.ipynb b/Задача 6.ipynb
deleted file mode 100644
--- a/Задача 6.ipynb	
+++ /dev/null	
@@ -1,1160 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "a3afc43e",
-   "metadata": {},
-   "source": [
-    "https://www.kaggle.com/datasets/manjitbaishya001/la-crime-data-2010-to-2023"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "0ce40138",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import numpy as np\n",
-    "import os\n",
-    "import seaborn as sns"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "2f13d169",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "pd.set_option(\"display.max_rows\", 20, \"display.max_columns\", 60)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "db6c1bd8",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def read_file(file_name):\n",
-    "    return pd.read_csv(file_name)\n",
-    "    # для заархивированных файлов\n",
-    "    # df = pd.read_csv(dataset[year], chunksize=chanksize, compression='gzip')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "d24871de",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>DR_NO</th>\n",
-       "      <th>Date Rptd</th>\n",
-       "      <th>DATE OCC</th>\n",
-       "      <th>TIME OCC</th>\n",
-       "      <th>AREA</th>\n",
-       "      <th>AREA NAME</th>\n",
-       "      <th>Rpt Dist No</th>\n",
-       "      <th>Part 1-2</th>\n",
-       "      <th>Crm Cd</th>\n",
-       "      <th>Crm Cd Desc</th>\n",
-       "      <th>Mocodes</th>\n",
-       "      <th>Vict Age</th>\n",
-       "      <th>Vict Sex</th>\n",
-       "      <th>Vict Descent</th>\n",
-       "      <th>Premis Cd</th>\n",
-       "      <th>Premis Desc</th>\n",
-       "      <th>Weapon Used Cd</th>\n",
-       "      <th>Weapon Desc</th>\n",
-       "      <th>Status</th>\n",
-       "      <th>Status Desc</th>\n",
-       "      <th>Crm Cd 1</th>\n",
-       "      <th>Crm Cd 2</th>\n",
-       "      <th>Crm Cd 3</th>\n",
-       "      <th>Crm Cd 4</th>\n",
-       "      <th>LOCATION</th>\n",
-       "      <th>Cross Street</th>\n",
-       "      <th>LAT</th>\n",
-       "      <th>LON</th>\n",
-       "      <th>AREA</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>1307355</td>\n",
-       "      <td>02/20/2010 12:00:00 AM</td>\n",
-       "      <td>02/20/2010 12:00:00 AM</td>\n",
-       "      <td>1350</td>\n",
-       "      <td>13.0</td>\n",
-       "      <td>Newton</td>\n",
-       "      <td>1385</td>\n",
-       "      <td>2</td>\n",
-       "      <td>900</td>\n",
-       "      <td>VIOLATION OF COURT ORDER</td>\n",
-       "      <td>0913 1814 2000</td>\n",
-       "      <td>48</td>\n",
-       "      <td>M</td>\n",
-       "      <td>H</td>\n",
-       "      <td>501.0</td>\n",
-       "      <td>SINGLE FAMILY DWELLING</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>AA</td>\n",
-       "      <td>Adult Arrest</td>\n",
-       "      <td>900.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>300 E  GAGE                         AV</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>33.9825</td>\n",
-       "      <td>-118.2695</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>11401303</td>\n",
-       "      <td>09/13/2010 12:00:00 AM</td>\n",
-       "      <td>09/12/2010 12:00:00 AM</td>\n",
-       "      <td>45</td>\n",
-       "      <td>14.0</td>\n",
-       "      <td>Pacific</td>\n",
-       "      <td>1485</td>\n",
-       "      <td>2</td>\n",
-       "      <td>740</td>\n",
-       "      <td>VANDALISM - FELONY ($400 &amp; OVER, ALL CHURCH VA...</td>\n",
-       "      <td>0329</td>\n",
-       "      <td>0</td>\n",
-       "      <td>M</td>\n",
-       "      <td>W</td>\n",
-       "      <td>101.0</td>\n",
-       "      <td>STREET</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>740.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>SEPULVEDA                    BL</td>\n",
-       "      <td>MANCHESTER                   AV</td>\n",
-       "      <td>33.9599</td>\n",
-       "      <td>-118.3962</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>70309629</td>\n",
-       "      <td>08/09/2010 12:00:00 AM</td>\n",
-       "      <td>08/09/2010 12:00:00 AM</td>\n",
-       "      <td>1515</td>\n",
-       "      <td>13.0</td>\n",
-       "      <td>Newton</td>\n",
-       "      <td>1324</td>\n",
-       "      <td>2</td>\n",
-       "      <td>946</td>\n",
-       "      <td>OTHER MISCELLANEOUS CRIME</td>\n",
-       "      <td>0344</td>\n",
-       "      <td>0</td>\n",
-       "      <td>M</td>\n",
-       "      <td>H</td>\n",
-       "      <td>103.0</td>\n",
-       "      <td>ALLEY</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>946.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>1300 E  21ST                         ST</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>34.0224</td>\n",
-       "      <td>-118.2524</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>90631215</td>\n",
-       "      <td>01/05/2010 12:00:00 AM</td>\n",
-       "      <td>01/05/2010 12:00:00 AM</td>\n",
-       "      <td>150</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>Hollywood</td>\n",
-       "      <td>646</td>\n",
-       "      <td>2</td>\n",
-       "      <td>900</td>\n",
-       "      <td>VIOLATION OF COURT ORDER</td>\n",
-       "      <td>1100 0400 1402</td>\n",
-       "      <td>47</td>\n",
-       "      <td>F</td>\n",
-       "      <td>W</td>\n",
-       "      <td>101.0</td>\n",
-       "      <td>STREET</td>\n",
-       "      <td>102.0</td>\n",
-       "      <td>HAND GUN</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>900.0</td>\n",
-       "      <td>998.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>CAHUENGA                     BL</td>\n",
-       "      <td>HOLLYWOOD                    BL</td>\n",
-       "      <td>34.1016</td>\n",
-       "      <td>-118.3295</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>100100501</td>\n",
-       "      <td>01/03/2010 12:00:00 AM</td>\n",
-       "      <td>01/02/2010 12:00:00 AM</td>\n",
-       "      <td>2100</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>Central</td>\n",
-       "      <td>176</td>\n",
-       "      <td>1</td>\n",
-       "      <td>122</td>\n",
-       "      <td>RAPE, ATTEMPTED</td>\n",
-       "      <td>0400</td>\n",
-       "      <td>47</td>\n",
-       "      <td>F</td>\n",
-       "      <td>H</td>\n",
-       "      <td>103.0</td>\n",
-       "      <td>ALLEY</td>\n",
-       "      <td>400.0</td>\n",
-       "      <td>STRONG-ARM (HANDS, FIST, FEET OR BODILY FORCE)</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>122.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>8TH                          ST</td>\n",
-       "      <td>SAN PEDRO                    ST</td>\n",
-       "      <td>34.0387</td>\n",
-       "      <td>-118.2488</td>\n",
-       "      <td>NaN</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2993428</th>\n",
-       "      <td>231606525</td>\n",
-       "      <td>03/22/2023 12:00:00 AM</td>\n",
-       "      <td>03/22/2023 12:00:00 AM</td>\n",
-       "      <td>1000</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Foothill</td>\n",
-       "      <td>1602</td>\n",
-       "      <td>1</td>\n",
-       "      <td>230</td>\n",
-       "      <td>ASSAULT WITH DEADLY WEAPON, AGGRAVATED ASSAULT</td>\n",
-       "      <td>0416 0411 1822</td>\n",
-       "      <td>25</td>\n",
-       "      <td>F</td>\n",
-       "      <td>H</td>\n",
-       "      <td>102.0</td>\n",
-       "      <td>SIDEWALK</td>\n",
-       "      <td>400.0</td>\n",
-       "      <td>STRONG-ARM (HANDS, FIST, FEET OR BODILY FORCE)</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>230.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>12800    FILMORE                      ST</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>34.2790</td>\n",
-       "      <td>-118.4116</td>\n",
-       "      <td>16.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2993429</th>\n",
-       "      <td>231210064</td>\n",
-       "      <td>04/12/2023 12:00:00 AM</td>\n",
-       "      <td>04/12/2023 12:00:00 AM</td>\n",
-       "      <td>1630</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>77th Street</td>\n",
-       "      <td>1239</td>\n",
-       "      <td>1</td>\n",
-       "      <td>230</td>\n",
-       "      <td>ASSAULT WITH DEADLY WEAPON, AGGRAVATED ASSAULT</td>\n",
-       "      <td>0601 0445 0416 0359</td>\n",
-       "      <td>29</td>\n",
-       "      <td>M</td>\n",
-       "      <td>B</td>\n",
-       "      <td>222.0</td>\n",
-       "      <td>LAUNDROMAT</td>\n",
-       "      <td>500.0</td>\n",
-       "      <td>UNKNOWN WEAPON/OTHER WEAPON</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>230.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>6100 S  VERMONT                      AV</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>33.9841</td>\n",
-       "      <td>-118.2915</td>\n",
-       "      <td>12.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2993430</th>\n",
-       "      <td>230115220</td>\n",
-       "      <td>07/02/2023 12:00:00 AM</td>\n",
-       "      <td>07/01/2023 12:00:00 AM</td>\n",
-       "      <td>1</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Central</td>\n",
-       "      <td>154</td>\n",
-       "      <td>1</td>\n",
-       "      <td>352</td>\n",
-       "      <td>PICKPOCKET</td>\n",
-       "      <td>1822 0344</td>\n",
-       "      <td>24</td>\n",
-       "      <td>F</td>\n",
-       "      <td>H</td>\n",
-       "      <td>735.0</td>\n",
-       "      <td>NIGHT CLUB (OPEN EVENINGS ONLY)</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>352.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>500 S  MAIN                         ST</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>34.0467</td>\n",
-       "      <td>-118.2485</td>\n",
-       "      <td>1.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2993431</th>\n",
-       "      <td>230906458</td>\n",
-       "      <td>03/05/2023 12:00:00 AM</td>\n",
-       "      <td>03/05/2023 12:00:00 AM</td>\n",
-       "      <td>900</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Van Nuys</td>\n",
-       "      <td>914</td>\n",
-       "      <td>2</td>\n",
-       "      <td>745</td>\n",
-       "      <td>VANDALISM - MISDEAMEANOR ($399 OR UNDER)</td>\n",
-       "      <td>0329 1822</td>\n",
-       "      <td>53</td>\n",
-       "      <td>F</td>\n",
-       "      <td>H</td>\n",
-       "      <td>502.0</td>\n",
-       "      <td>MULTI-UNIT DWELLING (APARTMENT, DUPLEX, ETC)</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>745.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>14500    HARTLAND                     ST</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>34.1951</td>\n",
-       "      <td>-118.4487</td>\n",
-       "      <td>9.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2993432</th>\n",
-       "      <td>230319786</td>\n",
-       "      <td>11/10/2023 12:00:00 AM</td>\n",
-       "      <td>11/09/2023 12:00:00 AM</td>\n",
-       "      <td>2300</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>Southwest</td>\n",
-       "      <td>395</td>\n",
-       "      <td>1</td>\n",
-       "      <td>331</td>\n",
-       "      <td>THEFT FROM MOTOR VEHICLE - GRAND ($950.01 AND ...</td>\n",
-       "      <td>1822 1606 0344 0385 1300</td>\n",
-       "      <td>38</td>\n",
-       "      <td>M</td>\n",
-       "      <td>W</td>\n",
-       "      <td>501.0</td>\n",
-       "      <td>SINGLE FAMILY DWELLING</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>IC</td>\n",
-       "      <td>Invest Cont</td>\n",
-       "      <td>331.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>4100 S  HOBART                       BL</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>34.0091</td>\n",
-       "      <td>-118.3078</td>\n",
-       "      <td>3.0</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>2993433 rows × 29 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "             DR_NO               Date Rptd                DATE OCC  TIME OCC  \\\n",
-       "0          1307355  02/20/2010 12:00:00 AM  02/20/2010 12:00:00 AM      1350   \n",
-       "1         11401303  09/13/2010 12:00:00 AM  09/12/2010 12:00:00 AM        45   \n",
-       "2         70309629  08/09/2010 12:00:00 AM  08/09/2010 12:00:00 AM      1515   \n",
-       "3         90631215  01/05/2010 12:00:00 AM  01/05/2010 12:00:00 AM       150   \n",
-       "4        100100501  01/03/2010 12:00:00 AM  01/02/2010 12:00:00 AM      2100   \n",
-       "...            ...                     ...                     ...       ...   \n",
-       "2993428  231606525  03/22/2023 12:00:00 AM  03/22/2023 12:00:00 AM      1000   \n",
-       "2993429  231210064  04/12/2023 12:00:00 AM  04/12/2023 12:00:00 AM      1630   \n",
-       "2993430  230115220  07/02/2023 12:00:00 AM  07/01/2023 12:00:00 AM         1   \n",
-       "2993431  230906458  03/05/2023 12:00:00 AM  03/05/2023 12:00:00 AM       900   \n",
-       "2993432  230319786  11/10/2023 12:00:00 AM  11/09/2023 12:00:00 AM      2300   \n",
-       "\n",
-       "         AREA     AREA NAME  Rpt Dist No  Part 1-2  Crm Cd  \\\n",
-       "0         13.0       Newton         1385         2     900   \n",
-       "1         14.0      Pacific         1485         2     740   \n",
-       "2         13.0       Newton         1324         2     946   \n",
-       "3          6.0    Hollywood          646         2     900   \n",
-       "4          1.0      Central          176         1     122   \n",
-       "...        ...          ...          ...       ...     ...   \n",
-       "2993428    NaN     Foothill         1602         1     230   \n",
-       "2993429    NaN  77th Street         1239         1     230   \n",
-       "2993430    NaN      Central          154         1     352   \n",
-       "2993431    NaN     Van Nuys          914         2     745   \n",
-       "2993432    NaN    Southwest          395         1     331   \n",
-       "\n",
-       "                                               Crm Cd Desc  \\\n",
-       "0                                 VIOLATION OF COURT ORDER   \n",
-       "1        VANDALISM - FELONY ($400 & OVER, ALL CHURCH VA...   \n",
-       "2                                OTHER MISCELLANEOUS CRIME   \n",
-       "3                                 VIOLATION OF COURT ORDER   \n",
-       "4                                          RAPE, ATTEMPTED   \n",
-       "...                                                    ...   \n",
-       "2993428     ASSAULT WITH DEADLY WEAPON, AGGRAVATED ASSAULT   \n",
-       "2993429     ASSAULT WITH DEADLY WEAPON, AGGRAVATED ASSAULT   \n",
-       "2993430                                         PICKPOCKET   \n",
-       "2993431           VANDALISM - MISDEAMEANOR ($399 OR UNDER)   \n",
-       "2993432  THEFT FROM MOTOR VEHICLE - GRAND ($950.01 AND ...   \n",
-       "\n",
-       "                          Mocodes  Vict Age Vict Sex Vict Descent  Premis Cd  \\\n",
-       "0                  0913 1814 2000        48        M            H      501.0   \n",
-       "1                            0329         0        M            W      101.0   \n",
-       "2                            0344         0        M            H      103.0   \n",
-       "3                  1100 0400 1402        47        F            W      101.0   \n",
-       "4                            0400        47        F            H      103.0   \n",
-       "...                           ...       ...      ...          ...        ...   \n",
-       "2993428            0416 0411 1822        25        F            H      102.0   \n",
-       "2993429       0601 0445 0416 0359        29        M            B      222.0   \n",
-       "2993430                 1822 0344        24        F            H      735.0   \n",
-       "2993431                 0329 1822        53        F            H      502.0   \n",
-       "2993432  1822 1606 0344 0385 1300        38        M            W      501.0   \n",
-       "\n",
-       "                                          Premis Desc  Weapon Used Cd  \\\n",
-       "0                              SINGLE FAMILY DWELLING             NaN   \n",
-       "1                                              STREET             NaN   \n",
-       "2                                               ALLEY             NaN   \n",
-       "3                                              STREET           102.0   \n",
-       "4                                               ALLEY           400.0   \n",
-       "...                                               ...             ...   \n",
-       "2993428                                      SIDEWALK           400.0   \n",
-       "2993429                                    LAUNDROMAT           500.0   \n",
-       "2993430               NIGHT CLUB (OPEN EVENINGS ONLY)             NaN   \n",
-       "2993431  MULTI-UNIT DWELLING (APARTMENT, DUPLEX, ETC)             NaN   \n",
-       "2993432                        SINGLE FAMILY DWELLING             NaN   \n",
-       "\n",
-       "                                            Weapon Desc Status   Status Desc  \\\n",
-       "0                                                   NaN     AA  Adult Arrest   \n",
-       "1                                                   NaN     IC   Invest Cont   \n",
-       "2                                                   NaN     IC   Invest Cont   \n",
-       "3                                              HAND GUN     IC   Invest Cont   \n",
-       "4        STRONG-ARM (HANDS, FIST, FEET OR BODILY FORCE)     IC   Invest Cont   \n",
-       "...                                                 ...    ...           ...   \n",
-       "2993428  STRONG-ARM (HANDS, FIST, FEET OR BODILY FORCE)     IC   Invest Cont   \n",
-       "2993429                     UNKNOWN WEAPON/OTHER WEAPON     IC   Invest Cont   \n",
-       "2993430                                             NaN     IC   Invest Cont   \n",
-       "2993431                                             NaN     IC   Invest Cont   \n",
-       "2993432                                             NaN     IC   Invest Cont   \n",
-       "\n",
-       "         Crm Cd 1  Crm Cd 2  Crm Cd 3  Crm Cd 4  \\\n",
-       "0           900.0       NaN       NaN       NaN   \n",
-       "1           740.0       NaN       NaN       NaN   \n",
-       "2           946.0       NaN       NaN       NaN   \n",
-       "3           900.0     998.0       NaN       NaN   \n",
-       "4           122.0       NaN       NaN       NaN   \n",
-       "...           ...       ...       ...       ...   \n",
-       "2993428     230.0       NaN       NaN       NaN   \n",
-       "2993429     230.0       NaN       NaN       NaN   \n",
-       "2993430     352.0       NaN       NaN       NaN   \n",
-       "2993431     745.0       NaN       NaN       NaN   \n",
-       "2993432     331.0       NaN       NaN       NaN   \n",
-       "\n",
-       "                                         LOCATION  \\\n",
-       "0          300 E  GAGE                         AV   \n",
-       "1                 SEPULVEDA                    BL   \n",
-       "2         1300 E  21ST                         ST   \n",
-       "3                 CAHUENGA                     BL   \n",
-       "4                 8TH                          ST   \n",
-       "...                                           ...   \n",
-       "2993428  12800    FILMORE                      ST   \n",
-       "2993429   6100 S  VERMONT                      AV   \n",
-       "2993430    500 S  MAIN                         ST   \n",
-       "2993431  14500    HARTLAND                     ST   \n",
-       "2993432   4100 S  HOBART                       BL   \n",
-       "\n",
-       "                            Cross Street      LAT       LON  AREA  \n",
-       "0                                    NaN  33.9825 -118.2695   NaN  \n",
-       "1        MANCHESTER                   AV  33.9599 -118.3962   NaN  \n",
-       "2                                    NaN  34.0224 -118.2524   NaN  \n",
-       "3        HOLLYWOOD                    BL  34.1016 -118.3295   NaN  \n",
-       "4        SAN PEDRO                    ST  34.0387 -118.2488   NaN  \n",
-       "...                                  ...      ...       ...   ...  \n",
-       "2993428                              NaN  34.2790 -118.4116  16.0  \n",
-       "2993429                              NaN  33.9841 -118.2915  12.0  \n",
-       "2993430                              NaN  34.0467 -118.2485   1.0  \n",
-       "2993431                              NaN  34.1951 -118.4487   9.0  \n",
-       "2993432                              NaN  34.0091 -118.3078   3.0  \n",
-       "\n",
-       "[2993433 rows x 29 columns]"
-      ]
-     },
-     "execution_count": 4,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "file_name = \"Data/[6]la_crime_2010_to_2023.zip\"\n",
-    "read_file(file_name)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "677ad1b9",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_memory_stat_by_column(df, output_file):\n",
-    "    # вывод пар: колонка - тип данных\n",
-    "    memory_usage_stat = df.memory_usage(deep=True)\n",
-    "    # суммарный размер\n",
-    "    total_memory_usage = memory_usage_stat.sum()\n",
-    "    result = {\n",
-    "        \"file_in_memory_size\": f\"{int(total_memory_usage // 1024):10} KB\",\n",
-    "        \"columns\": []\n",
-    "    }\n",
-    "    # проходимся по колонкам, записываем в список\n",
-    "    for key in df.dtypes.keys():\n",
-    "        result[\"columns\"].append({\n",
-    "            \"column_name\": key,\n",
-    "            \"memory_abs\": int(memory_usage_stat[key] // 1024),\n",
-    "            \"memory_per\": round(memory_usage_stat[key] / total_memory_usage * 100, 4),\n",
-    "            \"dtype\": str(df.dtypes[key])\n",
-    "        })\n",
-    "    # отсортируем колонки\n",
-    "    result[\"columns\"].sort(key=lambda x: x['memory_abs'], reverse=True)\n",
-    "    # Запись в файл JSON\n",
-    "    with open(output_file, 'w') as file:\n",
-    "        json.dump(result, file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "id": "9194376e",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "file_name = \"Data/[6]la_crime_2010_to_2023.zip\"\n",
-    "dataset = read_file(file_name)\n",
-    "output_file = \"результаты_6.json\"\n",
-    "get_memory_stat_by_column(dataset, output_file)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "id": "e1469615",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Считает объем памяти до и после преобразований\n",
-    "def mem_usage(pandas_obj):\n",
-    "    if isinstance(pandas_obj, pd.DataFrame):\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True).sum()\n",
-    "    else: # предположим, что если это не дадафрейм, то серия\n",
-    "        usage_b = pandas_obj.memory_usage(deep=True)\n",
-    "    usage_mb = usage_b / 1024 ** 2 # преобразуем быйты в мегабайты\n",
-    "    return \"{:03.2f} MB\".format(usage_mb)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "id": "4be4a3e7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 4. Преобразовать все колонки с типом данных «object» в категориальные, \n",
-    "#    если количество уникальных значений колонки составляет менее 50%."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "id": "4463d7a7",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def opt_obj(df):\n",
-    "    converted_obj = pd.DataFrame()\n",
-    "    dataset_obj = df.select_dtypes(include=['object']).copy()\n",
-    "    for col in dataset_obj.columns:\n",
-    "        num_unique_values = len(dataset_obj[col].unique())\n",
-    "        num_total_values = len(dataset_obj[col])\n",
-    "        if num_unique_values / num_total_values < 0.5:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col].astype('category')\n",
-    "        else:\n",
-    "            converted_obj.loc[:, col] = dataset_obj[col]\n",
-    "    print(mem_usage(dataset_obj))\n",
-    "    print(mem_usage(converted_obj))\n",
-    "    return converted_obj    "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "id": "2b0ee9bc",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2490.11 MB\n",
-      "154.16 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_obj = opt_obj(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "id": "9558be52",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 5.Провести понижающее преобразование для столбцов типов «int» колонок\n",
-    "def opt_int(df):\n",
-    "    dataset_int = df.select_dtypes(include=['int']) # выбираем колонки типа int\n",
-    "    \"\"\"\n",
-    "    downcast:\n",
-    "            - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n",
-    "            - 'unsigned': smallest unsigned int dtype (min.: np.int8)\n",
-    "            - 'float': smallest float dtype (min.: np.float32)\n",
-    "    \"\"\"\n",
-    "    converted_int = dataset_int.apply(pd.to_numeric, downcast='unsigned')\n",
-    "    print(mem_usage(dataset_int))\n",
-    "    print(mem_usage(converted_int))\n",
-    "    compare_ints = pd.concat([dataset_int.dtypes, converted_int.dtypes], axis=1)\n",
-    "    compare_ints.columns = ['before', 'after']\n",
-    "    compare_ints.apply(pd.Series.value_counts)\n",
-    "    print(compare_ints)\n",
-    "    return converted_int"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "id": "41ccfc55",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "137.03 MB\n",
-      "54.24 MB\n",
-      "            before   after\n",
-      "DR_NO        int64  uint32\n",
-      "TIME OCC     int64  uint16\n",
-      "Rpt Dist No  int64  uint16\n",
-      "Part 1-2     int64   uint8\n",
-      "Crm Cd       int64  uint16\n",
-      "Vict Age     int64   int64\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_int = opt_int(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "id": "f29d14a0",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 6. Провести понижающее преобразование для столбцов типов «float» колонок\n",
-    "def opt_float(df):\n",
-    "    dataset_float = df.select_dtypes(include=['float'])\n",
-    "    converted_float = dataset_float.apply(pd.to_numeric, downcast='float')\n",
-    "    print(mem_usage(dataset_float))\n",
-    "    print(mem_usage(converted_float))\n",
-    "    compare_float = pd.concat([dataset_float.dtypes, converted_float.dtypes], axis=1)\n",
-    "    compare_float.columns = ['before', 'after']\n",
-    "    compare_float.apply(pd.Series.value_counts)\n",
-    "    print(compare_float)\n",
-    "    return converted_float"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "id": "94de85bb",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "228.38 MB\n",
-      "114.19 MB\n",
-      "                 before    after\n",
-      "AREA            float64  float32\n",
-      "Premis Cd       float64  float32\n",
-      "Weapon Used Cd  float64  float32\n",
-      "Crm Cd 1        float64  float32\n",
-      "Crm Cd 2        float64  float32\n",
-      "Crm Cd 3        float64  float32\n",
-      "Crm Cd 4        float64  float32\n",
-      "LAT             float64  float32\n",
-      "LON             float64  float32\n",
-      "AREA            float64  float32\n"
-     ]
-    }
-   ],
-   "source": [
-    "converted_float = opt_float(dataset)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "id": "75744269",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2855.52 MB\n",
-      "322.59 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# 7. Повторно провести анализ набора данных, как в п. 2, сравнив показатели занимаемой памяти\n",
-    "# Создаем копию исходного датафрейма\n",
-    "optimized_dataset = dataset.copy()\n",
-    "\n",
-    "# заменяем исходные числовые столбцы оптмизированными\n",
-    "optimized_dataset[converted_obj.columns] = converted_obj\n",
-    "optimized_dataset[converted_int.columns] = converted_int\n",
-    "optimized_dataset[converted_float.columns] = converted_float\n",
-    "\n",
-    "print(mem_usage(dataset))\n",
-    "print(mem_usage(optimized_dataset))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "id": "e7dd9ff6",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# 8. Выбрать произвольно 10 колонок для дальнейшем работы, \n",
-    "#    прописав преобразование типов и загрузку только нужных данных на этапе чтения файла. \n",
-    "#    При этом стоит использовать чанки. Сохраните полученный поднабор в отдельном файле."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "id": "1477da15",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Rpt Dist No:uint16\n",
-      "Vict Age:int64\n",
-      "TIME OCC:uint16\n",
-      "AREA:float32\n",
-      "AREA NAME:category\n",
-      "Crm Cd Desc:category\n",
-      "Vict Sex:category\n",
-      "Premis Desc:category\n",
-      "Status:category\n",
-      "LOCATION:category\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.99 MB\n",
-      "11.82 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "need_column = dict()\n",
-    "column_names = ['Rpt Dist No', 'Vict Age', 'TIME OCC',\n",
-    "           'AREA', 'AREA NAME', 'Crm Cd Desc',\n",
-    "           'Vict Sex', 'Premis Desc', 'Status', 'LOCATION']\n",
-    "\n",
-    "opt_dtypes = optimized_dataset.dtypes\n",
-    "\n",
-    "for key in column_names:\n",
-    "    need_column[key] = opt_dtypes[key]\n",
-    "    print(f\"{key}:{opt_dtypes[key]}\")\n",
-    "\n",
-    "with open(\"dtypes_6.json\", mode=\"w\") as file:\n",
-    "    dtype_json = need_column.copy()\n",
-    "    for key in dtype_json.keys():\n",
-    "        dtype_json[key] = str(dtype_json[key])\n",
-    "    json.dump(dtype_json, file)\n",
-    "    \n",
-    "# Работа с чанкам\n",
-    "has_header = True\n",
-    "for chunk in pd.read_csv(file_name,\n",
-    "                         usecols=lambda x: x in column_names,\n",
-    "                         dtype=need_column,\n",
-    "                         #parse_dates=['date'],\n",
-    "                         #infer_datetime_format=True,\n",
-    "                         chunksize=100_000):\n",
-    "    # любые преобразования\n",
-    "    print(mem_usage(chunk))\n",
-    "    chunk.to_csv('df_6.csv', mode='a', header=has_header)\n",
-    "    has_header = False"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 18,
-   "id": "2f5e6c84",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "<class 'pandas.core.frame.DataFrame'>\n",
-      "RangeIndex: 2993433 entries, 0 to 2993432\n",
-      "Data columns (total 10 columns):\n",
-      " #   Column       Dtype   \n",
-      "---  ------       -----   \n",
-      " 0   TIME OCC     uint16  \n",
-      " 1   AREA NAME    category\n",
-      " 2   Rpt Dist No  uint16  \n",
-      " 3   Crm Cd Desc  category\n",
-      " 4   Vict Age     int64   \n",
-      " 5   Vict Sex     category\n",
-      " 6   Premis Desc  category\n",
-      " 7   Status       category\n",
-      " 8   LOCATION     category\n",
-      " 9   AREA         float32 \n",
-      "dtypes: category(6), float32(1), int64(1), uint16(2)\n",
-      "memory usage: 86.5 MB\n"
-     ]
-    }
-   ],
-   "source": [
-    "# сохраняем информацию о типах, коорые нам нужны. Необходимо для графиков.\n",
-    "def read_types(file_name):\n",
-    "    dtypes = {}\n",
-    "    with open(file_name, mode='r') as file:\n",
-    "        dtypes = json.load(file)\n",
-    "    for key in dtypes.keys():\n",
-    "        if dtypes[key] == 'category':\n",
-    "            dtypes[key] = pd.CategoricalDtype\n",
-    "        else:\n",
-    "            dtypes[key] = np.dtype(dtypes[key])\n",
-    "    return dtypes\n",
-    "\n",
-    "need_dtypes = read_types(\"dtypes_6.json\")\n",
-    "\n",
-    "dataset = pd.read_csv(\"df_6.csv\",\n",
-    "                  usecols=lambda x: x in need_dtypes.keys(),\n",
-    "                  dtype=need_column)\n",
-    "dataset.info(memory_usage='deep')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 19,
-   "id": "35c7de56",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График столбчатой диаграммы\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.countplot(x='AREA NAME', data=dataset)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 20,
-   "id": "adee6b0e",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# График круговой диаграммы\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "dataset['Vict Sex'].value_counts().plot(kind='pie', autopct='%1.1f%%')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 21,
-   "id": "f75d085c",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Линейный график\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.lineplot(x='Vict Age', y='AREA', data=dataset)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 22,
-   "id": "615bd78a",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Гистограмма \n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.histplot(dataset['Rpt Dist No'], bins=20)\n",
-    "plt.xlabel('')\n",
-    "plt.ylabel('')\n",
-    "plt.title('')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 23,
-   "id": "e225aac8",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 576x432 with 2 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Корреляционная матрица для связи различных числовых переменных\n",
-    "numerical_vars = ['TIME OCC', 'Rpt Dist No', 'Vict Age']\n",
-    "correlation_matrix = dataset[numerical_vars].corr()\n",
-    "plt.figure(figsize=(8, 6))\n",
-    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
-    "plt.title('Корреляционная матрица')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "8b3d7a71",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.9.7"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
